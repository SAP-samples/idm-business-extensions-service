<IDM EXPORTED_ON="2024-11-27 15:35:42.8233333" IS_PACKAGE_FOLDER_EXPORT="0" PACKAGE_TRANSPORT_VERSION="8#0#8#2020#0#1#800SP8#1814#1814#1807" SCHEMA_VERSION="1814">
<PACKAGES>
<PACKAGE MCQUALIFIEDNAME="com.sap.rds.idm.core">
<MCCOPIEDFROMMAJORVERSION>0</MCCOPIEDFROMMAJORVERSION>
<MCCOPIEDFROMMINORVERSION>0</MCCOPIEDFROMMINORVERSION>
<MCDISPLAYNAME>com.sap.rds.idm.core</MCDISPLAYNAME>
<MCLASTMODIFIED>1732721730337</MCLASTMODIFIED>
<MCMAJORVERSION>1</MCMAJORVERSION>
<MCMINORVERSION>55</MCMINORVERSION>
<MCPACKAGELEVEL>1528</MCPACKAGELEVEL>
<MCPACKAGETYPE>0</MCPACKAGETYPE>
<MCQUALIFIEDNAME>com.sap.rds.idm.core</MCQUALIFIEDNAME>
<PACKAGE_VARS>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>Name of Mail Originator</VARDESCRIPTION>
<VARFLAGS>0</VARFLAGS>
<VARNAME>SAPC_ERROR_MAIL_ORIGINATOR</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE> SAP IDM BE 8.0 &lt;donotreply@yourcompany.com&gt;</VARVALUE>
</VARIABLE>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>Semicolon separated list of email addresses actively notified about errors in IdM</VARDESCRIPTION>
<VARFLAGS>0</VARFLAGS>
<VARNAME>SAPC_ERROR_MAIL_RECEIVER</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE>Administrator@mycompany.com</VARVALUE>
</VARIABLE>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>SMTP host</VARDESCRIPTION>
<VARFLAGS>0</VARFLAGS>
<VARNAME>SAPC_ERROR_MAIL_SMTP_HOST</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE>idm8.mycompany.com</VARVALUE>
</VARIABLE>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>SMTP port</VARDESCRIPTION>
<VARNAME>SAPC_ERROR_MAIL_SMTP_PORT</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE>25</VARVALUE>
</VARIABLE>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>(SAPC) Log level used in tasks and jobs of IdM packages provided by SAP Consulting (0=off, 1=error, 2=info, 3=debug)</VARDESCRIPTION>
<VARFLAGS>0</VARFLAGS>
<VARNAME>SAPC_LOG_LEVEL</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE>3</VARVALUE>
</VARIABLE>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>(SAPC) ID of Master Identity Store for IDM RDS Package</VARDESCRIPTION>
<VARNAME>SAPC_MASTER_IDS_ID</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE>1</VARVALUE>
</VARIABLE>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>Password for SMTP authentification
</VARDESCRIPTION>
<VARNAME>SAPC_NOTIFICATION_AUTH_PASSWORD</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE>{AES256CBC}1:100e7e451c99c985afdc5647f3c0df81-0db9e55f283163a8505756a678d71d46</VARVALUE>
</VARIABLE>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>User for SMTP authentification </VARDESCRIPTION>
<VARNAME>SAPC_NOTIFICATION_AUTH_USER</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE>idm-dev-notifications</VARVALUE>
</VARIABLE>
<VARIABLE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<VARBEHAVIOR>0</VARBEHAVIOR>
<VARCATEGORY>-1</VARCATEGORY>
<VARDESCRIPTION>Used by script sapc_handleSystemSpecificAttributes in process "SAPC Handle System Specific Attributes" in order to only set system specific attribute values for repositories that are enabled for that feature</VARDESCRIPTION>
<VARNAME>SAPC_REPOSITORY_TYPES_SUPPORTING_SYSTEM_SPECIFIC_ATTRIBUTES</VARNAME>
<VARTYPE>0</VARTYPE>
<VARVALUE>ABAP;JAVA;LDAP;SAP_IN_MEMORY_DB</VARVALUE>
</VARIABLE>
</PACKAGE_VARS>
<USES>
<USE>
<MCFROMREFERENCE>02E9DDDD-ECBE-48A2-A566-C196DF24651D</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.del.MX_VALIDFROM</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>15</TOUSAGETYPE>
</USE>
<USE>
<MCFROMREFERENCE>F6451B6C-8D68-48F3-BD0E-5615F7EFD93D</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.mod.MX_VALIDFROM</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>14</TOUSAGETYPE>
</USE>
<USE>
<MCFROMREFERENCE>C0E4A03B-536D-46C3-98BC-F634C89DD958</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.add.MX_VALIDFROM</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>13</TOUSAGETYPE>
</USE>
<USE>
<MCFROMREFERENCE>02E9DDDD-ECBE-48A2-A566-C196DF24651D</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.del.MX_VALIDTO</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>15</TOUSAGETYPE>
</USE>
<USE>
<MCFROMREFERENCE>F6451B6C-8D68-48F3-BD0E-5615F7EFD93D</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.mod.MX_VALIDTO</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>14</TOUSAGETYPE>
</USE>
<USE>
<MCFROMREFERENCE>C0E4A03B-536D-46C3-98BC-F634C89DD958</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.add.MX_VALIDTO</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>13</TOUSAGETYPE>
</USE>
<USE>
<MCFROMREFERENCE>02E9DDDD-ECBE-48A2-A566-C196DF24651D</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.del.MX_PASSWORD_DISABLED</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>15</TOUSAGETYPE>
</USE>
<USE>
<MCFROMREFERENCE>F6451B6C-8D68-48F3-BD0E-5615F7EFD93D</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.mod.MX_PASSWORD_DISABLED</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>14</TOUSAGETYPE>
</USE>
<USE>
<MCFROMREFERENCE>C0E4A03B-536D-46C3-98BC-F634C89DD958</MCFROMREFERENCE>
<MCFROMTYPE>7</MCFROMTYPE>
<MCMINORVERSION>0</MCMINORVERSION>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCTOQUALIFIEDNAME>attribute.add.MX_PASSWORD_DISABLED</MCTOQUALIFIEDNAME>
<MCTOTYPE>9</MCTOTYPE>
<MCVERSION>0</MCVERSION>
<TOUSAGETYPE>13</TOUSAGETYPE>
</USE>
</USES>
<PUBLIC_REFERENCES>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_Handle_MX_FS_PERSONNEL_NUMBER_OF_MANAGER_Add</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>68CC22EB-6779-4D02-8B23-7AAAA2EFBAED</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_Handle_MX_FS_PERSONNEL_NUMBER_OF_MANAGER_Del</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>B61C40A5-868C-4311-92CE-0393FFE70448</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_Handle_MX_FS_PERSONNEL_NUMBER_OF_MANAGER_Mod</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>BEED1ACB-C58D-4F99-965C-2B71F44611D9</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_Handle_System_Specific_Attributes_Add</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>C0E4A03B-536D-46C3-98BC-F634C89DD958</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_Handle_System_Specific_Attributes_Del</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>02E9DDDD-ECBE-48A2-A566-C196DF24651D</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_Handle_System_Specific_Attributes_Mod</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>F6451B6C-8D68-48F3-BD0E-5615F7EFD93D</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_ModifyValidity</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>B6C0F672-66BC-486A-9892-CC248C009165</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_NoMaster_Process</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>60424C7E-02C8-4320-8F7A-DFA38D898450</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_Notification</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>3CD4608E-D8FF-4037-9234-14F45AE78A9F</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_VALIDATE_ADD_MEMBER_DUMMY</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>A4630A6E-8148-45C2-9207-CCF792447431</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_VALIDATE_DEL_MEMBER_DUMMY</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>2CE9496C-A4DA-4E08-AE8C-982750121490</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>SAPC_VALIDATE_MOD_MEMBER_DUMMY</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>3EEC3352-C848-432A-99A1-0AE50A2BE8DB</MCREFERENCE>
<MCTYPE>7</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_DownloadFileToShare</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_DownloadFileToShare</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_abap_convertFromABAPValidFromDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_abap_convertFromABAPValidFromDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_abap_convertFromABAPValidToDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_abap_convertFromABAPValidToDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_abap_getHelpValKey</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_abap_getHelpValKey</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_abap_handlePhoneNumberFromABAP</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_abap_handlePhoneNumberFromABAP</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_abap_readGroupsForUser</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_abap_readGroupsForUser</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_checkDNmodified</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_checkDNmodified</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_convertBooleanForLDS</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_convertBooleanForLDS</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_convertFromADSAccountDisabled</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_convertFromADSAccountDisabled</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_convertFromADSAccountExpires</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_convertFromADSAccountExpires</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_convertFromADSPasswordDisabled</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_convertFromADSPasswordDisabled</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_convertFromADSPasswordNotRequired</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_convertFromADSPasswordNotRequired</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_convertToADSAccountExpires</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_convertToADSAccountExpires</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_generateAccountCN</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_generateAccountCN</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_getGUIDOfGroup</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_getGUIDOfGroup</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_getGUIDOfPerson</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_getGUIDOfPerson</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_getGroupGUIDFromDN</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_getGroupGUIDFromDN</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_getUserMskeyvalueFromGUID</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_getUserMskeyvalueFromGUID</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_handleBoolean</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_handleBoolean</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_setUseraccountcontrol</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_setUseraccountcontrol</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_skipIfLDS</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_skipIfLDS</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_skipIfNotLDS</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_skipIfNotLDS</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_skipInitialLoadIfLDS</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_skipInitialLoadIfLDS</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ads_skipInitialLoadIfNotLDS</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ads_skipInitialLoadIfNotLDS</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_asj_mapABAPUserTypeToAsJava</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_asj_mapABAPUserTypeToAsJava</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_calculate_ABAP_ROLE_TYPE</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_calculate_ABAP_ROLE_TYPE</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkExistenceCurrentAssignment</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkExistenceCurrentAssignment</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkExistenceCurrentConfigItem</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkExistenceCurrentConfigItem</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkExistenceCurrentIdentity</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkExistenceCurrentIdentity</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkExistenceCurrentPrivilege</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkExistenceCurrentPrivilege</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkExistenceCurrentRole</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkExistenceCurrentRole</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkGlobalAttributeValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkGlobalAttributeValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkInheritedPrivilege</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkInheritedPrivilege</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkRepository</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkRepository</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_checkRepositoryAvailabilityFromProvTask</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_checkRepositoryAvailabilityFromProvTask</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_collectUserDatafromABAP</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_collectUserDatafromABAP</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_convertDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_convertDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_convertSpecialCharacters</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_convertSpecialCharacters</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_convertStringToDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_convertStringToDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_convertTime</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_convertTime</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_convertValidDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_convertValidDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_convertValidityDate_DDMMYYYY</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_convertValidityDate_DDMMYYYY</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_copyIdentityCheckFlag</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_copyIdentityCheckFlag</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_catchProvisioningError</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_catchProvisioningError</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_getAttributeID</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_getAttributeID</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_getDBcommands</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_getDBcommands</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_getDBprefix</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_getDBprefix</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_getNolock</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_getNolock</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_getRepositoryPackageID</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_getRepositoryPackageID</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_getValueHelpInsertStatement</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_getValueHelpInsertStatement</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_getValueHelpUpdateStatement</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_getValueHelpUpdateStatement</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_script_functions</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_script_functions</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_shuffleString</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_shuffleString</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_stopUpdateLoadPass</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_stopUpdateLoadPass</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_core_uGetProvisionUser</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_core_uGetProvisionUser</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_createZipFileFromFile</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_createZipFileFromFile</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_encryptPassword</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_encryptPassword</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_findPrimaryDeltaObject</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_findPrimaryDeltaObject</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_findSecondaryDeltaObject</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_findSecondaryDeltaObject</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_generatePassword</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_generatePassword</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getABAPFieldFromAccountRep</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getABAPFieldFromAccountRep</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getAttributeFromAccountRep</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getAttributeFromAccountRep</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getAttributeValueByMSKEY</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getAttributeValueByMSKEY</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getAttributeValueForCopyIdentity</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getAttributeValueForCopyIdentity</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getJobIDbyJobName</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getJobIDbyJobName</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getJobVar</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getJobVar</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getManagerMskey</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getManagerMskey</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getMskeyFromAccountRep</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getMskeyFromAccountRep</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getMskeyFromAudit</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getMskeyFromAudit</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getMskeyFromMskeyvalue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getMskeyFromMskeyvalue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getMskeyFromMskeyvalueMultiValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getMskeyFromMskeyvalueMultiValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getMskeyValueFromAccountRep</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getMskeyValueFromAccountRep</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getMskeyvalueFromMskey</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getMskeyvalueFromMskey</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getMskeyvalueFromMskeyMultiValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getMskeyvalueFromMskeyMultiValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getNameOfAllAssignedPrivileges</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getNameOfAllAssignedPrivileges</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getNameOfAssignedPendingPrivileges</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getNameOfAssignedPendingPrivileges</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getPassword</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getPassword</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getPrivNameFromRepAssignment</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getPrivNameFromRepAssignment</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getPrivilegeMskeyFromAudit</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getPrivilegeMskeyFromAudit</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getRepConstant</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getRepConstant</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getRepID</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getRepID</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getRoleMembersFromRoleName</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getRoleMembersFromRoleName</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getSQLforUserRepositories</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getSQLforUserRepositories</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getSQLstatementFromRequest</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getSQLstatementFromRequest</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getSalutationCode</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getSalutationCode</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getSalutationText</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getSalutationText</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getTaskIDbyGUID</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getTaskIDbyGUID</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getTodayDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getTodayDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_getValidityFromAssignment</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_getValidityFromAssignment</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_hanaConnectionCheck</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_hanaConnectionCheck</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_hanaConnectionCheckInitialize</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_hanaConnectionCheckInitialize</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_hanaConnectionCheckSetFlag</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_hanaConnectionCheckSetFlag</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_hana_getRepositoryVariables</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_hana_getRepositoryVariables</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_hana_handleBoolean_for_disable</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_hana_handleBoolean_for_disable</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_hana_handleBoolean_for_enable</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_hana_handleBoolean_for_enable</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_hana_privilege_filter</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_hana_privilege_filter</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_hana_user_filter</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_hana_user_filter</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_handleDeletedAssignmentsFromBackend</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_handleDeletedAssignmentsFromBackend</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_handleInheritedAssignments</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_handleInheritedAssignments</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_handleModifyValidity</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_handleModifyValidity</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_handleSystemSpecificAttributes</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_handleSystemSpecificAttributes</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_handleTimeDependentPrivilege</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_handleTimeDependentPrivilege</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_handleTimeInDependentUserToPrivAssignments</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_handleTimeInDependentUserToPrivAssignments</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_java_handleBoolean</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_java_handleBoolean</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_jobErrorHandler</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_jobErrorHandler</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ldapConnectionCheck</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ldapConnectionCheck</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ldapConnectionCheckInitFlag</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ldapConnectionCheckInitFlag</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_ldapConnectionCheckSetFlag</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_ldapConnectionCheckSetFlag</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_localStandardScriptsContainer</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_localStandardScriptsContainer</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_logCurrentValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_logCurrentValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_prepareSQLStatement</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_prepareSQLStatement</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_processDebugger</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_processDebugger</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_reconCombinedSQLGeneric</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_reconCombinedSQLGeneric</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_recon_checkEmptyValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_recon_checkEmptyValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_recon_generateCompareQuery</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_recon_generateCompareQuery</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_recon_generateHTMLOutput</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_recon_generateHTMLOutput</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_recon_generateSelectQuery</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_recon_generateSelectQuery</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_recon_getSourceParameters</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_recon_getSourceParameters</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_removeSPMLPrefix</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_removeSPMLPrefix</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_removeSpaces</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_removeSpaces</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_remove_linebreaks</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_remove_linebreaks</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_report_convertChangeType</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_report_convertChangeType</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_report_convertChangedBy</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_report_convertChangedBy</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_returnFirstValidInputValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_returnFirstValidInputValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_returnPar</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_returnPar</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_rfcConnectionCheck</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_rfcConnectionCheck</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_rfcConnectionCheckInit</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_rfcConnectionCheckInit</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_rfcConnectionClose</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_rfcConnectionClose</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_rfcConnectionOpen</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_rfcConnectionOpen</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_runResetPasswordTaskAsync</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_runResetPasswordTaskAsync</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_sendJobLog</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_sendJobLog</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_sendNotification</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_sendNotification</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_setContextVars</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_setContextVars</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_setDefaultValidDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_setDefaultValidDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_setJobVar</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_setJobVar</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_setJobVars</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_setJobVars</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_setLockRepository</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_setLockRepository</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_setValidityPeriod</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_setValidityPeriod</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_showDestination</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_showDestination</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_skipIfSAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_skipIfSAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_skipIf_SAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue_or_sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_skipIf_SAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue_or_sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_splitAssignment</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_splitAssignment</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_splitString</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_splitString</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_spmlConnectionCheck</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_spmlConnectionCheck</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_spmlConnectionCheckInitialize</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_spmlConnectionCheckInitialize</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_spmlConnectionCheckSetFlag</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_spmlConnectionCheckSetFlag</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_stopJobABAP</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_stopJobABAP</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_stringToDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_stringToDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_timeStampToStringDate</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_timeStampToStringDate</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_timeStampToStringDateTime</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_timeStampToStringDateTime</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_toUpperCase</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_toUpperCase</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_toUpperCaseMskeyValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_toUpperCaseMskeyValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_triggerJob</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_triggerJob</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_triggerJobForReposOfRepoType</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_triggerJobForReposOfRepoType</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_triggerLockUnlockFromJob</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_triggerLockUnlockFromJob</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_triggerResetPasswordFromJob</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_triggerResetPasswordFromJob</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_uGetAuditID</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_uGetAuditID</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_uIS_RepairEntry</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_uIS_RepairEntry</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_uIS_SetValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_uIS_SetValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_uIS_nGetValues</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_uIS_nGetValues</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_uProvision</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_uProvision</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_uSleep</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_uSleep</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_updateMskeyValue</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_updateMskeyValue</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
<PUBLIC_REFERENCE>
<MCNAME>sapc_waitForPendingAudits</MCNAME>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCREFERENCE>sapc_waitForPendingAudits</MCREFERENCE>
<MCTYPE>12</MCTYPE>
</PUBLIC_REFERENCE>
</PUBLIC_REFERENCES>
<PACKAGE_SCRIPTS>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_DownloadFileToShare

function sapc_DownloadFileToShare(Par) {

    var script = "sapc_DownloadFileToShare::";

    var userMskey = Par.get("MSKEY");
    var requestorMskey = Par.get("REQUESTOR_MSKEY");
    var activity = Par.get("ACTIVITY");
    var fileAttribute = Par.get("FILE_ATTRIBUTE");
    var fileDirectoryIdentity = Par.get("FILE_DIRECTORY_IDENTITY");
    var fileDirectoryRole = Par.get("FILE_DIRECTORY_ROLE");


    // transform "\" into "\\"
    var fileDirectory = "";
    fileDirectoryIdentity = uReplaceString(fileDirectoryIdentity, "\\", "\\\\");
    fileDirectoryRole = uReplaceString(fileDirectoryRole, "\\", "\\\\");

    var idStore = uGetIDStore();
    var sql = "";
    var changeType = "";
    var dbType = "%$ddm.databasetype%";

    uErrMsg(1, script + "FileAttribute: " + fileAttribute);

    // ------------------------
    if (fileAttribute == "" || fileDirectoryIdentity == "" || fileDirectoryRole == "") {
        uErrMsg(1, script + "One of the constants (file or directory) has not been defined correctly!");
        uSkip(1, 1);
    }

    // ------------------------
    // Specify the Change_Type

    if (dbType == 1) // MS-SQL 
    {
        sql = "SELECT SUBSTRING(Job_name, 0, 100) AS TYPE FROM MCMV_jobs " + " WHERE Group_name IN ('Identity Jobs (MX_PERSON)','Business Role Jobs (MX_ROLE)') " + " AND Job_name like '%" + activity + "%'";
    } else if (dbType == 2) // Oracle
    {
        sql = "SELECT SUBSTR(Job_name, 0, 100) AS TYPE FROM MCMV_jobs " + " WHERE Group_name IN ('Identity Jobs (MX_PERSON)','Business Role Jobs (MX_ROLE)') " + " AND Job_name like '%" + activity + "%'";
    } else {
        uErrMsg(2, script + "Invalid database type: [" + dbType + "]");

        uSkip(1, 1, "WRONG DB TYPE");
    }

    changeType = uSelect(sql);

    // get filename from binary
    var fileArray = fileAttribute.split(":");
    var fileName = fileArray[0];
    var binary = fileArray[1];

    uErrMsg(1, script + "File name: " + fileName + " ; Binary: " + binary);


    // var fileBinary = uIS_sGetValue(userMskey, idStore, binary, 0);

    if (changeType == "" || binary == "") {
        uErrMsg(1, script + "ChangeType missing or no file has been uploaded!");
        uSkip(1, 1);
    }

    // uErrMsg(1, script + "File binary: " + fileBinary + " ; File name: " + fileName + " ; Binary: " + binary);

    var filePlain = uFromHex(binary);

    uErrMsg(0, script + "Plain: " + filePlain);

    // Find file directory and store binary as a file 
    var currentFileName = "";

    if (activity == "SAPC Business Role Upload - Creation") {
        fileDirectory = fileDirectoryRole;
        currentFileName = uGetConstant("rep.SAPC_ROLE_UPLOAD_CREATE_FILE_NAME"); // SAPC_Role_Creation.csv
    } else if (activity == "SAPC Business Role Upload - Role/Priv Assignment") {
        fileDirectory = fileDirectoryRole;
        currentFileName = uGetConstant("rep.SAPC_ROLE_UPLOAD_ASSIGN_FILE_NAME"); // SAPC_Role_Assign.csv
    } else if (activity == "SAPC Identity Upload - Creation") {
        fileDirectory = fileDirectoryIdentity;
        currentFileName = uGetConstant("rep.SAPC_IDENTITY_UPLOAD_CREATE_FILE_NAME"); // SAPC_Identity_Import.csv
    } else if (activity == "SAPC Identity Upload - Disable / Enable") {
        fileDirectory = fileDirectoryIdentity;
        currentFileName = uGetConstant("rep.SAPC_IDENTITY_DISABLEENABLE_FILE_NAME"); // SAPC_Identity_DisableEnable.csv
    } else if (activity == "SAPC Identity Upload - Modification") {
        fileDirectory = fileDirectoryIdentity;
        currentFileName = uGetConstant("rep.SAPC_IDENTITY_UPLOAD_MOD_FILE_NAME"); // SAPC_Identity_Modification.csv
    } else if (activity == "SAPC Identity Upload - Reset Password") {
        fileDirectory = fileDirectoryIdentity;
        currentFileName = uGetConstant("rep.SAPC_IDENTITY_RESET_PW_FILE_NAME"); // SAPC_Identity_PasswordReset.csv
    } else if (activity == "SAPC Identity Upload - Role/Priv Assignment") {
        fileDirectory = fileDirectoryIdentity;
        currentFileName = uGetConstant("rep.SAPC_IDENTITY_UPLOAD_ASSIGN_FILE_NAME"); // SAPC_Identity_Assignments.csv
    }


    var path = fileDirectory + "\\" + currentFileName;

    uToFile(path, filePlain, "FALSE");

    uErrMsg(1, script + " File has been downloaded successfully to defined Share [" + path + "]!");

    return "";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_DownloadFileToShare</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_abap_convertFromABAPValidFromDate

function sapc_abap_convertFromABAPValidFromDate(Par) {
    // default input Par looks like this: 0000-00-00 (YYYY-MM-DD) 
    // and should be extended to Identity Center format:
    // YYYY-MM-DDThh:mm:ss
    if (Par == "0000-00-00" || Par == "1900-01-01") {
        return "";
    } else {
        var validate_year = new String(Par);
        var year = parseInt(validate_year.substring(0, 4), 10);
        if (year &lt; 1753) {
            // MS-SQL supports dates starting with Jan 1st 1753. 
            // (1753 was the year when Sweden, as the last european country switched to the Gregorian calendar).
            // ISDATE is used in stored procedure
            return "";
        } else {
            var timestamp = new String(Par) + "T00:00:00";

            return timestamp;
        }
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_abap_convertFromABAPValidFromDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_abap_convertFromABAPValidToDate

function sapc_abap_convertFromABAPValidToDate(Par) {
    // input Par looks like this: 2007-09-20 (YYYY-MM-DD) 
    // and should be extended to:
    // 2007-09-21 		( YYYY-MM-DDThh:mm:ss )  where DD = DD(old) + 1 
    // to ensure ABAP's logic of inclusive date
    // if value is not set default looks like this: 0000-00-00
    // no limit defined for user account
    if (Par == "0000-00-00" || Par == "9999-12-31") {
        return "";
    } else {
        //		var timestamp = Par + "T23:59:59";		
        var limitDate = Par.split("-");
        var year = limitDate[0];
        var month = limitDate[1];
        var day = limitDate[2];

        //********************************************************************************************
        // validate year
        var validate_year = new String(year);
        var lowerLimit = parseInt(validate_year.substring(0, 4), 10);
        if (lowerLimit &lt; 1753) {
            // MS-SQL supports dates starting with Jan 1st 1753. 
            // (1753 was the year when Sweden, as the last european country switched to the Gregorian calendar).
            // ISDATE is used in stored procedure
            return "1992-06-07T00:00:00"; // return a date in the past
        }
        //********************************************************************************************		
        // create valid time
        var timestamp = new Date();
        //					YYYY			month: 0 - 11		validToDay + 1
        timestamp.setUTCFullYear(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10) + 1);
        timestamp.setUTCHours(0, 0, 0, 0);
        // result should look like this: YYYY-MM-DDThh:mm:ss
        var result = timestamp.getUTCFullYear() + "-";
        // month
        var tmp = timestamp.getUTCMonth() + 1;
        if (tmp.toString().length == 1) result += "0" + tmp.toString();
        else result += tmp.toString();
        // date
        result += "-";
        tmp = timestamp.getUTCDate();
        if (tmp.toString().length == 1) result += "0" + tmp.toString();
        else result += tmp.toString();
        // Timestamp
        result += "T";
        // hours
        tmp = timestamp.getUTCHours();

        if (tmp.toString().length == 1) result += "0" + tmp.toString();
        else result += tmp.toString();
        // minutes
        result += ":";
        tmp = timestamp.getUTCMinutes();
        if (tmp.toString().length == 1) result += "0" + tmp.toString();
        else result += tmp.toString();
        // seconds
        result += ":";
        tmp = timestamp.getUTCSeconds();
        if (tmp.toString().length == 1) result += "0" + tmp.toString();
        else result += tmp.toString();

        return result;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_abap_convertFromABAPValidToDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_abap_getHelpValKey

function sapc_abap_getHelpValKey(Par) {
    var script = "sapc_abap_getHelpValKey::";
    var debugMode = 0;

    //input contains AttributeName!!ValText!!ValLocale which is used to access ValKey of table mxi_AttrValueHelp
    //returns corresponding ValKey

    var result = "";
    var arrayOfStrings = Par.split("!!");
    var attrName = arrayOfStrings[0];
    var attrVal = arrayOfStrings[1];

    // default is empty string
    var valLocale = "";

    if (attrVal == "NULLATTR" || attrVal == "") {
        result = attrVal;
    } else {
        if (arrayOfStrings.length &gt; 2) {
            valLocale = arrayOfStrings[2];

            if (valLocale == "" || valLocale == "null" || valLocale == null) {
                // if locale is not defined for user, set english language as default
                valLocale = "EN";
            }
        }

        var sql = "select ValKey from mxi_attrValueHelp where ValId = '" + attrName + "' AND ValText = '" + attrVal + "'";

        if (valLocale != "") {
            sql = sql + " AND ValLocale = '" + valLocale + "'";
        }

        var sqlResult = uSelect(sql);

        if (sqlResult != null &amp;&amp; sqlResult != "") {
            var arrayOfValues = sqlResult.split("!!");
            if (arrayOfValues.length &gt; 1) {
                uInfo(script + "sql: " + sql + " SQL result : " + sqlResult + " len: " + arrayOfValues.length);

                uWarning(script + "Table mxi_attrValueHelp contains several keys for attribute: " + attrName + " with value: [" + attrVal + "] ; locale: [" + valLocale + "]");

                for (var i = 0; i &lt; arrayOfValues.length; i++) {
                    uInfo("key: " + arrayOfValues[i]);
                }
            } else {
                result = arrayOfValues[0];
            }
        }
    }

    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_abap_getHelpValKey</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * ABAP Sometimes returns phone numbers of format &lt;CountryCode&gt;:+&lt;countryCodeNr&gt; +&lt;countryCodeNr&gt; &lt;Nr&gt;-&lt;Extension&gt;
 *  Letters, the colon and the duplicate countryCodeNr need to be removed.
 *  CH:+41 +41 12 345 67 89-1234 111 -&gt; +41 12 345 67 89-1234 111
 */


function sapc_abap_handlePhoneNumberFromABAP(Par) {

    if (Par == null || Par == "" || Par == "null" || Par.indexOf("!ERROR") != -1) {
        uInfo("sapc_abap_handlePhoneNumberFromABAP: Invalid phone number: " + Par);
        return "";
    }

    // cut letters and colon
    // CH:+41 +41 12 345 67 89-1234 111 -&gt; +41 12 345 67 89-1234 111
    if (Par.indexOf(":") != -1) {
        uInfo("sapc_abap_handlePhoneNumberFromABAP: Cutting of character [" + Par.substring(0, Par.indexOf(":") + 1) + "] from phone number [" + Par + "].");
        Par = Par.substring(Par.indexOf(":") + 1);
    }

    // duplicate country code (split by " ", check for duplicate string starting with + in array)
    // +41 +41 12 345 67 89-1234 111 -&gt; +41 12 345 67 89-1234 111
    var tmpArr = Par.split(" ");
    var finalString = "";
    var countryCodeIdentified = false;
    for (ita = 0; ita &lt; tmpArr.length; ita++) { // loop through number, identitify and remove duplicate country code

        if (tmpArr[ita].indexOf("+") == 0) { // is country code
            if (!countryCodeIdentified) { // country code not found yet
                if (finalString != "") finalString += " ";
                finalString += tmpArr[ita];
                countryCodeIdentified = true;
            } else { // country code found already -&gt; has to be duplicate
                uInfo("sapc_abap_handlePhoneNumberFromABAP: Cutting of character [" + tmpArr[ita] + "] from phone number [" + Par + "].");
            }
        } else {
            if (finalString != "") finalString += " ";
            finalString += tmpArr[ita];
        }
    }
    return finalString;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1580354824370</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_abap_handlePhoneNumberFromABAP</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_abap_readGroupsForUser

function sapc_abap_readGroupsForUser(userMsKeyValue) {
    var method = "sapc_abap_readGroupsForUser(): ";
    var result = "{M}";

    var repName = uGetRepositoryName();

    dbtype = "%$ddm.databasetype%";
    nolock = "";
    if (dbtype == 1) {
        nolock = "WITH (NOLOCK)";
    }
    // prevent simple SQL injection by replacing the ' char.
    userMsKeyValue = uReplaceString(userMsKeyValue, "'", "''");

    var sql = "SELECT Info FROM sapc_" + repName + "_userGroups " + nolock + " where refid = '" + userMsKeyValue + "'";
    var groupsString = UserFunc.uSelect(sql);

    if (groupsString.length &gt; 0) {
        uInfo(method + sql + " : " + groupsString);
        var groups = groupsString.split("!!");
        for (var groupCounter = 0; groupCounter &lt; groups.length; groupCounter++) {
            if (groupCounter &gt; 0) {
                result = result + "|";
            }
            result = result + groups[groupCounter];
        }
        uInfo(method + "result: " + result);
    }
    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_abap_readGroupsForUser</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * 2017-05-12 SAP NN: looping through audit and its parents and check whether the modified attribute
 *    is in repository constant SAPC_DN_MODIFICATION_ATTRIBUTES
 * Dependencies: sapc_core_scriptHeader
 */

function sapc_ads_checkDNmodified(Par) {

    var rds = sapc_core_scriptHeader("sapc_ads_checkDNmodified", Par);

    var modifyRelevantAttributes = "%$rep.SAPC_DN_MODIFICATION_ATTRIBUTES%";

    // ABC, DEF, XYZ --&gt; 'ABC','DEF','XYZ'
    modifyRelevantAttributes = "'" + uReplaceString(uReplaceString(modifyRelevantAttributes, " ", ""), ",", "','") + "'";
    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "modifyRelevantAttributes: " + modifyRelevantAttributes);
    else uInfo(rds.outPrefix + "modifyRelevantAttributes: " + modifyRelevantAttributes);

    var auditID = uGetAuditID();
    var userMskey = uGetEntryID();

    do {

        if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "auditIDCheck: " + auditID);
        sql = "select count (distinct changedByAuditID) from idmv_value_basic ";
        sql += " where mskey = " + userMskey + " and attrname in (" + modifyRelevantAttributes + ") and changedByAuditID = " + auditID;
        if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "sqlCheck: " + sql);
        else uInfo(rds.outPrefix + "sqlCheck: " + sql);

        result = uSelect(sql);
        if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "result:" + result);
        else uInfo(rds.outPrefix + "result:" + result);

        if (result &gt;= 1) {ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â  //DN should be changed, set context variable #SAPC_CHANGEDN to 1;
            uSetContextVar("#SAPC_CHANGEDN", 1);
            return "";
        }

        //Loop according to the audit reference info;
        sql = "select refaudit from mxp_audit where auditid = " + auditID + " and mskey = " + userMskey;
        refAuditID = uSelect(sql);
        auditID = refAuditID;
        if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "refauditID:" + auditID);
        else uInfo(rds.outPrefix + "refauditID:" + auditID);

    } while ((auditID != "") &amp;&amp; (auditID != "null"));

    return "";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1580354473103</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_ads_checkDNmodified</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ads_convertBooleanForLDS

function sapc_ads_convertBooleanForLDS(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    if (Par == 1 || Par == "1") {
        return "TRUE";
    }

    return "FALSE";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_convertBooleanForLDS</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function": sapc_ads_convertFromADSAccountDisabled

function sapc_ads_convertFromADSAccountDisabled(Par) {

    switch (Par) {
        // 512	Enabled Account
        // 514	Disabled Account
        // 544	Enabled, Password Not Required
        // 546	Disabled, Password Not Required
        // 66048	Enabled, Password Doesn't Expire
        // 66050	Disabled, Password Doesn't Expire
        // 66080	Enabled, Password Doesn't Expire &amp; Not Required
        // 66082	Disabled, Password Doesn't Expire &amp; Not Required
        // 262656	Enabled, Smartcard Required
        // 262658	Disabled, Smartcard Required
        // 262688	Enabled, Smartcard Required, Password Not Required
        // 262690	Disabled, Smartcard Required, Password Not Required
        // 328192	Enabled, Smartcard Required, Password Doesn't Expire
        // 328194	Disabled, Smartcard Required, Password Doesn't Expire
        // 328224	Enabled, Smartcard Required, Password Doesn't Expire &amp; Not Required
        // 328226	Disabled, Smartcard Required, Password Doesn't Expire &amp; Not Required

        // ----------------
        // Account Disabled

    case "514":
        return 1;

    case "546":
        return 1;

    case "66050":
        return 1;

    case "66082":
        return 1;

    case "262658":
        return 1;

    case "262690":
        return 1;

    case "328194":
        return 1;

    case "328226":
        return 1;

        // ----------------		
        // Account Enabled

    case "512":
        return "";

    case "544":
        return "";

    case "66048":
        return "";

    case "66080":
        return "";

    case "262656":
        return "";

    case "262688":
        return "";

    case "328192":
        return "";

    case "328224":
        return "";

    default:
        return "";

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_convertFromADSAccountDisabled</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ads_convertFromADSAccountExpires


function sapc_ads_convertFromADSAccountExpires(Par) {

    // default input of Identity Center uses following format:
    // a huge number e.g. 9223372036854775807
    // ADS format:  number of 100-nanosecond intervals since January 1, 1601 (UTC)
    // output-format should be: "yyyy-MM-dd'T'HH:mm:ss"

    importClass(java.text.SimpleDateFormat);
    importClass(java.util.TimeZone);

    var isoTime = "9999-12-31T23:59:59";

    if (Par == null || Par == "" || Par == "0") {
        //uWarning("sapc_ads_convertFromADSAccountExpires:Par is null Returning:" + isoTime);
        return isoTime;
    } else {

        var timestamp = new java.lang.String(Par);
        if (timestamp.equals("9223372036854775807") || timestamp.equals("0")) {
            //uWarning("sapc_ads_convertFromADSAccountExpires:timestamp is endoftime Returning: " + isoTime);
            return isoTime;
        } else {
            //uWarning("sapc_ads_convertFromADSAccountExpires:timestampt is else. timestamp='" + timestamp + "'");
            var longTime = new java.lang.Long(timestamp);
            var deltaTime = new java.lang.Long("116444736000000000");
            var divider = new java.lang.Long("10000");
            var date = new java.util.Date(((longTime.longValue()) - (deltaTime.longValue())) / (divider.longValue()));

            var isoFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            isoFormat.setTimeZone(TimeZone.getTimeZone("WET"));

            isoTime = isoFormat.format(date);
            //uWarning("sapc_ads_convertFromADSAccountExpires:time formated. Returning:'" + isoTime + "'");
            return isoTime;
        }

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_convertFromADSAccountExpires</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function": sapc_ads_convertFromADSPasswordDisabled

function sapc_ads_convertFromADSPasswordDisabled(Par) {
    switch (Par) {

        // 512	Enabled Account
        // 514	Disabled Account
        // 544	Enabled, Password Not Required
        // 546	Disabled, Password Not Required
        // 66048	Enabled, Password Doesn't Expire
        // 66050	Disabled, Password Doesn't Expire
        // 66080	Enabled, Password Doesn't Expire &amp; Not Required
        // 66082	Disabled, Password Doesn't Expire &amp; Not Required
        // 262656	Enabled, Smartcard Required
        // 262658	Disabled, Smartcard Required
        // 262688	Enabled, Smartcard Required, Password Not Required
        // 262690	Disabled, Smartcard Required, Password Not Required
        // 328192	Enabled, Smartcard Required, Password Doesn't Expire
        // 328194	Disabled, Smartcard Required, Password Doesn't Expire
        // 328224	Enabled, Smartcard Required, Password Doesn't Expire &amp; Not Required
        // 328226	Disabled, Smartcard Required, Password Doesn't Expire &amp; Not Required

        // ----------------
        // Password Not Required

    case "544":
        return 1;

    case "546":
        return 1;

    case "66080":
        return 1;

    case "66082":
        return 1;

    case "262688":
        return 1;

    case "262690":
        return 1;

    case "328224":
        return 1;

    case "328226":
        return 1;

        // ----------------		
        // Password Required

    case "512":
        return "";

    case "514":
        return "";

    case "66048":
        return "";

    case "66050":
        return "";

    case "328192":
        return "";

    case "328194":
        return "";

    default:
        return "";

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_convertFromADSPasswordDisabled</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ads_convertFromADSPasswordNotRequired

function sapc_ads_convertFromADSPasswordNotRequired(Par) {
    switch (Par) {

        // 512	Enabled Account
        // 514	Disabled Account
        // 544	Enabled, Password Not Required
        // 546	Disabled, Password Not Required
        // 66048	Enabled, Password Doesn't Expire
        // 66050	Disabled, Password Doesn't Expire
        // 66080	Enabled, Password Doesn't Expire &amp; Not Required
        // 66082	Disabled, Password Doesn't Expire &amp; Not Required
        // 262656	Enabled, Smartcard Required
        // 262658	Disabled, Smartcard Required
        // 262688	Enabled, Smartcard Required, Password Not Required
        // 262690	Disabled, Smartcard Required, Password Not Required
        // 328192	Enabled, Smartcard Required, Password Doesn't Expire
        // 328194	Disabled, Smartcard Required, Password Doesn't Expire
        // 328224	Enabled, Smartcard Required, Password Doesn't Expire &amp; Not Required
        // 328226	Disabled, Smartcard Required, Password Doesn't Expire &amp; Not Required

        // ----------------
        // Password Not Required

        case "544":
            return 1;


        case "546":
            return 1;


        case "66080":
            return 1;


        case "66082":
            return 1;


        case "262688":
            return 1;


        case "262690":
            return 1;


        case "328224":
            return 1;


        case "328226":
            return 1;


            // ----------------		
            // Password Required

        case "512":
            return "";


        case "514":
            return "";


        case "66048":
            return "";


        case "66050":
            return "";


        case "328192":
            return "";


        case "328194":
            return "";


        default:
            return "";
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_convertFromADSPasswordNotRequired</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// 2018-01-31 SAP BW: Fixed error in the java.util.Date call: substracted 1900 to the year


// Main function: sapc_ads_convertToADSAccountExpires

function sapc_ads_convertToADSAccountExpires(Par) {
    // default input of Identity Center uses following format:
    // YYYY-MM-DDThh:mm:ss
    // ADS format:  number of 100-nanosecond intervals since January 1, 1601 (UTC)
    //   

    if (Par == null || Par == "") {
        return "9223372036854775807";
    } else {
        var timestamp = new java.lang.String(Par);
        if (timestamp.substring(0, 10) == "0000-00-00") {
            return "";
        }

        // format
        // YYYY-MM-DDThh:mm:ss
        // 012345678901234567890
        //           1         2
        var year = timestamp.substring(0, 4); // "YYYY";
        var month = timestamp.substring(5, 7); // "MM"
        var day = timestamp.substring(8, 10); // "DD"	

        var iSecondsFrom1601to1970 = 11644473600;

        //Substract 1900 to the year.
        //https://docs.oracle.com/javase/6/docs/api/java/util/Date.html#Date%28int,%20int,%20int%29
        timestamp = new java.util.Date(year - 1900, month - 1, day); //months are zero based 
        var iTotalSecondsSince1970 = timestamp.getTime() / 1000;
        var iTotalSecondsSince1601 = (iTotalSecondsSince1970 + iSecondsFrom1601to1970) * 10000000;

        return iTotalSecondsSince1601;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_convertToADSAccountExpires</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_ads_generateAccountCN
 
function sapc_ads_generateAccountCN(Par){ 
		//Example calling DSE internal function 
		//uStop("Terminated by user");
 
		return Par.toUpperCase(); 
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_generateAccountCN</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/* ---------------------------------------------------------------------
 * IdM function: sapc_ad_getGUIDOfGroup
 * This method connects to the AD, loads the given GUID (objectGUID or 
 * exchangeGUID) and transform the bytecode into a String JAVA can use.
 * ---------------------------------------------------------------------
 */
function sapc_ads_getGUIDOfGroup(Par) {
    /*
     * Par should look like the following:
     * "CN=User,OU=organization,O=domain
     *  
     * This implementation is based on several articles according decoding and using the AD-objectGUID in Java e.g.
     * 
     */
    importClass(java.util.Hashtable);
    importClass(java.io.IOException);
    importClass(java.lang.StringBuffer);
    importClass(Packages.javax.naming.Context);
    importClass(Packages.javax.naming.directory.DirContext);
    importClass(Packages.javax.naming.directory.InitialDirContext);
    importClass(Packages.javax.naming.directory.SearchControls);
    importClass(Packages.javax.naming.directory.SearchResult);
    importClass(Packages.javax.naming.NamingEnumeration);
    importClass(Packages.javax.naming.directory.Attributes);

    importClass(Packages.javax.net.ssl.SSLSocketFactory);


    // Connection details
    var ad_host = "%$rep.LDAP_HOST%";
    var ad_port = "%$rep.LDAP_PORT%";
    var ad_user = "%$rep.LDAP_LOGIN%";
    var ad_password = "%$rep.LDAP_PASSWORD%";
    var ad_url = "LDAP://" + ad_host + ":" + ad_port;
    var ad_startingPoint = "%$rep.LDAP_STARTING_POINT_GROUPS%";
    var ad_authentication = "simple";
    //var ad_security_protocol = "ssl";

    //Variables
    //var pars = Par.split("!!");
    //var DN = pars[0];
    //var fieldname = pars[1];

    var DN = Par;
    var fieldname = "objectGUID";
    var loadedGUID;
    var name_of_script = "sapc_ad_getGUIDOfGroup:: ";

    try {
        var initialDirContext;
        var env = new Hashtable(6);

        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
        //env.put(Context.SECURITY_PROTOCOL, ad_security_protocol);

        env.put(Context.PROVIDER_URL, ad_url);
        env.put("java.naming.ldap.attributes.binary", fieldname);
        env.put(Context.SECURITY_AUTHENTICATION, ad_authentication);
        env.put(Context.SECURITY_PRINCIPAL, ad_user);
        env.put(Context.SECURITY_CREDENTIALS, ad_password);

        initialDirContext = new InitialDirContext(env);
        var searchControls = new SearchControls();

        /*
         * Define the returning map
         */
        var returnMap = new Array(2);

        returnMap[0] = "sn";
        returnMap[1] = fieldname;
        searchControls.setReturningAttributes(returnMap);

        // Specify the search scope
        searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);

        // Change encoding of special characters in filter
        DN = changeFilterEncoding(DN);

        // specify the search filter
        var searchFilter = "(&amp;(objectClass=group)(distinguishedName=" + DN + "))";

        // Specify the startingpoint
        var searchBase = ad_startingPoint;

        // Search for objects using the filter
        var iterator = initialDirContext.search(searchBase, searchFilter, searchControls);

        // initialize counter
        var totalResults = 0;
        // Loop through the search results
        while (iterator.hasMoreElements()) {
            var sr = iterator.next();
            totalResults++;
            var attrs = sr.getAttributes();
            if (attrs != null) {
                var returnValue = attrs.get(fieldname);
                if (returnValue == null || returnValue == "") {

                    if (fieldname == "objectGUID") {
                        uWarning(name_of_script + " Value: " + fieldname + " is empty. Skipping entry...");
                        uSkip(1);
                    } else {
                        return "";
                    }
                } else {
                    loadedGUID = returnValue.get();
                }
            } else {
                error = "Could not find GUID for following DN = '" + DN + "'";
                uError(error);
            }
        }
    } catch (err) {
        error = name_of_script + "Error occured = '" + err + "'";
        uError(error);
        uSkip(2, 2);
    }

    if (loadedGUID == null) {

        error = "Could not find GUID for DN = '" + DN + "'";
        uError(name_of_script + error);
        uSkip(1);
    }

    //convert the GUID into string format
    var stringGUID = "";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[3]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[2]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[1]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[0]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + "-";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[5]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[4]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + "-";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[7]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[6]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + "-";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[8]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[9]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + "-";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[10]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[11]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[12]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[13]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[14]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[15]).intValue() &amp; 0xFF);

    return stringGUID;
}

function changeFilterEncoding(input) {

    var putput = new java.lang.String(input);
    var output = new java.lang.String();
    for (var i = 0; i &lt; putput.length(); i++) {
        var iChar = new java.lang.Character(putput.charAt(i)).toString();
        if (iChar == "\\") {
            output += "\\\\";
        } else {
            output += iChar;
        }
    }

    return output;
}

function leadingZeroAndNumber(number) {
    var retrun = "";

    if (number &lt;= 0xF) retrun = "0" + java.lang.Integer.toHexString(number);
    else retrun = java.lang.Integer.toHexString(number);

    return retrun;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_getGUIDOfGroup</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/* ---------------------------------------------------------------------
 * IdM function: sapc_ads_getGUIDOfPerson
 * This method connects to the AD, loads the given GUID (objectGUID or 
 * exchangeGUID) and transform the bytecode into a String JAVA can use.
 * ---------------------------------------------------------------------
 */
function sapc_ads_getGUIDOfPerson(Par) {
    /*
     * Par should look like the following:
     * "CN=User,OU=organization,O=domain
     *  
     * This implementation is based on several articles according decoding and using the AD-objectGUID in Java e.g.
     * 
     */
    importClass(java.util.Hashtable);
    importClass(java.io.IOException);
    importClass(java.lang.StringBuffer);
    importClass(Packages.javax.naming.Context);
    importClass(Packages.javax.naming.directory.DirContext);
    importClass(Packages.javax.naming.directory.InitialDirContext);
    importClass(Packages.javax.naming.directory.SearchControls);
    importClass(Packages.javax.naming.directory.SearchResult);
    importClass(Packages.javax.naming.NamingEnumeration);
    importClass(Packages.javax.naming.directory.Attributes);

    //importClass(Packages.javax.net.ssl.SSLSocketFactory);


    // Connection details
    var ad_host = "%$rep.LDAP_HOST%";
    var ad_port = "%$rep.LDAP_PORT%";
    var ad_user = "%$rep.LDAP_LOGIN%";
    var ad_password = "%$rep.LDAP_PASSWORD%";
    var ad_url = "LDAP://" + ad_host + ":" + ad_port;
    var ad_startingPoint = "%$rep.LDAP_STARTING_POINT%";
    var ad_authentication = "simple";
    var ad_security_protocol = "ssl";

    var DN = Par;
    var fieldname = "objectGUID";
    var loadedGUID;
    var name_of_script = "sapc_ads_getGUIDOfPerson:: ";

    try {
        var initialDirContext;
        var env = new Hashtable(6);

        env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
        //env.put(Context.SECURITY_PROTOCOL, ad_security_protocol);

        env.put(Context.PROVIDER_URL, ad_url);
        env.put("java.naming.ldap.attributes.binary", fieldname);
        env.put(Context.SECURITY_AUTHENTICATION, ad_authentication);
        env.put(Context.SECURITY_PRINCIPAL, ad_user);
        env.put(Context.SECURITY_CREDENTIALS, ad_password);

        initialDirContext = new InitialDirContext(env);
        var searchControls = new SearchControls();

        /*
         * Define the returning map
         */
        var returnMap = new Array(2);

        returnMap[0] = "sn";
        returnMap[1] = fieldname;
        searchControls.setReturningAttributes(returnMap);

        // Specify the search scope
        searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);

        // Change encoding of special characters in filter
        DN = changeFilterEncoding(DN);

        // specify the search filter
        var searchFilter = "(&amp;(objectClass=user)(distinguishedName=" + DN + "))";

        // Specify the startingpoint
        var searchBase = ad_startingPoint;

        // Search for objects using the filter
        var iterator = initialDirContext.search(searchBase, searchFilter, searchControls);

        // initialize counter
        var totalResults = 0;
        // Loop through the search results
        while (iterator.hasMoreElements()) {
            var sr = iterator.next();
            totalResults++;
            var attrs = sr.getAttributes();
            if (attrs != null) {
                var returnValue = attrs.get(fieldname);
                if (returnValue == null || returnValue == "") {

                    if (fieldname == "objectGUID") {
                        uWarning(name_of_script + " Value: " + fieldname + " is empty. Skipping entry...");
                        uSkip(1);
                    } else {
                        return "";
                    }
                } else {
                    loadedGUID = returnValue.get();
                }
            } else {
                error = "Could not find GUID for following DN = '" + DN + "'";
                uError(error);
            }
        }
    } catch (err) {
        error = name_of_script + "Error occured = '" + err + "'";
        uError(error);
        uSkip(2, 2);
    }

    if (loadedGUID == null) {

        error = "Could not find GUID for DN = '" + DN + "'";
        uError(name_of_script + error);
        uSkip(1);
    }

    //convert the GUID into string format
    var stringGUID = "";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[3]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[2]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[1]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[0]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + "-";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[5]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[4]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + "-";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[7]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[6]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + "-";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[8]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[9]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + "-";
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[10]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[11]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[12]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[13]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[14]).intValue() &amp; 0xFF);
    stringGUID = stringGUID + leadingZeroAndNumber(new java.lang.Integer(loadedGUID[15]).intValue() &amp; 0xFF);

    return stringGUID;
}

function changeFilterEncoding(input) {

    var putput = new java.lang.String(input);
    var output = new java.lang.String();
    for (var i = 0; i &lt; putput.length(); i++) {
        var iChar = new java.lang.Character(putput.charAt(i)).toString();
        if (iChar == "\\") {
            output += "\\\\";
        } else {
            output += iChar;
        }
    }

    return output;
}

function leadingZeroAndNumber(number) {
    var retrun = "";

    if (number &lt;= 0xF) retrun = "0" + java.lang.Integer.toHexString(number);
    else retrun = java.lang.Integer.toHexString(number);

    return retrun;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_getGUIDOfPerson</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ads_getGroupGUIDFromDN

function sapc_ads_getGroupGUIDFromDN(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");


    groupTableName = "sapc_" + "%$rep.$NAME%" + "_group";
    sql = "select objectGUID from " + groupTableName + " where dn = '" + Par + "'";
    groupGUID = uSelect(sql);

    return groupGUID;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_getGroupGUIDFromDN</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ads_getUserMskeyvalueFromGUID

// Returns user mskeyvalue of a given user GUID in AD
// Example: MSKEYVALUE: $function.sapc_getUserMskeyvalueFromGUID(%GUID%)$$

function sapc_ads_getUserMskeyvalueFromGUID(Par) {

    var script = "sapc_getUserMskeyvalueFromGUID::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    userGUID = Par;
    if (Par == "") {
        return "";
    }

    sql = "select distinct mcmskeyvalue from idmv_entry_simple " + sapc_core_getNolock();
    sql += " where mcmskey in (select distinct mskey from idmv_value_basic " + sapc_core_getNolock();
    sql += " where attrname = 'ACCOUNT" + uGetRepositoryName() + "' and SearchValue = '" + userGUID + "')";


    userMskeyvalue = uSelect(sql);

    if (logLevel &gt;= 2) uErrMsg(debugMode, script + " GUID: [" + userGUID + "]; MSKEYVALUE: [" + userMskeyvalue + "]");

    return userMskeyvalue;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_getUserMskeyvalueFromGUID</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_ads_handleBoolean

function sapc_ads_handleBoolean(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");


    var rds = sapc_core_scriptHeader("sapc_ads_handleBoolean", Par);

    var result = "";

    if (Par == null || Par == '' || Par == "" || Par == "0" || Par == "false" || Par == "FALSE") {
        result = ""; // interpreted as Boolean-False		
    } else {
        // if a value exists: interpreted as Boolean-True
        result = 1;
    }

    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_handleBoolean</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ads_setUseraccountcontrol
// input: &lt;account disabled&gt;!!&lt;password not required&gt;
// return useraccountcontrol

// 512	Enabled Account
// 514	Disabled Account
// 544	Enabled, Password Not Required
// 546	Disabled, Password Not Required


function sapc_ads_setUseraccountcontrol(Par) {

    var script = "sapc_ads_setUseraccountcontrol::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    var inputString = Par;

    var inputArray = inputString.split("!!");

    var accountDisabled = inputArray[0];
    var passwordNotRequired = inputArray[1];

    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "Account disabled: [" + accountDisabled + "] ; Password disabled: [" + passwordNotRequired + "]");

    // input data from provisioning	
    var idStore = uGetIDStore();
    var taskID = uGetTaskID();
    var userMskey = uGetEntryID();
    var repository = uGetRepositoryName();

    var SQL = "";

    var useraccountcontrol = "";


    // -------------------------------------------------------------------------------------------------------------------

    if (accountDisabled == 1) {
        if (passwordNotRequired == 1) {
            if (logLevel &gt;= 2) uErrMsg(debugMode, script + "[useraccountcontrol] : [546]");
            return 546;
        } else {
            if (logLevel &gt;= 2) uErrMsg(debugMode, script + "[useraccountcontrol] : [514]");
            return 514;
        }
    } else {
        if (passwordNotRequired == 1) {
            if (logLevel &gt;= 2) uErrMsg(debugMode, script + "[useraccountcontrol] : [544]");
            return 544;
        } else {
            SQL = SQL + "SELECT COUNT(*) FROM idmv_value_basic where attrname='MX_ENCRYPTED_PASSWORD' " + " and searchvalue like '%' and mskey=" + userMskey;

            var passwordPresent = uSelect(SQL);
            SQL = "";

            if (passwordPresent == 1) {
                if (logLevel &gt;= 2) uErrMsg(debugMode, script + "[useraccountcontrol] : [512]");
                return 512;
            } else {
                var constant = "SAPC_IDEN_REP_PASSWORD_NOTREQUIRED_" + repository;
                var retValue = uIS_SetValue(userMskey, idStore, constant, 1, "TaskID=" + taskID, 0);

                uErrMsg(2, script + "[MSKEY] - [" + userMskey + "] MX_ENCRYPTED_PASSWORD is missing, useraccountcontrol cannot be set");
                uErrMsg(1, script + "[MSKEY] - [" + userMskey + "] Set " + constant + "=1 Password Not Required");

                uSkip(2, 2, "MX_ENCRYPTED_PASSWORD is missing");
            }
        }
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_setUseraccountcontrol</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_ads_skipIfLDS

function sapc_ads_skipIfLDS(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");


    var repid = uGetRepositoryID();
    var repname = uGetRepositoryName(repid);
    var skipVal = "" + sap_core_getRepositoryConstant(repname + "!!SAPC_LOAD_SKIP_CHANGES_FROM_BE");
    if (skipVal.toUpperCase() == "TRUE" || skipVal == "1") {
        uInfo("SAPC_LOAD_SKIP_CHANGES_FROM_BE activated. Skipping pass.");
        uSkip(2);
    }

    //Stopping pass, if repository sub type is LDS
    var subtype = (sap_core_getRepositoryConstant(repname + "!!SAPC_REPOSITORY_SUB_TYPE"));
    if (subtype == "LDS") {
        uWarning("SAPC_REPOSITORY_SUB_TYPE: " + subtype + ". Skip Pass since repository sub type is LDS.");
        uSkip(2);
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_skipIfLDS</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_ads_skipIfNotLDS

function sapc_ads_skipIfNotLDS(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    var repid = uGetRepositoryID();
    var repname = uGetRepositoryName(repid);
    var skipVal = "" + sap_core_getRepositoryConstant(repname + "!!SAPC_LOAD_SKIP_CHANGES_FROM_BE");
    if (skipVal.toUpperCase() == "TRUE" || skipVal == "1") {
        uInfo("SAPC_LOAD_SKIP_CHANGES_FROM_BE activated. Skipping pass.");
        uSkip(2);
    }

    //Stopping pass, if repository sub type is not LDS
    var subtype = (sap_core_getRepositoryConstant(repname + "!!SAPC_REPOSITORY_SUB_TYPE"));
    if (subtype != "LDS") {
        uWarning("SAPC_REPOSITORY_SUB_TYPE: " + subtype + ". Skip Pass since repository sub type is not LDS.");
        uSkip(2);
    }

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_skipIfNotLDS</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ads_skipInitialLoadIfLDS

function sapc_ads_skipInitialLoadIfLDS(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    var repid = uGetRepositoryID();
    var repname = uGetRepositoryName(repid);

    //Stopping pass, if repository sub type is LDS
    var subtype = (sap_core_getRepositoryConstant(repname + "!!SAPC_REPOSITORY_SUB_TYPE"));
    if (subtype == "LDS") {
        uWarning("SAPC_REPOSITORY_SUB_TYPE: " + subtype + ". Skip Pass since repository sub type is LDS.");
        uSkip(2);
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_skipInitialLoadIfLDS</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_ads_skipInitialLoadIfNotLDS

function sapc_ads_skipInitialLoadIfNotLDS(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    var repid = uGetRepositoryID();
    var repname = uGetRepositoryName(repid);

    //Stopping pass, if repository sub type is not LDS
    var subtype = (sap_core_getRepositoryConstant(repname + "!!SAPC_REPOSITORY_SUB_TYPE"));
    if (subtype != "LDS") {
        uWarning("SAPC_REPOSITORY_SUB_TYPE: " + subtype + ". Skip Pass since repository sub type is not LDS.");
        uSkip(2);
    }

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ads_skipInitialLoadIfNotLDS</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * 2017-01-26 SAP NN: Script to determine user type for AS Java according to mapping maintained in repository type constant SAPC_DIALOG_USER_MAPPING
 *  User types maintained in this constant will be provisioned as default users to AS Java, all others as techncal users
 *
 * Dependency sapc_core_script_functions
 */
function sapc_asj_mapABAPUserTypeToAsJava(Par) {

    var rds = sapc_core_scriptHeader("sapc_asj_mapABAPUserTypeToAsJava", Par);

    var userTypeList = uGetConstant("rep.SAPC_DIALOG_USER_MAPPING");

    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "User types mapped as dialog users: [" + userTypeList + "]");

    if (Par == null || Par == "" || Par == "null" || Par.indexOf("!ERROR") != -1) {
        // missing user type for current user, assuminmg default
        return "default";
    } else if (userTypeList != null &amp;&amp; userTypeList != "" &amp;&amp; userTypeList != "null" &amp;&amp; userTypeList.indexOf("!ERROR") == -1 &amp;&amp; userTypeList.indexOf(Par) == -1) {
        // user type constant defined, user has usertype but user type not in list of dialog user mapping
        return "technical";
    } else {
        // user type of current user in list of dialog user mapping
        return "default";
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1580354980857</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_asj_mapABAPUserTypeToAsJava</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_calculate_ABAP_ROLE_TYPE

function sapc_calculate_ABAP_ROLE_TYPE(Par) {
    if (Par == "X") {
        // composite role
        return "C";
    } else {
        return "S";
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_calculate_ABAP_ROLE_TYPE</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_checkExistenceCurrentAssignment
// 2021-12-16 SAP NN: removed hard coded debug mode variable

function sapc_checkExistenceCurrentAssignment(Par) {

    var script = "sapc_checkExistenceCurrentAssignment::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data
    var parArray = Par.split("!!");

    var currentAssignType = parArray[0];
    var currentAssignment = parArray[1];

    var entryType = "";
    var currentMskey = "";
    var result = "";

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    if (logLevel &gt;= 2) uErrMsg(1, script + "Current assignment type: [" + currentAssignType + "] ; current assignment [" + currentAssignment + "]");

    if (currentAssignType == "ROLE") {
        entryType = "MX_ROLE";
    } else if ((currentAssignType == "PRIV" || currentAssignType == "PRIVILEGE")) {
        entryType = "MX_PRIVILEGE";
    } else {
        uSkip(2, 1, "IGNORED COMBINATION");
        return 0;

    }

    // Check if currentMSKEYVALUE exists
    var sql = "SELECT COUNT(DISTINCT(mskey)) FROM idmv_value_basic_active " + " WHERE attrname = 'MSKEYVALUE' AND searchvalue = UPPER('" + currentAssignment + "') AND mskey IN (SELECT DISTINCT(mskey) FROM idmv_value_basic_active " + " WHERE attrname = 'MX_ENTRYTYPE' AND searchvalue = '" + entryType + "' AND is_id = " + idStore + ")";

    result = uSelect(sql);

    // Check result
    if (result == 1) {
        // One entry found, returning the current MSKEYVALUE
        if (logLevel &gt;= 2) uErrMsg(1, script + "Returning: " + currentAssignment);
        return currentAssignment;

    } else if (result == 0) {
        // No entry found; writing error message to the log
        uErrMsg(1, script + "Current Assignment [" + currentAssignment + "] has not been found.");
        uSkip(1, 2, "ENTRY [" + currentAssignment + "] NOT FOUND");
        return 0;

    } else if (result &gt; 1) {
        // Several search result found, writing error message to the log
        uErrMsg(1, script + "No unique search result found for current assignment [" + currentAssignment + "]");
        uSkip(1, 2, "ENTRY [" + currentAssignment + "] NOT FOUND");
        return 0;

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1639645420697</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_checkExistenceCurrentAssignment</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_checkExistenceCurrentConfigItem
// 2021-12-16 SAP NN: removed hard coded debug mode variable

function sapc_checkExistenceCurrentConfigItem(Par) {

    var script = "sapc_checkExistenceCurrentConfigItem::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data
    var currentMskeyValue = Par + "";
    var currentMskey = "";
    var result = "";

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    if (logLevel &gt;= 2) uErrMsg(1, script + "CurrentMskeyValue: " + currentMskeyValue);

    // Check if currentMSKEYVALUE exists

    var sql = "select COUNT(mcmskey) from IDMV_ENTRY_SIMPLE where MCENTRYTYPE = 'SAPC_CONFIGURATION_ITEM' and MCIDSTORE = " + idStore + " and MCMSKEYVALUE = UPPER('" + currentMskeyValue + "')";

    result = uSelect(sql);

    // Check result
    if (result == 1) {
        // One entry found, returning the current MSKEYVALUE
        return currentMskeyValue;

    } else if (result == 0) {
        // No entry found; writing error message to the log
        uErrMsg(1, script + "Current MskeyValue [" + currentMskeyValue + "] has not been found.");
        uSkip(1, 2, "ENTRY [" + currentMskeyValue + "] NOT FOUND");
        return 0;

    } else if (result &gt; 1) {
        // Several search result found, writing error message to the log
        uErrMsg(1, script + "No unique search result found for current MskeyValue [" + currentMskeyValue + "]");
        uSkip(1, 2, "ENTRY [" + currentMskeyValue + "] NOT FOUND");
        return 0;

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1639645450843</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_checkExistenceCurrentConfigItem</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_checkExistenceCurrentIdentity
// 2021-12-16 SAP NN: removed hard coded debug mode variable

function sapc_checkExistenceCurrentIdentity(Par) {

    var script = "sapc_checkExistenceCurrentIdentity::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data
    var currentMskeyValue = Par + "";
    var currentMskey = "";
    var result = "";

    var currentIDStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    if (logLevel &gt;= 2) uErrMsg(1, script + "Current MskeyValue: [" + currentMskeyValue + "]");

    // Check if currentMskeyValue exists
    currentMskey = uIS_sGet(currentIDStore, "MSKEYVALUE", currentMskeyValue, true);

    // Check result
    if (currentMskey.indexOf("!ERROR:") != -1) {
        // No entry found; writing error message to the log
        uErrMsg(1, script + "CurrentMskeyValue [" + currentMskeyValue + "] has not been found");
        uSkip(1, 2, "NO MSKEY for [" + currentMskeyValue + "] FOUND");
        return 0;

    } else if (currentMskey &gt; 0) {
        // One entry found, returning the current MskeyValue
        return currentMskeyValue;
    } else if (currentMskeyValue &lt; 0) {
        // Several search result found, writing error message to the log
        uErrMsg(1, script + "No unique search result for currentMskeyValue: " + currentMskeyValue);
        uSkip(1, 2, "MULTIPLE MSKEYS FOR [" + currentMskeyValue + "] FOUND");
        return 0;

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1639645366463</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_checkExistenceCurrentIdentity</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_checkExistenceCurrentPrivilege
// 2017-11-02 SAP NN: Bug fixed where id store in query was in quotes (Incident 517318 / 2017 )
// 2021-12-16 SAP NN: removed hard coded debug mode variable

function sapc_checkExistenceCurrentPrivilege(Par) {

    var script = "sapc_checkExistenceCurrentPrivilege::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data
    var currentMskeyValue = Par + "";
    var currentMskey = "";
    var result = "";

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    if (logLevel &gt;= 2) uErrMsg(1, script + "CurrentMskeyValue: " + currentMskeyValue);

    // Check if currentMSKEYVALUE exists
    var sql = "SELECT COUNT(DISTINCT(mskey)) FROM idmv_value_basic_active " + " WHERE attrname = 'MSKEYVALUE' AND searchvalue = UPPER('" + currentMskeyValue + "') AND mskey IN (SELECT DISTINCT(mskey) FROM idmv_value_basic_active " + " WHERE attrname = 'MX_ENTRYTYPE' AND searchvalue = 'MX_PRIVILEGE' AND is_id = " + idStore + ")";
    result = uSelect(sql);

    // Check result
    if (result == 1) {
        // One entry found, returning the current MSKEYVALUE
        return currentMskeyValue;

    } else if (result == 0) {
        // No entry found; writing error message to the log
        uErrMsg(1, script + "Current MskeyValue [" + currentMskeyValue + "] has not been found.");
        uSkip(1, 2, "ENTRY [" + currentMskeyValue + "] NOT FOUND");
        return 0;

    } else if (result &gt; 1) {
        // Several search result found, writing error message to the log
        uErrMsg(1, script + "No unique search result found for current MskeyValue [" + currentMskeyValue + "]");
        uSkip(1, 2, "ENTRY [" + currentMskeyValue + "] NOT FOUND");
        return 0;

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1639645476073</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_checkExistenceCurrentPrivilege</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_checkExistenceCurrentRole
// 2017-11-02 SAP NN: Bug fixed where id store in query was in quotes (Incident 517318 / 2017 )
// 2021-12-16 SAP NN: removed hard coded debug mode variable

function sapc_checkExistenceCurrentRole(Par) {

    var script = "sapc_checkExistenceCurrentRole::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data
    var currentMskeyValue = Par + "";
    var currentMskey = "";
    var result = "";

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    if (logLevel &gt;= 2) uErrMsg(1, script + "CurrentMskeyValue: " + currentMskeyValue);

    // Check if currentMSKEYVALUE exists

    var sql = "SELECT COUNT(DISTINCT(mskey)) FROM idmv_value_basic_active " + " WHERE attrname = 'MSKEYVALUE' AND searchvalue = UPPER('" + currentMskeyValue + "') AND mskey IN (SELECT DISTINCT(mskey) FROM idmv_value_basic_active " + " WHERE attrname = 'MX_ENTRYTYPE' AND searchvalue = 'MX_ROLE' AND is_id = " + idStore + ")";

    result = uSelect(sql);

    // Check result
    if (result == 1) {
        // One entry found, returning the current MSKEYVALUE
        return currentMskeyValue;

    } else if (result == 0) {
        // No entry found; writing error message to the log
        uErrMsg(1, script + "Current MskeyValue [" + currentMskeyValue + "] has not been found.");
        uSkip(1, 2, "ENTRY [" + currentMskeyValue + "] NOT FOUND");
        return 0;

    } else if (result &gt; 1) {
        // Several search result found, writing error message to the log
        uErrMsg(1, script + "No unique search result found for current MskeyValue [" + currentMskeyValue + "]");
        uSkip(1, 2, "ENTRY [" + currentMskeyValue + "] NOT FOUND");
        return 0;

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1639645204567</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_checkExistenceCurrentRole</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_checkGlobalAttributeValue
// input: &lt;system specific attribute value&gt;!!&lt;global atribute name&gt;
// if system specific is empty, check global attribute and fetch value
// return value
// 2021-12-16 SAP NN: removed hard coded debug mode variable

function sapc_checkGlobalAttributeValue(Par) {
    var script = "sapc_checkGlobalAttributeValue::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    var inputString = Par;

    var inputArray = inputString.split("!!");

    var attrName = inputArray[0];
    var repAttrValue = inputArray[1];
    var glbAttrValue = inputArray[2];

    if (logLevel &gt;= 2) uErrMsg(1, script + "[" + attrName + "] - repAttrValue: [" + repAttrValue + "] ; glbAttrValue: [" + glbAttrValue + "]");

    var attrValue = "";

    // -------------------------------------------------------------------------------------------------------------------

    if (repAttrValue == "") {
        if (glbAttrValue == "") attrValue = "";
        else attrValue = glbAttrValue;
    } else attrValue = repAttrValue;

    if (logLevel &gt;= 2) uErrMsg(1, script + "[" + attrName + "] : [" + attrValue + "]");

    return attrValue;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1639645627427</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_checkGlobalAttributeValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_checkInheritedPrivilege
// Example: $FUNCTION.sapc_checkInheritedPrivilege(%logonuid%|%$rep.$NAME%|PROFILE|%profileAssignments%)$$

function sapc_checkInheritedPrivilege(Par) {

    var rds = sapc_core_scriptHeader("sapc_checkInheritedPrivilege", Par);

    var repName = "";
    var privType = "";
    var privName = "";
    var userID = "";

    // -------------------------------------------------------------------------------------------------
    // get parameters
    if (Par != null &amp;&amp; Par != "") {
        var parArray = Par.split("|");
        var parArrayLength = parArray.length;

        uErrMsg(0, rds.outPrefix + "Par: [" + Par + "] ; Array Length: [" + parArray + "]");

        if (parArrayLength == 4) {
            userID = parArray[0];
            repName = parArray[1];
            privType = parArray[2];
            privName = parArray[3];

            uErrMsg(0, rds.outPrefix + "UserID: [" + userID + "] ; repName: [" + repName + "] ; privType: [" + privType + "] ; privName: [" + privName + "]");
        } else {
            uErrMsg(1, rds.outPrefix + "WRONG PARAMETER");
            uSkip(1, 2, "WRONG PARAMETER");
        }

        // --------------------------------------------------
        // variable definition

        var linkPropertyString = "";
        var linkPropertyArray = null;
        var linkID = 0;
        var linkValidFrom = "";
        var linkValidTo = "";
        var linkState = -1;

        repName = uGetRepositoryName();

        var privPrefix = "PRIV:" + privType + ":" + repName + ":";
        var privMskeyValue = "";
        var privMskey = "";
        var privAssignment = "";

        var userMskey = "";
        var userMskeyValue = "";
        var userRepAccount = "";

        // ------------ get userMskeyValue via userMskey from userRepAccount
        userRepAccount = userID;
        userMskey = uIS_sGet(rds.masterIDS, "ACCOUNT" + repName, userRepAccount, true);

        // no userMskey found
        if (userMskey.indexOf("!ERROR:") != -1) {
            uErrMsg(2, rds.outPrefix + "No MSKEY found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update");
            uSkip(1, 1, "NO MSKEY FOUND");
        }
        // multiple userMskeys found
        else if (userMskey &lt; 0) {
            uErrMsg(2, rds.outPrefix + "Multiple ([" + userMskey + "]) MSKEYs found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update");
            uSkip(1, 1, "MULTIPLE MSKEYS FOUND");
        }

        // --------------- check assignment inherited first -----------------------------------------------

        var sql = "select mcUniqueID from idmv_link_ext where mcThisMSKEY = " + userMskey + " and mcAttrName = 'MXREF_MX_PRIVILEGE' and mcAssignedInheritCount &gt; 0 and mcOtherMSKEYVALUE = '" + privPrefix + privName + "'";
        if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Checking inherited assignment for link with query [" + sql + "]");
        var mcUniqueIds = "" + uSelect(sql);
        if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Unique IDs of inherited assignments [" + mcUniqueIds + "]");

        if (mcUniqueIds != "") { // indirect assignments found
            uWarning(rds.outPrefix + "Privilege [" + privName + "] already indirectly assigned (inherited) to user [" + userMskey + "]");
            uSkip(1, 1, "Privilege already indirectly assigned.");
        }

        // ------------------------------------------------------------------------------------------------
        // get priv
        if (privName != null) {

            // --------------------------------------------------
            // check if assignment does exist
            // Direct Assignment if linkstate is 0, else with reprovisioning

            userMskeyValue = uIS_sGetValue(userMskey, rds.masterIDS, "MSKEYVALUE", 0);

            if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "User [" + userMskeyValue + "] with MSKEY: [" + userMskey + "]");

            // ------------
            // get privMskey
            privMskeyValue = privPrefix + privName;
            privMskey = uIS_sGet(rds.masterIDS, "MSKEYVALUE", privMskeyValue, true);

            if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Privilege [" + privMskeyValue + "] with MSKEY: [" + privMskey + "]");

            if (privMskey.indexOf("!ERROR:") != -1) {
                //privilege does not exist in ID Store
                uErrMsg(2, rds.outPrefix + "For user [" + userMskeyValue + "] with account [" + userRepAccount + "] the privilege [" + privMskeyValue + "] can not be assigned as it does not exist in ID Store");
                uSkip(1, 1, "PRIVILEGE MSKEYVALUE DOES NOT EXIST");
            }

            // ------------
            // get link properties linkid with userMskey and privMskey

            sql = "SELECT mcUniqueID, mcLinkState FROM idmv_link_simple_all " + " WHERE (mcThisMSKEY = " + userMskey + ") AND (mcOtherMSKEY = " + privMskey + ")";

            if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "SQL: [" + sql + "]");

            // propertyString := "300|0"
            linkPropertyString = uSelect(sql);

            if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "linkPropertyString: [" + linkPropertyString + "]");

            if (linkPropertyString != "") {
                linkPropertyString = uReplaceString(linkPropertyString, "|", "!!");
                linkPropertyArray = linkPropertyString.split("!!");
                linkID = linkPropertyArray[0];
                linkState = linkPropertyArray[1];

                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Link ID: [" + linkID + "] ; Link State: [" + linkState + "]");
            }
            // assignment does not exist yet
            else {
                linkID = 0;
                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "No assignment exists for user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "]");
            }

            // If link does not exist, add assignment
            if (linkID == "") {
                uErrMsg(1, rds.outPrefix + "Assignment for user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] does not exist in ID Mgmt so far - add assignment.");
            } else {
                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "linkID: [" + linkID + "]");
                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "No changes in assignment of user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] with validity period ([" + linkValidFrom + "] - [" + linkValidTo + "]) - cancel process!");
                uSkip(1, 1, "No changes in assignment");
            }

            // --------------------------------------------------
            // build up property

            // independent of link state, as this job is only used for initial load and update no provision should ever be triggered
            // if linkstate = 0: Immediate Assignment without provisioning / if linkState = 1: apply assignment again with provisioning

            //if(linkState == 0)     
            var propertyValidityPeriod = "{DIRECT_REFERENCE=1}";

            // --------------------------------------------------------
            // to get the full privilegeAssignment
            privAssignment = propertyValidityPeriod + "&lt;" + privPrefix + privName + "&gt;";

            if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "privilege Assignment: [" + privAssignment + "]");

            return privAssignment;

        }
    }

    return "";

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_checkInheritedPrivilege</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_checkRepository
// 2021-12-16 SAP NN: removed hard coded debug mode variable

function sapc_checkRepository(Par) {

    var script = "sapc_checkRepository::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var repName = "";

    // Input data
    if (Par == "") return "";
    else {
        repName = Par + "";
    }

    var currentIDStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    // Log input data
    if (logLevel &gt;= 2) uErrMsg(1, script + "RepName: " + repName);

    // removes spaces in string
    repName = uReplaceString(repName, " ", "");

    // ----------------------------------------------------------
    // Check if the repository is a productive system

    var repID = sapc_getRepID(repName);

    if (repID != "") {
        //var repMode = sapc_getRepConstant(repName + "!!SAPC_REP_MODE");
        var repMode = sapc_getRepConstant(repName + "!!SAPC_REP_PRODUCTIVE");


        // Log data
        if (logLevel &gt;= 2) uErrMsg(1, script + "repName: [" + repName + "] ; repID: [" + repID + "] ; repMode : [" + repMode + "]");
        if (repMode == "TRUE" || repMode == "1") {
            return repName;
        } else {
            if (logLevel &gt;= 2) uErrMsg(1, script + "Repository " + repName + " not productive");
            return "";
        }
    } else {
        if (logLevel &gt;= 2) uErrMsg(1, script + "Repository " + repName + " does not exist");
        return "";
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1639644998417</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_checkRepository</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_checkRepositoryAvailabilityFromProvTask
// Test of BAPI call from within IdM

function sapc_checkRepositoryAvailabilityFromProvTask(Par) {
    var mConnection;
    var mRepository;
    var mResult;
    var mIndex = 0;
    var userMSKEY = Par.get("MSKEY");
    var currentAuditID = UserFunc.uGetAuditID();
    uInfo("currentAuditID: " + currentAuditID);

    var USERNAME = uGetConstant("rep.JCO_CLIENT_USER");
    var CLIENT = uGetConstant("rep.JCO_CLIENT_CLIENT");
    var PASSWORD = uGetConstant("rep.JCO_CLIENT_PASSWD");
    var LANGUAGE = uGetConstant("rep.JCO_CLIENT_LANG");
    var SYSNR = uGetConstant("rep.JCO_CLIENT_SYSNR");
    var R3NAME = uGetConstant("rep.JCO_CLIENT_R3NAME");
    var ASHOST = uGetConstant("rep.JCO_CLIENT_ASHOST");
    var MSHOST = uGetConstant("rep.JCO_CLIENT_MSHOST");
    var GROUP = uGetConstant("rep.JCO_CLIENT_GROUP");
    var REPOSITORY_ID = UserFunc.uGetRepositoryID();
    var REPOSITORY = sap_getRepositoryName(REPOSITORY_ID);

    uInfo("REPOSITORY: " + REPOSITORY + "; REPOSITORY_ID: " + REPOSITORY_ID);

    // Start JCO call
    uInfo("Start JCo");
    try {
        importClass(Packages.com.sap.mw.jco.JCO);
        if (MSHOST == "" || MSHOST.length == 0) {
            // direct connection to application server
            mConnection = JCO.createClient(CLIENT, USERNAME, PASSWORD, LANGUAGE, ASHOST, SYSNR);
        } else {
            // load balanced connection through Message Server
            mConnection = JCO.createClient(CLIENT, USERNAME, PASSWORD, LANGUAGE, MSHOST, R3NAME, GROUP);
        }

        // Create connection
        mConnection.connect();
        uInfo(mConnection.getAttributes());
        mRepository = new JCO.Repository("IdM", mConnection);
    } catch (e) {
        // Throw exception in case connection cannot be opened and set prov status to failed
        uError("Error in connection:" + e);
        uError("Connection test failed.");
        uSkip(1, 1, "Connection not available");
        return "";
    }

    // Close RFC connection
    mConnection.disconnect();

    return "";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_checkRepositoryAvailabilityFromProvTask</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*------------------------------------------------------------------------------------------------------------------------*
 * Program/script name:  sapc_collectUserDatafromABAP
 *-------------------------------------------------------------------------------------------------------------------------*
 * Short description :   get specific attributes of user account from specific repository
 *
 *-------------------------------------------------------------------------------------------------------------------------*
 * Main Function:  sapc_collectUserDatafromABAP
 *
 * Argument:  	- DSEEntry
 *
 * Return value:	- null
 *
 * Dependencies:	- inbuild function	: uGetIDStore()
 *			- inbuild function	: uGetAuditID()
 *			- inbuild function	: uGetRepositoryID()
 *			- inbuild function   	: uIS_SetValue()
 *			- Java RFC call		: getFunctionTemplate("BAPI_USER_GET_DETAIL")
 *			- attribute             : SAPC_IDEN_REP_DISABLED_&lt;REP&gt;
 *                 - attribute             : SAPC_IDEN_REP_LOCKED_WRONG_LOGON_&lt;REP&gt;
 *-------------------------------------------------------------------------------------------------------------------------*/
function sapc_collectUserDatafromABAP(Par) {
    try {
        var script = "sapc_collectUserDatafromABAP::";
        var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
        var debugMode = 0;

        var userMskeyValue = Par.get("USER_MSKEYVALUE");
        var userMskey = Par.get("USER_MSKEY");
        var userDisplayName = Par.get("USER_DISPLAYNAME");

        var idStore = uGetIDStore();
        var auditID = uGetAuditID();
        var repID = uGetRepositoryID();

        // Get repositoryName
        var repName = uGetRepositoryName(repID);

        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "AuditID = [" + auditID + "] ; Mskey = [" + userMskey + "] ; MskeyValue = [" + userMskeyValue + "] ; Display name = [" + userDisplayName + "] ; Repository ID = [" + repID + "]");

        // Retrieved User details

        // get details for this user
        var func = mRepository.getFunctionTemplate("BAPI_USER_GET_DETAIL").getFunction();

        var importParams = func.getImportParameterList();
        var tableParams = func.getTableParameterList();

        importParams.setValue(userMskeyValue, "USERNAME");

        mConnection.execute(func);

        var parameterList = func.getExportParameterList();

        // -------------------------------------------------
        var alias = parameterList.getValue("ALIAS");

        var userAlias = alias.getValue("USERALIAS");

        // -------------------------------------------------
        var address = parameterList.getValue("ADDRESS");

        var userFirstName = address.getValue("FIRSTNAME");
        // -----------------------
        var userLastName = address.getValue("LASTNAME");
        // -------------------------------------------------
        var locked = parameterList.getValue("ISLOCKED");

        var userLocalLock = locked.getValue("LOCAL_LOCK");
        // -----------------------
        var userWrongLogon = locked.getValue("WRNG_LOGON");


        // DSEEntry = CTXTEST02 - {FIRSTNAME=Vorname02, 
        //		LOCAL_LOCK=U, 
        //		USERNAME=CTXTEST02, 
        //		WRONG_LOGON=U, 
        //		LASTNAME=Nachname02, 
        // 		ALIAS=}

        uErrMsg(1, script + "Repository = [" + repName + "] ; MskeyValue   = [" + userMskeyValue + "] ; Display name = [" + userDisplayName + "] ; First name   = [" + userFirstName + "] ; Last name    = [" + userLastName + "] ; Alias	  = [" + userAlias + "] ; Local Lock   = [" + userLocalLock + "] ; Wrong Logon  = [" + userWrongLogon + "]");

        // ---------------------------------------------------
        // write information in attributes

        var attrName = "";
        var returnValue = "";

        // userLocalLock	-&gt; SAPC_IDEN_REP_&lt;REP&gt;_DISABLED
        // userWrongLogon	-&gt; SAPC_IDEN_REP_&lt;REP&gt;_LOCKED_WRONG_LOGON

        // ------------------------------		
        // 1 - SAPC_IDEN_REP_&lt;REP&gt;_DISABLED

        attrName = "SAPC_IDEN_REP_" + repName + "_DISABLED";

        // check if lock value is 'L'
        if (userLocalLock == "L") {
            retValue = uIS_SetValue(userMskey, idStore, attrName, "1", userMskeyValue, 0);

            uErrMsg(1, script + "User [" + userDisplayName + " (" + userMskeyValue + ")] in Repository [" + repName + "] set to LOCK for attribute [" + attrName + "] : [" + retValue + "]");
        } else if (userLocalLock == "U") {
            retValue = uIS_SetValue(userMskey, idStore, attrName, "", userMskeyValue, 0);

            uErrMsg(1, script + "User [" + userDisplayName + " (" + userMskeyValue + ")] in Repository [" + repName + "] set to UNLOCK for attribute [" + attrName + "] : [" + retValue + "]");
        }


        // ------------------------------
        // 2 - SAPC_IDEN_REP_&lt;REP&gt;_LOCKED_WRONG_LOGON

        attrName = "SAPC_IDEN_REP_" + repName + "_LOCKED_WRONG_LOGON";

        // check if lock value is 'L'
        if (userWrongLogon == "L") {
            retValue = uIS_SetValue(userMskey, idStore, attrName, "1", userMskeyValue, 0);

            uErrMsg(1, script + "User [" + userDisplayName + " (" + userMskeyValue + ")] in Repository [" + repName + "] set to LOCK for attribute [" + attrName + "] : [" + retValue + "]");
        } else if (userWrongLogon == "U") {
            retValue = uIS_SetValue(userMskey, idStore, attrName, "", userMskeyValue, 0);

            uErrMsg(1, script + "User [" + userDisplayName + " (" + userMskeyValue + ")] in Repository [" + repName + "] set to UNLOCK for attribute [" + attrName + "] : [" + retValue + "]");
        }
    } catch (e) {
        uError(e);
    }
    return null;

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_collectUserDatafromABAP</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_convertDate
// convert string YYYYMMDD to format YYYY-MM-DD
function sapc_convertDate(Par) {
    var script = "sapc_convertDate::";

    if (Par == null || Par == "") {
        return "";
    } else {
        // date has format YYYYMMDD
        //                 01234567
        var date = Par;

        var year = date.substring(0, 4); // "YYYY";
        var month = date.substring(4, 6); // "MM"
        var day = date.substring(6, 8); // "DD"

        var newDate = year + "-" + month + "-" + day;

        uErrMsg(0, script + "date: " + date + "; Year: " + year + "; Month : " + month + "; Day : " + day + "; newDate: " + newDate);

        return newDate;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_convertDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>function sapc_convertSpecialCharacters(Par) {

    Par = Par.replace(/'/g, "");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬/g, "A");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢?/g, "A");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡/g, "A");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢/g, "A");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦/g, "A");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â /g, "A");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾/g, "Ae");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡/g, "C");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â /g, "E");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â°/g, "E");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â /g, "E");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹/g, "E");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¾ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢/g, "I");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢?/g, "I");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½/g, "I");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢?/g, "I");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢?/g, "D");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“/g, "N");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢/g, "O");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œ/g, "O");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¿ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â½/g, "O");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢/g, "O");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“/g, "Oe");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¾ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢/g, "U");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡/g, "U");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âº/g, "U");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¦ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã¢â‚¬Å“/g, "Ue");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢?/g, "Y");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â /g, "a");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¡/g, "a");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢/g, "a");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â£/g, "a");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥/g, "a");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦/g, "a");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¤/g, "ae");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â§/g, "c");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¨/g, "e");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â©/g, "e");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âª/g, "e");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â«/g, "e");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬/g, "i");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â­/g, "i");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â®/g, "i");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¯/g, "i");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â±/g, "n");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â²/g, "o");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â³/g, "o");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â´/g, "o");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âµ/g, "o");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¶/g, "oe");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹/g, "u");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Âº/g, "u");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¼/g, "ue");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸/g, "ss");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¥/g, "a");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦/g, "e");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¸/g, "o");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¦/g, "A");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦Ãƒâ€šÃ‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€¦Ã‚Â¡ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â /g, "E");
    Par = Par.replace(/ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬ÃƒÂ¢Ã¢â‚¬Å¾Ã‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¾Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã¢â‚¬Â ÃƒÂ¢Ã¢â€šÂ¬Ã¢â€žÂ¢ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Å¡Ãƒâ€šÃ‚Â¹ÃƒÆ’Ã†â€™Ãƒâ€ Ã¢â‚¬â„¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â‚¬Å¡Ã‚Â¬Ãƒâ€šÃ‚Â¦ÃƒÆ’Ã†â€™Ãƒâ€šÃ‚Â¢ÃƒÆ’Ã‚Â¢ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒâ€šÃ‚Â¬ÃƒÆ’Ã¢â‚¬Â¦ÃƒÂ¢Ã¢â€šÂ¬Ã…â€œ/g, "O");
    Par = Par.replace(/ /g, " "); //replace charcode 160 by blank.
    Par = Par.replace(/I/g, "I"); //replace charcode 340 by I.
    Par = Par.replace(/i/g, "i"); //replace charcode 305 by i.

    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1580354701417</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_convertSpecialCharacters</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * Example:
 *  date = 2016-03-05
 *  format pattern = yyyy-MM-dd
 * Available patterns: https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html
 */

function sapc_convertStringToDate(stringDate, format) {
    importClass(java.text.DateFormat);
    importClass(java.text.SimpleDateFormat);

    format = new SimpleDateFormat(format);
    var date = format.parse(stringDate);

    // uInfo("z_getDateFromString - input: " + stringDate + "|| output: " + date.toString());

    return date;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_convertStringToDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_convertTime
// convert string HHMMSS to formatHH:MM:SS
function sapc_convertTime(Par) {
    var script = "sapc_convertTime::";

    if (Par == null || Par == "") {
        return "";
    } else {
        // date has format HHMMSS
        //                 012345
        var time = Par;

        var hours = time.substring(0, 2); // "YYYY";
        var minutes = time.substring(2, 4); // "MM"
        var seconds = time.substring(4, 6); // "DD"

        var newTime = hours + ":" + minutes + ":" + seconds;

        uErrMsg(0, script + "time: " + time + "; Hours: " + hours + "; Minutes : " + minutes + "; Seconds : " + seconds + "; newTime: " + newTime);

        return newTime;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_convertTime</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_convertValidDate
// Input: date in format DD.MM.YYYY
// Output: date in format YYYY-MM-DD

function sapc_convertValidDate(Par) {

    // Input data
    var currentDate = Par.substring(0, 10);

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Write current data to the log
    if (logLevel &gt;= 3) {
        UserFunc.uErrMsg(1, "sapc_convertValidDate currentDate: " + currentDate);
    }

    // Convert currentDate
    var currentDateSplit = currentDate.split(".");
    var currentDay = currentDateSplit[0];
    var currentMonth = currentDateSplit[1];
    var currentYear = currentDateSplit[2];
    if (logLevel &gt;= 3) {
        UserFunc.uErrMsg(1, "sapc_convertValidDate currentDay: " + currentDay + " currentMonth: " + currentMonth + " currentYear: " + currentYear);
    }

    // Prepare result
    var result = currentYear + "-" + currentMonth + "-" + currentDay;
    if (logLevel &gt;= 3) {
        UserFunc.uErrMsg(1, "sapc_convertValidDate result: " + result);
    }
    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_convertValidDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_convertValidityDate_DDMMYYYY
// Input: date in format YYYY-MM-DD or YYYY-MM-DDT00:00:00
// Output: date in format DD.MM.YYYY

function sapc_convertValidityDate_DDMMYYYY(Par) {

    // Input data
    var scriptName = "sapc_convertValidityDate_DDMMYYYY::";
    var currentDate = Par.substring(0, 10);

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Write current data to the log
    if (logLevel &gt;= 3) {
        UserFunc.uErrMsg(1, scriptName + " currentDate: " + currentDate);
    }

    // Convert currentDate
    var result = "";
    if (currentDate != null &amp;&amp; currentDate != "") {
        var currentDateSplit = currentDate.split("-");
        var currentYear = currentDateSplit[0];
        var currentMonth = currentDateSplit[1];
        var currentDay = currentDateSplit[2];
        if (logLevel &gt;= 3) {
            UserFunc.uErrMsg(1, scriptName + " currentDay: " + currentDay + " currentMonth: " + currentMonth + " currentYear: " + currentYear);
        }

        // Prepare result
        result = currentDay + "." + currentMonth + "." + currentYear;
        if (logLevel &gt;= 2) {
            UserFunc.uErrMsg(1, scriptName + " result: " + result);
        }
    }
    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_convertValidityDate_DDMMYYYY</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	      : sapc_copyIdentityCheckFlag
 * Category              : provisioning script
 * Short description	: Checks if current data should be copied or not
 *                         - If yes it returns the data to the next script
 *                         - If not it returns an empty value
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: String
 * Parameter(s)		: Check flag, MSKEY of a given user, the attribute name
 *                         and the attribute type (single value or multi-value (all seperated by pipe)
 *                         Example: $FUNCTION.sapc_copyIdentityCheckFlag(
 *                                        %SAPC_IDEN_TEMP_COPY_BASICS%|%SAPC_IDEN_TEMP_COPY_FROM_MSKEY%|&lt;attribute name&gt;|SINGLE)$$
 * Return value Cat.	: String
 * Return value		: MSKEY of a given user, the attribute name
 *                         and the attribute type (single value or multi-value (all seperated by pipe) OR empty string
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views,
 *					               system/job/repository/global constants/variables
 *                   - inbuild function : uGetConstant
 *                   - global constant  : SAPC_LOG_LEVEL
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_copyIdentityCheckFlag(Par) {
    var script = "sapc_copyIdentityCheckFlag";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    if (logLevel &gt;= 2) uErrMsg(1, script + "Par: " + Par);

    // -------------------------------------------------------
    // if input parameter string is empty return empty string

    if (Par == "" || Par == null) {
        return "";
    }

    // -------------------------------------------------------
    // 1. Parameter is Flag if it should be copied
    // if 1. parameter 

    var returnPar = "";
    var parArray = Par.split("|");
    var flag = parArray[0];

    if (logLevel &gt;= 2) uErrMsg(1, script + "flag: " + flag);

    if (flag == "1" || flag == "TRUE") {
        // if flag is set remove flag and separator "|" from parameter string
        returnPar = Par.substring(flag.length + 1, Par.length);
    }

    if (logLevel &gt;= 2) uErrMsg(1, script + "returnPar: " + returnPar);

    return returnPar;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_copyIdentityCheckFlag</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Category              : generic
 * Short description     : handling provisioning errors
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.    : ---
 * Parameter(s)         : ---
 * Return value Cat.    : ---
 * Return value         : ---
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies         : -sapc_core_scriptHeader
 *--------------------------------------------------------------------------------------------------------------------------*/

function sapc_core_catchProvisioningError(Par) {

    var rds = sapc_core_scriptHeader("sapc_core_catchProvisioningError", Par);

    var thisErr = uGetErrorInfo();
    var mskey = "" + thisErr.get("MSKEY");
    var mskeyvalue = "" + thisErr.get("MSKEYVALUE");
    var repID = uGetRepositoryID();
    var repName = uGetRepositoryName();

    var SQL = "";

    if (mskey == 0 || mskey == "" || mskey == "null" || mskey.indexOf("!ERROR") &gt;= 0) {
        mskey = uGetEntryID();
    }
    if (mskeyvalue == 0 || mskeyvalue == "" || mskeyvalue == "null" || mskeyvalue.indexOf("!ERROR") &gt;= 0) {
        mskeyvalue = uIS_GetValue(mskey, rds.masterIDS, "MSKEYVALUE");
    }

    // Get error text
    // Typical error message: com.sap.idm.ic.ToPassException: Maximum number of profiles for user &lt;user&gt; exceeded
    var errorText = "" + thisErr.get("err_ModException");
    if (errorText == null || errorText == "null" || errorText == "") {
        errorText = "" + thisErr.get("err_exception");
    }
    if (errorText == null || errorText == "null" || errorText == "") {
        errorText = "N/A";
    }
    if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + " - errorText: " + errorText);

    // Get Retry Count (if still retry open leave it)
    SQL = "select RetryCount from MXP_Provision " + nolock + " where MSKey = " + mskey + " and RepositoryID = " + repID + " and ActionID = " + taskID + " and AuditRef = " + rds.auditID;
    var retryCount = uSelect(SQL);
    if (retryCount != 0) {
        uErrMsg(1, rds.outPrefix + " still waiting for retries. Number of retries is: " + retryCount);
    } else {

        var finalErrMsg = "";

        if (errorText.indexOf("Maximum number of profiles") != -1) { // catch "Maximum number of profiles for user &lt;userid&gt; exceeded"
            errorText = errorText.substr(errorText.indexOf("Maximum number of profiles"), 100);
            var userMSKEYVALUE = errorText.split(" ")[6];
            finalErrMsg = "&lt;p&gt;User [" + userMSKEYVALUE + "] has too many profile assigned on system [" + repName + "].&lt;/p&gt;&lt;p&gt;Full Error Message: " + errorText + "&lt;/p&gt;";
        } else if (rds.taskName.indexOf("UpdateABAPUser") != -1) { // Update abap user task
            finalErrMsg = "&lt;p&gt;Update of user [" + mskeyvalue + "] on system [" + repName + "] failed.&lt;/p&gt;&lt;p&gt;Full Error Message: " + errorText + "&lt;/p&gt;";
        } else if (rds.taskName.indexOf("CreateABAPUser") != -1) { // Create abap user task
            finalErrMsg = "&lt;p&gt;Creation of user [" + mskeyvalue + "] on system [" + repName + "] failed.&lt;/p&gt;&lt;p&gt;Full Error Message: " + errorText + "&lt;/p&gt;";
        } else if ((rds.taskName.indexOf("Java") != -1) &amp;&amp; (errorText.indexOf("Unsupported ID found null") != -1)) { // Create java user task
            finalErrMsg = "&lt;p&gt;Modification of user [" + mskeyvalue + "] on system [" + repName + "] failed as the user does not exist in the target system.&lt;/p&gt;&lt;p&gt;Full Error Message: " + errorText + "&lt;/p&gt;";

            // --- Errors that can be caught by the script ---
        } else if ((rds.taskName.indexOf("CreateABAPUser") != -1) &amp;&amp; (errorText.indexOf("already exists") != -1)) {
            // Create abap user task failed because user already exists
            uErrMsg(1, rds.outPrefix + "User [" + mskeyvalue + "] is already cerated in system [" + repName + "]. Catching error and setting state OK.");
            uSkip(1, 1, "Error caught by script: User already created in ABAP. Setting Status OK.");
        } else if ((rds.taskName.indexOf("AssignUserToADSGroup") != -1) &amp;&amp; (thisErr.get("err_passname").indexOf("AssignUserToADSGroup") != -1) &amp;&amp;
            (errorText.indexOf("failed with NamingException.") != -1)) {
            // case user is supposed to get assigned to an AD group he is already assigned to. Leads to error that can be catched.
            // unfortunately the error does not contain the string [LDAP: error code 68 - 00000562: UpdErr: DSID-031A119B, problem 6005 (ENTRY_EXISTS), data 0] -&gt; check ad pass and use generic error message that we get
            // Exception from Modify operation:javax.naming.NameAlreadyBoundException: [LDAP: error code 68 - 00000562: UpdErr: DSID-031A119B, problem 6005 (ENTRY_EXISTS), data 0]; remaining name 
            uErrMsg(1, rds.outPrefix + "User [" + mskeyvalue + "] is already assigned to group in AD. Catching error and setting state OK.");
            uSkip(1, 1, "Error caught by script: Assignment already in AD. Setting Status OK.");
        } else if ((rds.taskName.indexOf("Create ADSUser") != -1) &amp;&amp; (thisErr.get("err_passname").indexOf("CreateADSUser") != -1) &amp;&amp;
            (errorText.toUpperCase.indexOf("USER ALREADY EXISTS") != -1)) {
            // case user is supposed to be created but already exists
            // unfortunately the error does not contain the string [LDAP: error code 68 - 00000562: UpdErr: DSID-031A119B, problem 6005 (ENTRY_EXISTS), data 0] -&gt; check ad pass and use generic error message that we get
            // Exception from Modify operation:javax.naming.NameAlreadyBoundException: [LDAP: error code 68 - 00000562: UpdErr: DSID-031A119B, problem 6005 (ENTRY_EXISTS), data 0]; remaining name 
            uErrMsg(1, rds.outPrefix + "User [" + mskeyvalue + "] is already exists in AD. Catching error and setting state OK.");
            uSkip(1, 1, "Error caught by script: User already exists in AD. Setting Status OK.");
        } else {
            if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + " - No predefined error; no special handling will be done");
            finalErrMsg = "&lt;p&gt;IdM operation on object [" + mskeyvalue + "] for system [" + repName + "] failed.&lt;/p&gt;&lt;p&gt;Full Error Message: " + errorText + "&lt;/p&gt;";
        }


        // Trigger E-Mail notification
        var receivers = sapc_core_getPackageConstant("com.sap.rds.idm.core", "SAPC_ERROR_MAIL_RECEIVER");
        var originator = sapc_core_getPackageConstant("com.sap.rds.idm.core", "SAPC_ERROR_MAIL_ORIGINATOR");
        var host = sapc_core_getPackageConstant("com.sap.rds.idm.core", "SACPC_ERROR_MAIL_SMTP_HOST");
        var port = sapc_core_getPackageConstant("com.sap.rds.idm.core", "SACPC_ERROR_MAIL_SMTP_PORT");
        uSendSMTPMessage(originator, receivers, "IdM Provisioning Error", finalErrMsg, host, 1, port);

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_core_catchProvisioningError</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_core_getAttributeID
// Returns the attribute ID
// Input: either the attribute name or a language translation key
// Result: attribute ID
// Example: sapc_core_getAttributeID(#MX_SAPC_IDEN_REP_DISABLED_CRM102_DN)
// Example: sapc_core_getAttributeID(SAPC_IDEN_REP_DISABLED_CRM102)

function sapc_core_getAttributeID(Par) {

    // Input data
    var attributeString = Par + "";
    var attributeID = "";
    var SQL = "";

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Write current data to the log
    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, "sapc_core_getAttributeID attributeString: " + attributeString);
    }

    // Check and validate attributeString
    if (attributeString.indexOf("#MX_") &gt;= 0) {
        SQL = "select Attr_ID from mxi_attributes where display_name = '" + attributeString + "'";
        attributeID = uSelect(SQL);
        SQL = "";
    } else {
        SQL = "select Attr_ID from mxi_attributes where AttrName = '" + attributeString + "'";
        attributeID = uSelect(SQL);
        SQL = "";
    }

    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, "sapc_core_getAttributeID returning attributeID: " + attributeID);
    }

    return attributeID;

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_core_getAttributeID</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Input: DB command to be checked / replaced for respective database
// Example: sapc_core_getDBcommands(STRINGLENGTH) returns LENGTH for ORACLE and LEN for MS-SQL
// 2017-05-02 SAP NN: Corrections for ASE
// 2017-10-18 SAP NN: Added CAST for NVARCHAR as on oracle has to be NVARCHAR2
// 2018-01-11 SAP BW: Fixed DBCommand Conversion CHARINDEX/INSTR for ASE DB. Using the same logic as for MS SQL. 
// 2018-01-16 SAP BW: Added DBCommand Conversion CONCAT for ASE DB as CONCAT is not supported by ASE. Should use + operator instead.
// 2018-01-29 SAP BW: Updated DBCommand Conversion CONCAT: Use Operator "+" for ASE / MSSQL, Operator "|" for Oracle / DB2
// 2020-01-24 SAP NN: ORA/DB2 require CONCAT is || not |
// 2020-11-25 SAP NN: Added custom function CONVERT_DATE_TO_VARCHAR to be called as $FUNCTION.sapc_core_getDBcommands(SUBCONVERT_DATE_TO_VARCHARSTRING,&lt;dateAttr&gt;)$$

function sapc_core_getDBcommands(Par) {

    var DBCommand = Par.toUpperCase();
    var returnDBCommand = "";
    var commandParameters = "";

    /* commands with different parameters */

    if (DBCommand.indexOf("CHARINDEX") != -1 &amp;&amp; ("%$ddm.databasetype%" != "1") &amp;&amp; ("%$ddm.databasetype%" != "9")) { // CHARINDEX NOT on MSSQL / ASE -&gt; convert to INSTR
        // CHARINDEX('}', roleAssign.roleAssignments) -&gt; INSTR(roleAssign.roleAssignments, '}')
        // CHARINDEX ( expressionToFind ,expressionToSearch [ , start_location ] ) -&gt; expressionToFind,expressionToSearch[,start_location]
        commandParameters = uReplaceString(uReplaceString(DBCommand.split("(")[1], ")", ""), " ", "").split(",");
        if (commandParameters[2] == null || commandParameters[2] == "null" || commandParameters[2] == "") commandParameters[2] = "0";
        return "INSTR(" + commandParameters[1] + ", " + commandParameters[0] + ", " + commandParameters[2] + ")";
    }
    if (DBCommand.indexOf("INSTR") != -1 &amp;&amp; (("%$ddm.databasetype%" == "1") || ("%$ddm.databasetype%" == "9"))) { // INSTR on MSSQL / ASE -&gt; convert to CHARINDEX
        // INSTR ( expressionToSearch, expressionToFind [ , start_location [ , occurence ] ] ) -&gt; expressionToSearch,expressionToFind[,start_location[,occurence]]
        commandParameters = uReplaceString(uReplaceString(DBCommand.split("(")[1], ")", ""), " ", "").split(",");
        if (commandParameters[2] == null || commandParameters[2] == "null" || commandParameters[2] == "")
            return "CHARINDEX(" + commandParameters[1] + ", " + commandParameters[0] + ")";
        else
            return "CHARINDEX(" + commandParameters[1] + ", " + commandParameters[0] + ", " + commandParameters[2] + ")";
    }
    if (DBCommand.indexOf("CAST") != -1 &amp;&amp; DBCommand.indexOf("NVARCHAR") != -1) { // CAST to NVARCHAR
        if (DBCommand.indexOf("NVARCHAR2") == -1 &amp;&amp; "%$ddm.databasetype%" != "1" &amp;&amp; "%$ddm.databasetype%" != "9") {
            // NVARCHAR without 2 but DB type not MSSQL nor ASE --&gt; add 2
            return uReplaceString(DBCommand, "NVARCHAR", "NVARCHAR2");
        } else if (DBCommand.indexOf("NVARCHAR2") != -1 &amp;&amp; ("%$ddm.databasetype%" == "1" || "%$ddm.databasetype%" == "9")) {
            // is NVARCHAR2 but db is is MSSQL or ASE --&gt; remove 2
            return uReplaceString(DBCommand, "NVARCHAR2", "NVARCHAR");
        }
    }
    if (DBCommand.indexOf("CONVERT_DATE_TO_VARCHAR") != -1) {
        if ("%$ddm.databasetype%" == "1" || "%$ddm.databasetype%" == "9") {
            // MSSQL &amp; ASE -&gt; convert(date,mcValidFrom,120)
            return "CONVERT(date," + DBCommand.split(",")[1] + ",120)";
        } else { // ORA &amp; DB2 -&gt; CAST(mcValidFrom AS VARCHAR(19))
            return "CAST(" + DBCommand.split(",")[1] + " AS VARCHAR(19))";
        }
    }


    /* commands with common parameters */

    if ("%$ddm.databasetype%" == "1") { // MSSQL 
        switch (DBCommand) {
            case 'LENGTH':
                returnDBCommand = 'DATALENGTH';
                break;
            case 'STRINGLENGTH':
                returnDBCommand = 'LEN';
                break;
            case 'SUBSTR':
                returnDBCommand = 'SUBSTRING';
                break;
            case 'CONCAT':
                returnDBCommand = '+';
                break;
            case 'COMMIT':
                return ""; // have to leave script here because if value returnDBCommand is set to '' it will return the imput parameter
        }
    } else if ("%$ddm.databasetype%" == "9") { // ASE 
        switch (DBCommand) {
            case 'LENGTH':
                returnDBCommand = 'LEN';
                break;
            case 'STRINGLENGTH':
                returnDBCommand = 'LEN';
                break;
            case 'SUBSTR':
                returnDBCommand = 'SUBSTRING';
                break;
            case 'CONCAT':
                returnDBCommand = '+';
                break;
            case 'COMMIT':
                returnDBCommand = 'COMMIT';
                break;
        }
    } else { // Other databases
        switch (DBCommand) {
            case 'DATALENGTH':
                returnDBCommand = 'LENGTH';
                break;
            case 'STRINGLENGTH':
                returnDBCommand = 'LENGTH';
                break;
            case 'CONCAT':
                returnDBCommand = '||'; // 2020-01-24 SAP NN: ORA/DB2 require || not |
                break;
            case 'SUBSTRING':
                returnDBCommand = 'SUBSTR';
                break;
        }
    }

    if (returnDBCommand.length &gt; 0) {
        return returnDBCommand;
    } else {
        return DBCommand;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1606280101100</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_core_getDBcommands</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_core_getDBprefix

function sapc_core_getDBprefix(Par) {
    if ("%$ddm.databasetype%" == "1" || "%$ddm.databasetype%" == "9") { // MSSQL or ASE
        return "DBO.";
    } else {
        return "MXMC_OPER.";
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_core_getDBprefix</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * returning with(nolock) as string if the current database is MSSQL database
 * OPEN: ASE noholdlock necessary too?
 */

function sapc_core_getNolock(Par) {

    var nolock = " ";
    var dbType = "" + "%$ddm.databasetype%";
    if (dbType == "1") {
        nolock = "with(nolock)";
    }
    /* open ase
	else if (dbType == "9") {
		nolock = "noholdlock";
	}*/
    return nolock;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1580358280517</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_core_getNolock</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Returns package ID of repository provided in Parameter or 0 if not applicable

function sapc_core_getRepositoryPackageID(Par) {
    var sql = "select mc_repository_type.mcPackageID from MC_REPOSITORY, mc_repository_type " + " where MC_REPOSITORY.rep_type = mc_repository_type.rep_id " + " and MC_REPOSITORY.rep_name = '" + Par + "'";
    var repPackage = uSelect(sql);

    if (repPackage == null || repPackage == "null" || repPackage == "") {
        uErrMsg(2, "sapc_core_getRepositoryPackageID::Not able to determine package ID for repository [" + Par + "]");
        return 0;
    } else if (repPackage.indexOf("!ERROR") != -1) {
        uErrMsg(2, "sapc_core_getRepositoryPackageID::Error when trying to determine package ID for repository [" + Par + "] Error message is: " + repPackage);
        return 0;
    } else {
        return repPackage;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_core_getRepositoryPackageID</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// 2017-05-02 SAP NN: Corrections for ASEs
// 2020-01-29 SPA NN: empty table sapc_attrValueHelp leading to errors on oracle
// 2020-03-09 SAP NN: fix for ASE query, where empty strings dont become null in db but empty strings + re-formatting
// 2020-04-06 SAP NN: fix for ASE query reverted (where not exists not working if not select *)

function sapc_core_getValueHelpInsertStatement(Par) {

    var retVal = "";

    if ("%$ddm.databasetype%" == "1") { // MSSQL 
        var tablePrefix = uSelect("select current_user");
        retVal = "INSERT mxi_AttrValueHelp (ValId, ValKey, ValLocale, ValText) ";
        retVal += " SELECT * FROM " + tablePrefix + ".sapc_attrValueHelp ";
        retVal += "  WHERE NOT EXISTS (SELECT * FROM mxi_AttrValueHelp WHERE mxi_AttrValueHelp.valid = " + tablePrefix + ".sapc_attrValueHelp.ValId ";
        retVal += "   AND mxi_AttrValueHelp.valkey = " + tablePrefix + ".sapc_attrValueHelp.ValKey ";
        retVal += "   AND mxi_AttrValueHelp.valLocale = " + tablePrefix + ".sapc_attrValueHelp.valLocale)";
    } else if ("%$ddm.databasetype%" == "9") { // ASE
        retVal = "INSERT mxi_AttrValueHelp (ValId, ValKey, ValLocale, ValText) ";
        retVal += " SELECT ValId,ValKey,NULLIF(ValLocale, ''),ValText FROM sapc_attrValueHelp ";
        retVal += "  WHERE NOT EXISTS (SELECT * FROM mxi_AttrValueHelp WHERE mxi_AttrValueHelp.valid = sapc_attrValueHelp.ValId ";
        retVal += "    AND mxi_AttrValueHelp.valkey = sapc_attrValueHelp.ValKey AND mxi_AttrValueHelp.valLocale = sapc_attrValueHelp.valLocale)";
        retVal += " UPDATE sapc_attrValueHelp ";
        retVal += "SET sapc_attrValueHelp.valLocale = NULLIF(ValLocale, '')";
    } else { // ORACLE or DB2
        var rowCount = uSelect("select count (valKey) from sapc_attrValueHelp");
        if (rowCount == 0) {
            uWarning("sapc_core_getValueHelpInsertStatement: sapc_attrValueHelp seems empty, skipping insert");
        } else {
            retVal = "INSERT INTO mxi_AttrValueHelp SELECT * FROM sapc_attrValueHelp ";
            retVal += " WHERE NOT EXISTS ";
            retVal += " (SELECT sapc_attrValueHelp.valText FROM mxi_AttrValueHelp ";
            retVal += "   WHERE mxi_AttrValueHelp.valid = sapc_attrValueHelp.valid AND mxi_AttrValueHelp.valkey = sapc_attrValueHelp.valkey ";
            retVal += "    AND mxi_AttrValueHelp.valLocale = NULLIF(sapc_attrValueHelp.valLocale,''))";
        }
    }

    uInfo("sapc_core_getValueHelpInsertStatement returning [" + retVal + "]", "sapc_core_getValueHelpInsertStatement");
    return retVal;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1654263489200</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_core_getValueHelpInsertStatement</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// 2017-05-02 SAP NN: Corrections for ASE
// 2020-01-29 SPA NN: empty table sapc_attrValueHelp leading to errors on oracle
// 2020-03-09 SAP NN: fix for ASE query, where empty strings dont become null in db but empty strings + re-formatting
// 2020-04-06 SAP NN: fix for ASE query reverted (where not exists not working if not select *)

function sapc_core_getValueHelpUpdateStatement(Par) {

    var retVal = "";

    if ("%$ddm.databasetype%" == "1") { // MSSQL
        var tablePrefix = uSelect("select current_user");
        retVal = "UPDATE mxi_AttrValueHelp SET ValText = " + tablePrefix + ".sapc_attrValueHelp.valText ";
        retVal += " FROM " + tablePrefix + ".sapc_attrValueHelp, mxi_AttrValueHelp ";
        retVal += "  WHERE mxi_AttrValueHelp.ValId = " + tablePrefix + ".sapc_attrValueHelp.valId ";
        retVal += "   AND mxi_AttrValueHelp.valkey = " + tablePrefix + ".sapc_attrValueHelp.valkey ";
        retVal += "   AND mxi_AttrValueHelp.valLocale = " + tablePrefix + ".sapc_attrValueHelp.valLocale";
    } else if ("%$ddm.databasetype%" == "9") { // ASE 16
        retVal = "UPDATE mxi_AttrValueHelp SET ValText = sapc_attrValueHelp.valText ";
        //retVal += " , ValLocale = CASE WHEN sapc_attrValueHelp.VALLOCALE = '' THEN null ELSE sapc_attrValueHelp.vallocale END ";
        retVal += " FROM sapc_attrValueHelp, mxi_AttrValueHelp ";
        retVal += " WHERE mxi_AttrValueHelp.ValId = sapc_attrValueHelp.valId AND mxi_AttrValueHelp.valkey = sapc_attrValueHelp.valkey ";
        retVal += "  AND str_replace(mxi_AttrValueHelp.valLocale, '', null) = str_replace(sapc_attrValueHelp.valLocale, '', null) ";
    } else if ("%$ddm.databasetype%" == "2") { // ORACLE
        var rowCount = uSelect("select count (valKey) from sapc_attrValueHelp");
        if (rowCount == 0) {
            uWarning("sapc_core_getValueHelpUpdateStatement: sapc_attrValueHelp seems empty, skipping update");
        } else {
            retVal = "UPDATE mxi_AttrValueHelp SET valText = ";
            retVal += " (SELECT sapc_attrValueHelp.valText FROM sapc_attrValueHelp ";
            retVal += "  WHERE mxi_AttrValueHelp.valid = sapc_attrValueHelp.valid AND mxi_AttrValueHelp.valkey = sapc_attrValueHelp.valkey ";
            retVal += "   AND mxi_AttrValueHelp.valLocale = sapc_attrValueHelp.valLocale) ";
            retVal += " WHERE EXISTS (SELECT sapc_attrValueHelp.valText FROM sapc_attrValueHelp ";
            retVal += "  WHERE mxi_AttrValueHelp.valid = sapc_attrValueHelp.valid AND mxi_AttrValueHelp.valkey = sapc_attrValueHelp.valkey ";
            retVal += "   AND mxi_AttrValueHelp.valLocale = sapc_attrValueHelp.valLocale)";
        }
    } else { // DB2
        retVal += "MERGE INTO mxi_AttrValueHelp AS a ";
        retVal += " USING (SELECT valText , valkey, valid, valLocale from sapc_attrValueHelp) AS b ";
        retVal += "  ON a.valkey = b.valkey AND a.valid = b.valid and a.valLocale = b.valLocale ";
        retVal += "  WHEN MATCHED and a.valkey = b.valkey AND a.valid = b.valid AND a.valLocale = b.valLocale ";
        retVal += "   THEN UPDATE set a.valText = b.valText";
    }

    uInfo("sapc_core_getValueHelpUpdateStatement returning [" + retVal + "]", "sapc_core_getValueHelpUpdateStatement");
    return retVal;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1654260832840</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_core_getValueHelpUpdateStatement</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Short description	: Generic functions for scripts
 *----------------------------------------------------------------------------------------------------------------------------
 * Functions 			: sapc_core_scriptHeader
 *							- Input: scriptName, Par (Parameter of calling script)
 *							- Output: object containing following variables
 *								o	scriptName
 *								o	masterIDS
 *								o	taskID
 *								o	taskName (format: "Task:"/"Job:"&lt;taskID&gt;"/"&lt;taskName&gt;
 *								o	auditID
 *								o	logLevel
 *								o	outPrefix (a string that can be used as prefix for log output like uErrMsg(1, rds.outPrefix + "yourText...");
 * 						  sapc_core_getPackageConstant
 *							- Input: Constante Name [, Package Name] (core package is taken if no package is given) or ConstantName!!PackageName
 *							- Output: Constant Value
 *						  sapc_uSetContextVar
 *							- Input: varName, varValue OR varName##varValue OR varName!!varValue OR Object with attributes VARNAME, VARVALUE
 *							- Output: void
 *						  sapc_uGetContextVar
 *							- Input varName as string or DSE Object
 *							- Output varValue
 *						  sapc_uInfo / sapc_uWarning (writing to job log depending on SAPC_LOG_LEVEL or otherwise to DSE.log)
 *							- Input errMsg as string
 *						  getFullQualifiedPackageConstant
 *							- Input: Full qualified package constant e.g. com.sap.rds.idm.core.SAPC_LOG_LEVEL
 *							- Out: Text value of constant on DB
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies         :
 * Change History		:	2018 SAP NN: Added sapc_uInfo &amp; sapc_uWarning
 *							2020-01-24 SAP NN: error in sapc_uGetContextVar: Par is not defined -&gt; Par -&gt; varName
 *						:	2020-11-04 SAP NN: added function getFullQualifiedPackageConstant
 *--------------------------------------------------------------------------------------------------------------------------*/

function sapc_core_scriptHeader(scriptName, Par) {

    var resultObject = {};
    resultObject.scriptName = scriptName;
    resultObject.masterIDS = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");
    resultObject.taskID = "%$ddm.actionid%";
    resultObject.taskName = "";
    resultObject.auditID = 0;
    if (resultObject.taskID == "-1") { // is job
        resultObject.taskID = "%$ddm.mcjob%";
        resultObject.taskName = "Job:" + resultObject.taskID + "/" + uSelect("select name from mc_jobs " + resultObject.nolock + " where jobid = " + resultObject.taskID);
    } else {
        resultObject.taskName = "Task:" + resultObject.taskID + "/" + uGetTaskName(resultObject.taskID);
        resultObject.auditID = uGetAuditID();
    }

    resultObject.logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    resultObject.outPrefix = resultObject.taskName + ":" + scriptName + ":";
    //if (resultObject.logLevel &gt;= 2) uErrMsg(1, resultObject.outPrefix + "Starting with parameters: " + Par);
    if (resultObject.logLevel &gt;= 2) uInfo(resultObject.outPrefix + "Starting with parameters: " + Par);
    return resultObject;
}


function sapc_core_getPackageConstant(constantName, packageName) {

    // if second parameter is undefined the script got called with only constant name and is considered to return core constant or with !! separated (e.g. from single line in destination tab)
    if (typeof packageName == "undefined") {
        if (constantName.indexOf("!!") != -1) { // no package name given but !! separated 
            var parArray = constantName.split("!!");
            constantName = parArray[0];
            packageName = parArray[1];
        } else {
            packageName = "com.sap.rds.idm.core";
        }
    }

    var sql = "select mc_package_variables.VARVALUE from mc_package_variables %NOLOCK%, mc_package %NOLOCK% ";
    sql += "where mc_package_variables.mcPackageID = mc_package.mcPackageID ";
    sql += "and mc_package.mcQualifiedName = '" + packageName + "' ";
    sql += "and mc_package_variables.VARNAME = '" + constantName + "'";
    var constantValue = uSelect(sql);

    uInfo("function:sapc_core_getPackageConstant:Retrieving constantName [" + constantName + "] of package [" + packageName + "] and returning constantValue [" + constantValue + "].");

    return constantValue;
}

function sapc_uSetContextVar(varName, varValue) {
    var maxLength = 1900;

    if (varName.constructor == String) { // called in script or toIdentityStore pass (else toGeneric)
        // if second parameter is undefined the script got called with only one string parameter
        if (typeof varValue == "undefined") {
            if (varName.indexOf("##") != -1) { // separator ##
                uInfo("sapc_uSetContextVar called with ## separated parameter string");
                var parArray = varName.split("##");
                varName = parArray[0];
                varValue = parArray[1];
            } else {
                uInfo("sapc_uSetContextVar called with !! separated parameter string");
                var parArray = varName.split("!!");
                varName = parArray[0];
                varValue = parArray[1];
            }
        } else {
            uInfo("sapc_uSetContextVar called with 2 parameters");
        }
    } else { // varName not string -&gt; called by toGeneric pass
        uInfo("sapc_uSetContextVar called with object: " + varName);
        _varName = varName;
        varName = "" + _varName.get("VARNAME");
        varValue = "" + _varName.get("VARVALUE");
    }

    if (varValue.length &lt; maxLength) { // variable not longer than 1900 char -&gt; normal uset
        uSetContextVar(varName, varValue);
        return "";
    }

    indexOfContextVariable = 0;
    bOut = false;
    do {
        var aLimit = maxLength;
        if (maxLength &gt; varValue.length) {
            aLimit = varValue.length;
        }
        varValueLeft = varValue.substring(0, aLimit);
        if (aLimit == maxLength) {
            varValueRight = varValue.substring(maxLength);
            if (varValueRight.length &lt;= 0) {
                bOut = true;
            }
        } else {
            bOut = true;
        }
        ConcatVarName = varName + "_" + indexOfContextVariable;
        OutString = UserFunc.uSetContextVar(ConcatVarName, varValueLeft);
        uInfo("Writing " + ConcatVarName + " with value " + varValueLeft);

        varValue = varValueRight;
        indexOfContextVariable++;
    }
    while (!bOut);
    return "";
}

function sapc_uGetContextVar(varName) {

    if (varName.constructor != String) { // called by toGeneric pass
        uInfo("sapc_uSetContextVar called with object: " + varName);
        varName = "" + varName.get("VARNAME");
    }

    // try to read normal context variable (no _n); if not existing read &lt;varname&gt;_n
    value = uGetContextVar(varName, "XXXNOTEXISTINGPLACEHOLDERXXX");
    if (!value.equalsIgnoreCase("XXXNOTEXISTINGPLACEHOLDERXXX")) {
        uErrMsg(0, "Normal Get: " + value);
        return value;
    }

    // if XXXNOTEXISTINGPLACEHOLDERXXX was returned the context var Par does not exist -&gt; try name of context var Par_[i]
    bOut = false;
    res = "";
    indexOfContextVariable = 0;
    do {
        ConcatPar = varName + "_" + indexOfContextVariable; // 2020-01-24 SAP NN: error in sapc_uGetContextVar: Par is not defined -&gt; Par -&gt; varName 
        value = UserFunc.uGetContextVar(ConcatPar, "XXXNOTEXISTINGPLACEHOLDERXXX");
        if (!value.equalsIgnoreCase("XXXNOTEXISTINGPLACEHOLDERXXX")) {
            uInfo("Get from: " + ConcatPar + " - " + value);
            res = res + value;
            uInfo("Total value: " + res);
            indexOfContextVariable++;
        } else {
            // --- leave 
            bOut = true;
        }
    }
    while (!bOut);
    uInfo("Returning: " + res);
    return res;
}

function sapc_uInfo(errMsg) {
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    if (logLevel &gt;= 2) {
        uWarning(errMsg);
    } else {
        uInfo(errMsg);
    }
}

function sapc_uWarning(errMsg) {
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    if (logLevel &gt;= 1) {
        uWarning(errMsg);
    } else {
        uInfo(errMsg);
    }
}

function getFullQualifiedPackageConstant(fullQualifiedConstantName) {

    var sql = "select pv.varvalue from mc_package_variables pv, mc_package p where p.mcpackageid = pv.mcpackageid and p.mcqualifiedname || '.' || pv.varname = '" + fullQualifiedConstantName + "'";
    // string concatenation between Ora/DB2 and MSSQL/ASE
    if ("%$ddm.databasetype%" == "1" || "%$ddm.databasetype%" == "9") sql = uReplaceString(sql, "||", "+");
    return uSelect(sql);
}

function sapc_core_script_functions(Par) {
    uErrMsg(1, "This is just a dummy");
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1659448563367</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_core_script_functions</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION> function sapc_core_shuffleString(Par) {
     //							- Input String
     //							- Output shuffled string
     var array = Par.split("");
     var tmp, current, top = array.length;

     if (top)
         while (--top) {
             current = Math.floor(Math.random() * (top + 1));
             tmp = array[current];
             array[current] = array[top];
             array[top] = tmp;
         }

     return array.join("");
 }</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_core_shuffleString</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_core_stopUpdateLoadPass
// 2022-07-07 SAP NN: !OBSOLETED!  use sapc_skipIfSAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue

function sapc_core_stopUpdateLoadPass(Par) {
    //Stopping pass, if repository is disabled to modify users on update load
    var repid = uGetRepositoryID();
    var repname = uGetRepositoryName(repid);
    //var skipVal = "" + sap_core_getRepositoryConstant(repname + "!!SAPC_LOAD_SKIP_CHANGES_FROM_BE");
    var skipVal = "%$rep.SAPC_LOAD_SKIP_CHANGES_FROM_BE%";
    if (skipVal.toUpperCase() == "TRUE" || skipVal == "1") {
        uInfo("SAPC_LOAD_SKIP_CHANGES_FROM_BE activated. Skipping pass.");
        uSkip(2);
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1657190891657</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_core_stopUpdateLoadPass</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>function sapc_core_uGetProvisionUser(Par) {
    return uGetProvisionUser(uGetAuditID());
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_core_uGetProvisionUser</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/***********************************************************************
 * sapc_createZipFileFromFile
 *
 *   desc:
 *
 *   takes single src file, creates zip archive including that file and
 *   (optional) removes that
 *
 *   parameter handling:
 *
 *   works with attribute type parameter (DSEEntry)
 *   and
 *   string based parameters (delimited by: !!)
 *
 *   parameter (input):
 *
 *   (1): input file
 *      - attribute name: SRC_FILE
 *      - value: full file path
 *      - required
 *
 *   (2): delete input file (optional)
 *      - attribute name: SRC_DELETE
 *      - value: true|false
 *
 *   (3): output file (optional)
 *      - attribute name: DST_FILE
 *      - value: full file path
 *
 *   parameter (output):
 *
 *   success: full file path (to zip file)
 *   failed:  false
 * 
 * ********* Credits to the creator and thanks for sharing **********
 *
 ***********************************************************************/

function sapc_createZipFileFromFile(Par) {

    /*********************************************************************
     * intialize variables
     *********************************************************************/
    var f_src = "";
    var f_dst = "";
    var delFile = false;
    var zipEntryName = "";
    // set amount of bytes readed at once before writing to zip/disk
    var readByteAtOnce = 1024;


    /*********************************************************************
     * input parameter handling ("next Entry" or attribute field)
     *********************************************************************/
    if (Par == null || Par == "") {
        uError("sapc_createZipFileFromFile: Missing parameters");
        return false; // exit function
    }

    if (Par.constructor == String) {
        // Par is single string, parameter splitting with !!
        var parArray = Par.split("!!");
        f_src = parArray[0];
        delFile = (parArray[1].toLowerCase() == "true") ? true : false;
        f_dst = parArray[2] ? parArray[2] : "";
    } else {
        // Par is DSEEntry
        f_src = Par.get("SRC_FILE");
        delFile = (Par.get("SRC_DELETE").toLowerCase() == "true") ? true : false;
        f_dst = Par.get("DST_FILE") ? Par.get("DST_FILE") : "";
    }

    /*********************************************************************
     * file validation and variable definition (f_dst + zipEntryName)
     *********************************************************************/
    if (sapc_fileExists(f_src)) {
        uWarning("sapc_createZipFileFromFile: input file is: " + f_src);
        if (f_dst == "") {
            f_dst = sapc_removeExtensionFromFilename(f_src);
            // check for error
            if (!f_dst) {
                uError("sapc_createZipFileFromFile: could not remove extension from input file");
                return false; // exit function
            }
            f_dst = f_dst + ".zip";
        }
        zipEntryName = sapc_extractFilenameFromPath(f_src);
    } else {
        uError("sapc_createZipFileFromFile: input file: [" + f_src + "] not found");
        return false; // exit function
    }
    uWarning("sapc_createZipFileFromFile: output file is: [" + f_dst + "]");

    /*********************************************************************
     * zipping part
     *********************************************************************/
    if (zipEntryName != "") {
        // importing required java classes
        importClass(java.lang.Byte);
        importClass(java.io.FileOutputStream);
        importClass(java.io.IOException);
        importClass(java.io.FileInputStream);
        importClass(java.nio.file.attribute.BasicFileAttributes);
        importClass(java.util.zip.ZipEntry);
        importClass(java.util.zip.ZipOutputStream);

        // create required objects for zipping
        var fis = new FileInputStream(f_src);
        var fos = new FileOutputStream(f_dst);
        var zipOut = new ZipOutputStream(fos);

        // create zipEntry with filename (from f_src)
        var zipEntry = new ZipEntry(zipEntryName);
        zipOut.putNextEntry(zipEntry);

        // initialize variables for storing content
        var bValue = 0;
        // could not create empty byte array,
        // so first entry has to be removed afterwards
        var bArray = new Array(Byte(0));
        bArray.pop();

        while (bValue &gt; -1) {
            // loop through input file (fis)
            for (i = 1; i &lt;= readByteAtOnce; i++) {
                bValue = fis.read();
                if (bValue &gt; -1) {
                    // fis.read() returns decimal value of byte (range: 0..255)
                    // it has to be converted to signed int (range: -128..0..127)
                    bArray.push(Byte(sapc_convertUnsignedByteValueToSignedIntValue(bValue)));
                } else {
                    break;
                }
            }
            // write bytes to zipEntry
            zipOut.write(bArray, 0, bArray.length);
            // clear array for next loop
            bArray.length = 0;
        }

        fis.close();
        zipOut.close();
        fos.close();

        // delete source file if needed
        if (delFile) {
            sapc_deleteFile(f_src);
        }
    }
    // return fullpath of zipfile
    return f_dst;
}

function sapc_convertUnsignedByteValueToSignedIntValue(val) {
    // used to convert number from 0..255 to equivalent signed byte value -128..0..127

    if ((val &gt;= 0) &amp;&amp; (val &lt;= 255)) {
        if (val &lt;= 127) {
            return val;
        } else {
            return -256 + val;
        }
    }
}

function sapc_extractFilenameFromPath(filepath) {
    // used to set the zip entry name (reducing filepath to filename to prevent directory creation on unzipping file)
    // TODO: extend validation of unix and windows paths
    var pos = -1;

    if (filepath) {
        pos = filepath.lastIndexOf("/");
        if (pos == -1) {
            pos = filepath.lastIndexOf("\\");
        }

        if (pos != -1) {
            return filepath.substring(pos + 1);
        } else {
            return false;
        }
    } else {
        return false;
    }

    // not working statements
    //return str.split("\\").pop().split("/").pop();
    //return "/([^\\]+)$/".exec(filepath)[1];
    //return filepath.replace(/^.*(\\|\/|\:)/, "");
}

function sapc_removeExtensionFromFilename(filepath) {
    // used to create zip filename by removing extension part from filepath

    if (filepath) {
        if ((filepath.indexOf(".") &gt; 0) || (filepath.lastIndexOf(".") &gt; 0)) {
            return filepath.substr(0, filepath.lastIndexOf("."));
        } else {
            return filepath;
        }
    } else {
        return false;
    }
}

function sapc_fileExists(filepath) {
    var retval = false;

    // import required class
    importClass(java.io.File);

    if (filepath) {
        var fin = new File(filepath);
        if (fin.isFile() === true) {
            retval = true;
        }
    }

    return retval;
}

function sapc_deleteFile(filepath) {
    var retval = false;

    // import required class
    importClass(java.io.File);

    if (filepath) {
        // used in java, not working with IdM parser
        //var fin = new File(filepath);
        //retval = fin.delete();

        // idm workaround for deleting files
        uWarning("sapc_deleteFile: deleting file: " + filepath);
        uKillFiles(filepath);
        retval = true;
    }

    return retval;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1582263044800</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_createZipFileFromFile</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	      : sapc_encryptPassword
 * Category              : provisioning script
 * Short description	: encrypts a string value which is used as a password, usually combined with global constant
 *                         glb.SAPC_DEFAULT_INITIAL_PASSWORD
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: String
 * Parameter(s)		: inputString|MSKEYVALUE
 * Return value Cat.	: String
 * Return value		: Encrypted String
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views,
 *					               system/job/repository/global constants/variables
 *                       - inbuild function : uGetConstant
 *                       - core package constant  : SAPC_LOG_LEVEL
 *		            - inbuild function : uIS_Get
 *		            - inbuild function : uIS_GetValue
 *		            - inbuild function : uDESEncrypt
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_encryptPassword(Par) {

    var script = "sapc_encryptPassword::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 1;

    // Input data
    var parArray = Par.split("|");

    var currentIDStore = uGetIDStore();

    var encryptedPassword = "";

    var inputString = parArray[0];
    var userMskeyValue = parArray[1];

    var userMskey = uIS_Get(currentIDStore, userMskeyValue);

    if (userMskey.indexOf("!ERROR:") == -1) {
        encryptedPassword = uIS_GetValue(userMskey, currentIDStore, "MX_ENCRYPTED_PASSWORD");
    } else userMskey = "";

    if (encryptedPassword.indexOf("!ERROR:") != -1) encryptedPassword = "";

    var sapc_password = "";

    // ---------------------------------------------------------------------------------------------------------------
    // Check if MX_ENCRYPTED_PASSWORD is already set (from user interface)

    if (logLevel &gt;= 3) uErrMsg(1, script + "user mskey: [" + userMskey + "] ; user mskeyValue: [" + userMskeyValue + "] ; MX_ENCRYPTED_PASSWORD: " + encryptedPassword);

    if (encryptedPassword == "") {
        sapc_password = uDESEncrypt("", inputString);
    } else {
        sapc_password = encryptedPassword;
    }

    return sapc_password;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_encryptPassword</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_findPrimaryDeltaObject

function sapc_findPrimaryDeltaObject(Par) {
    var tmp = Par.split("!!");
    return tmp[0];
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_findPrimaryDeltaObject</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_findSecondaryDeltaObject

function sapc_findSecondaryDeltaObject(Par) {
    var tmp = Par.split("!!");
    return tmp[1];
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_findSecondaryDeltaObject</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Depdency: sapc_core_shuffleString
// 2020-06-12 SAP NN: ABAP PW should not contain ! or ? as first char
// 2020-07-06 SAP NN: getRandomChar: from if (... == true) to if (... == 1)
// 2020-07-06 SAP NN: removed | from list of special char, as IdM handles it as separator and splits password at that char
// 2020-07-06 SAP NN: checking that there is not !! in pw (same reason as |)
// 2020-09-18 SAP NN: changed max length to 16 and added option to provide length as Par


function sapc_generatePassword(Par) {

    //var rds = sapc_core_scriptHeader("sapc_generatePassword", Par);

    var maxLength = 16;
    if (Par &amp;&amp; !isNaN(Par)) maxLength = Par;

    // string contains symbols to create password
    var numberChars = "0123456789";
    var lowerChars = "abcdefghijklmnopqrstuvwxyz";
    var upperChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var otherChars = "~!@#$%&amp;*()-_=+[{]};:,.?";
    var allChars = numberChars + lowerChars + upperChars + otherChars;

    // get random number in interval between lbound, ubound
    function getRandomNum(lbound, ubound) {
        return (Math.floor(Math.random() * (ubound - lbound)) + lbound);
    }

    // return random char of specified type
    function getRandomChar(number, lower, upper, other) {

        if (number == 1) return numberChars.charAt(getRandomNum(0, numberChars.length));
        if (lower == 1) return lowerChars.charAt(getRandomNum(0, lowerChars.length));
        if (upper == 1) return upperChars.charAt(getRandomNum(0, upperChars.length));
        if (other == 1) return otherChars.charAt(getRandomNum(0, otherChars.length));
    }


    var rc = "";
    // add one char of all types
    rc += getRandomChar(1, 0, 0, 0) + getRandomChar(0, 1, 0, 0) + getRandomChar(0, 0, 1, 0) + getRandomChar(0, 0, 0, 1);

    // add n times one of all available characters
    for (ipl = 0; ipl &lt; (maxLength - 4); ipl++) {
        rc += allChars.charAt(getRandomNum(0, allChars.length));
    }

    //shuffle result and return
    // ! or ? should not be first char (ABAP)
    do {
        rc = sapc_core_shuffleString(rc);
    } while (rc.split("")[0] == "!" || rc.split("")[0] == "?" || rc.indexOf("!!") != -1);

    return rc;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1600401649960</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_generatePassword</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getABAPFieldFromAccountRep

function sapc_getABAPFieldFromAccountRep(Par) {
    var script = "sapc_getABAPFieldFromAccountRep::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    //Par in format %DN%!!%$rep.$NAME%!!&lt;AttributeName&gt;
    var parArray = Par.split("!!");

    var userAccountRep = parArray[0];
    var repName = parArray[1];
    var fieldName = parArray[2];

    //get ABAP field from temporary DB table
    var dbTable = "sapc_recon_" + repName + "_src_users";

    var sql = "select " + fieldName + " from " + dbTable + " where logonuid = '" + userAccountRep + "'";

    var fieldValue = uSelect(sql);

    if (fieldValue == "null") fieldValue = "n/a";

    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "User account [" + userAccountRep + "] has in repository [" + repName + "] field [" + fieldName + "] with value [" + fieldValue + "]");
    // return field value
    return fieldValue;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getABAPFieldFromAccountRep</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getAttributeFromAccountRep

function sapc_getAttributeFromAccountRep(Par) {
    var script = "sapc_getAttributeFromAccountRep::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    //Par in format %DN%!!%$rep.$NAME%!!AttributeName
    var parArray = Par.split("!!");

    var userAccountRep = parArray[0];
    var repName = parArray[1];
    var attrName = parArray[2];

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    //get mskey using ACCOUNT-attribute
    var userMskey = uIS_sGet(idStore, "ACCOUNT" + repName, userAccountRep, true);

    // error handling
    if (userMskey == "" || userMskey.length == 0) {
        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "No user mskey found for user account [" + userAccountRep + "] of repository [" + repName + "]");

        attrValue = "n/a";
    } else {
        //get attribute value
        var attrValue = uIS_GetValue(userMskey, idStore, attrName, 0);

        if (attrValue.indexOf("!ERROR:") != -1) attrValue = "n/a";

        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "User account [" + userAccountRep + "] of repository [" + repName + "] has attribute [" + attrName + "] with value [" + attrValue + "]");
    }

    return attrValue;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getAttributeFromAccountRep</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getAttributeValueByMSKEY
// 
// Returns the attribute value of a given MSKEY and a given attribute
// Example: MX_FIRSTNAME: $function.sapc_getAttributeValueByMSKEY(123|MX_FIRSTNAME)$$

function sapc_getAttributeValueByMSKEY(Par) {
    var script = "sapc_getAttributeValueByMSKEY::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    // Input data
    // Par is a | seperated string
    var ParArray = Par.split("|");
    var mskey = ParArray[0];
    var attrName = ParArray[1];
    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    // Get attribute value
    var attrValue = uIS_GetValue(mskey, idStore, attrName);

    if (logLevel &gt;= 2) uErrMsg(debugMode, script + " Mskey: [" + mskey + "] ; Attribute name: [" + attrName + "] ; Attribute value: [" + attrValue + "]");
    return attrValue;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getAttributeValueByMSKEY</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	    : sapc_getAttributeValueForCopyIdentity
 * Category              : provisioning script
 * Short description	    : Get attribute of reference identity and return it
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: String
 * Parameter(s)		: parameters are the MSKEY of a given user, the attribute name
 *                     and the attribute type (single value or multi-value (all seperated by pipe)
 *                     Example: $FUNCTION.sapc_getAttributeValueForCopyIdentity(%SAPC_IDEN_TEMP_COPY_FROM_MSKEY%|MX_FIRSTNAME|SINGLE)$$
 * Return value Cat.	: String
 * Return value		: returns the attribute value of the attribute
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views,
 *					               system/job/repository/global constants/variables
 *                   - inbuild function : uGetConstant
 *                   - core constant    : SAPC_LOG_LEVEL
 *                   - inbuild function : uIS_GetValue
 *                   - inbuild function : uIS_nGetValues
 *                   - inbuild function : uReplaceString
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_getAttributeValueForCopyIdentity(Par) {
    var script = "sapc_getAttributeValueForCopyIdentity::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    if (logLevel &gt;= 2) uErrMsg(1, script + "Par: " + Par);

    // -------------------------------------------------------
    // if input parameter string is empty return empty string
    if (Par == "" || Par == null) {
        return "";
    }

    // Input data
    var parArray = Par.split("|");
    var userMskey = parArray[0];
    var attrName = parArray[1];
    var attrMode = parArray[2];

    var attrValue = "";
    var attrValueMulti = "";
    var sql = "";

    var currentIDStore = uGetIDStore();

    // Log input data
    if (logLevel &gt;= 2) uErrMsg(1, script + "user mskey: [" + userMskey + "] ; attribute name: [" + attrName + "] ; attribute mode: [" + attrMode + "]");

    // Get attribute value for single value attributes
    if (attrMode == "SINGLE") {
        attrValue = uIS_GetValue(userMskey, currentIDStore, attrName);

        if (attrValue == "" || attrValue == null || attrValue.indexOf("!ERROR") != -1) {
            return "";
        }
    }
    // Get attribute value for multi-value attributes
    // Sample result: attrvaluemulti: 1245!!1249!!1021
    else if (attrMode == "MULTI") {
        attrValueMulti = uIS_nGetValues(userMskey, attrName, "!!");

        if (logLevel &gt;= 2) uErrMsg(1, script + "Attribute value multi: [" + attrValueMulti + "]");

        attrValue = uReplaceString(attrValueMulti, "!!", "|");
    } else {
        uErrMsg(1, script + "Unknown attribute mode [" + attrMode + "]");
        uSkip(2, 2);
    }

    // Return Result
    if (logLevel &gt;= 2) uErrMsg(1, script + "Attribute value: [" + attrValue + "]");

    return attrValue;

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getAttributeValueForCopyIdentity</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_getJobIDbyJobName
 
function sapc_getJobIDbyJobName(Par){ 
		//Example calling DSE internal function 
		//uStop("Terminated by user");
 
		return Par.toUpperCase(); 
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1702211697347</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getJobIDbyJobName</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// 2020-01-29 SAP NN: Mass admin jobs writing to files will resolve file name for every entry, which is pretty RT consuming
// Par: &lt;varName&gt;!!&lt;default&gt;
function sapc_getJobVar(Par) {
    return uGetUserVar(Par.split("!!")[0], Par.split("!!")[1]);
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1580277430580</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getJobVar</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getManagerMskey

function sapc_getManagerMskey(Par) {
    script_sapc_getManagerMskey_is_obsolete
    var script = "sapc_getManagerMskey";

    var result = uIS_nGetValues(Par, "MX_MANAGER");
    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getManagerMskey</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
* Script/Function	: sapc_getMskeyFromAccountRep
* Category		    : job script
* Short description	: get user mskeyValue from user account in specific repository
*----------------------------------------------------------------------------------------------------------------------------
* Parameter(s) Cat.	: String
* Parameter(s)		: userID from tempTable
* Return value Cat.	: String 
* Return value		: Mskey of MX_PERSON
*----------------------------------------------------------------------------------------------------------------------------
* Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views, 
*					               system/job/repository/global constants/variables
*			  - inbuild function : uGetConstant
                    - core rds constant: SAPC_MASTER_IDS_ID
*                   - inbuild function : uGetRepositoryName 
*                   - inbuild function : uIS_sGet
*                   - attribute        : ACCOUNT&lt;REP_NAME&gt;
*                   - inbuild function : uIS_sGetValue
*--------------------------------------------------------------------------------------------------------------------------*/
function sapc_getMskeyFromAccountRep(Par) {
    var script = "sapc_getMskeyFromAccountRep::";
    var debugMode = 0;

    var userRepAccount = Par;

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");
    var repName = uGetRepositoryName();

    var userMskey = 0;

    // -------------
    // check if userRepAccount is not null

    if (userRepAccount == null || userRepAccount == "") {
        userMskey = "NULLATTR";
    } else {
        // ------------
        // get userMskeyValue via userMskey from userRepAccount

        userMskey = uIS_sGet(idStore, "ACCOUNT" + repName, userRepAccount, true);

        // no userMskey found
        if (userMskey.indexOf("!ERROR:") != -1) {
            uErrMsg(debugMode, script + "No MSKEY found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update");
            uSkip(1, 1);
        }
        // multiple userMskeys found
        else if (userMskey &lt; 0) {
            uErrMsg(2, script + "Multiple ([" + userMskey + "]) MSKEYs found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update!");
            uSkip(1, 1);
        }

        uErrMsg(debugMode, script + "MSKEY: [" + userMskey + "]");


        uErrMsg(debugMode, script + "Found MSKEY [" + userMskey + "] for account [" + userRepAccount + "] in rep [" + repName + "]");

    }

    return userMskey;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getMskeyFromAccountRep</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	: sapc_getMskeyFromAudit
 * Category	        : provisioning script
 * Short description	: Extracts the privilege mskey from an audit
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: String
 * Parameter(s)		: MSKEYVALUE of MX_PERSON
 * Return value Cat.	: String
 * Return value		: MSKEY of MX_PRIVILEGE
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views,
 *					               system/job/repository/global constants/variables
 *		            - inbuild function : uGetAuditID
 *                   - inbuild function : uSelect
 *                   - view             : mcmv_audit
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_getMskeyFromAudit(Par) {
    var script = "sapc_getMskeyFromAudit::";
    var debugMode = 0;

    var userMskeyValue = Par;
    var privMskeyValue = "";
    var auditID = uGetAuditID();
    var idStore = uGetIDStore();


    var userMskey = uIS_sGet(idStore, "MSKEYVALUE", userMskeyValue, true);

    // retrieve userID from audit
    var SQL = "SELECT user_id  FROM MCMV_audit  WHERE Auditref = " + auditID;

    var auditInfo = uSelect(SQL);

    uErrMsg(debugMode, script + "AuditInfo: [" + auditInfo + "]");

    var auditInfoArray = auditInfo.split(":");
    var privMskey = auditInfoArray[1];

    if (privMskey == "") privMskey = "NULLATR";
    else {
        privMskeyValue = uIS_sGetValue(privMskey, idStore, "MSKEYVALUE", 0);
    }

    uErrMsg(debugMode, script + "User MskeyValue: [" + userMskeyValue + "] ; Privilege MskeyValue: [" + privMskeyValue + "]; auditID: [" + auditID + "]");


    // ----------------------------------------------------------------------
    // setting context variable
    // needed as long as DIRECT-REFERENCE IS NOT WORKING
    var ctxVarName = "ASSIGN_DELETION:" + userMskey + ":" + privMskey;
    var ctxVarValue = "BACKEND";
    uErrMsg(debugMode, script + "Set context variable [" + ctxVarName + "] with value: [" + ctxVarValue + "]");

    uSetContextVar(ctxVarName, ctxVarValue);
    // ----------------------------------------------------------------------

    return privMskey;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getMskeyFromAudit</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getMskeyFromMskeyvalue

function sapc_getMskeyFromMskeyvalue(Par) {

    var script = "sapc_getMskeyFromMskeyvalue::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 1;

    // Input data
    var currentMskeyValue = Par + "";
    var currentMskey = "";

    var currentIDStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    if (logLevel &gt;= 3) uErrMsg(debugMode, script + "CurrentMskeyValue: [" + currentMskeyValue + "]");

    // Get MSKEY
    currentMskey = uIS_sGet(currentIDStore, "MSKEYVALUE", currentMskeyValue, true);

    if (logLevel &gt;= 3) uErrMsg(debugMode, script + "CurrentMskey: [" + currentMskey + "]");

    // Check that only one MSKEY has been returned; if several results are found the values are seperated with "!!"
    if (currentMskey.indexOf("!ERROR:") != -1) {
        uErrMsg(debugMode, script + "No MSKEY found");
        return "";
    } else if (currentMskey &lt; 0) {
        uErrMsg(debugMode, script + "Several Mskeys found; no unique search result for MskeyValue: [" + currentMskeyValue + "]");
        return "";
    } else if (currentMskey &gt; 0) return currentMskey;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getMskeyFromMskeyvalue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getMskeyFromMskeyvalueMultiValue

function sapc_getMskeyFromMskeyvalueMultiValue(Par) {

    var script = "sapc_getMskeyFromMskeyvalueMultiValue::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    // Input data
    var userMskeyValueList = Par + "";
    var userMskeyList = "";
    var userMskey = 0;
    var userMskeyValue = "";

    var currentIDStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "UserMskeyValueList: [" + userMskeyValueList + "]");

    if (userMskeyValueList != "" &amp;&amp; userMskeyValueList != null) {
        // Split list
        var userMskeyValueArray = userMskeyValueList.split("|");

        for (var i = 0; i &lt; userMskeyValueArray.length; i++) {
            userMskeyValue = userMskeyValueArray[i];

            // Retrieve MSKEY
            userMskey = uIS_sGet(currentIDStore, "MSKEYVALUE", userMskeyValue, true);

            userMskeyList = userMskeyList + userMskey + "|";
        }

        // Remove trailing seperator |
        var strgLength = userMskeyList.length;
        userMskeyList = userMskeyList.substring(0, strgLength - 1);

        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "UserMskeyList: " + userMskeyList);
    } else {
        userMskeyList = "";
    }

    // Check and return result
    if (userMskeyList == "" || userMskeyList == null) {
        uErrMsg(debugMode, script + "No MSKEYs found");
    }

    return userMskeyList;

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getMskeyFromMskeyvalueMultiValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
* Script/Function	: sapc_getMskeyValueFromAccountRep
* Category		    : job script
* Short description	: get user mskeyValue from user account in specific repository
*----------------------------------------------------------------------------------------------------------------------------
* Parameter(s) Cat.	: String
* Parameter(s)		: userID from tempTable
* Return value Cat.	: String 
* Return value		: MSKEYVALUE of MX_PERSON
*----------------------------------------------------------------------------------------------------------------------------
* Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views, 
*					               system/job/repository/global constants/variables
*			        - inbuild function : uGetConstant
                          - core package constant  : SAPC_MASTER_IDS_ID
*                         - inbuild function : uGetRepositoryName 
*                         - inbuild function : uIS_sGet
*                         - attribute        : ACCOUNT&lt;REP_NAME&gt;
*                         - inbuild function : uIS_sGetValue
*--------------------------------------------------------------------------------------------------------------------------*/
function sapc_getMskeyValueFromAccountRep(Par) {
    var script = "sapc_getMskeyValueFromAccountRep::";
    var debugMode = 1;
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // ----------------------------------------------------------
    // Variables
    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");
    var repName = uGetRepositoryName();

    var parArray = null;
    var userRepAccount = "";
    var userHandling = 0;

    var userMskeyValue = "";
    var userMskey = 0;

    // ----------------------------------------------------------
    // get parameters

    if (Par.indexOf("!!") == -1) {
        userRepAccount = Par;
    } else {
        parArray = Par.split("!!");
        userRepAccount = parArray[0];
        userHandling = parArray[1];
    }


    // ----------------------------------------------------------
    // check if userRepAccount is not null

    // no value for user rep account
    if (userRepAccount == null || userRepAccount == "" || userRepAccount == "null" || userRepAccount == "NULL") {
        userMskeyValue = "NULLATTR";
        uErrMsg(debugMode, script + "userMskeyValue: " + userMskeyValue);
    }
    // user rep account exists
    else {
        // ---------------------------------------------------
        // get userMskeyValue via userMskey from userRepAccount

        userMskey = uIS_sGet(idStore, "ACCOUNT" + repName, userRepAccount, true);

        // --------------------------------------------------
        // no userMskey found
        if (userMskey.indexOf("!ERROR:") != -1) {
            // -----------------------------------------------
            // user handling
            // userHandling := 0 --&gt; error message that no user has been found
            // userHandling := 1 --&gt; repAccount will be used for MSKEYVALUE if mskey does not exist

            // use the repository account of user for the mskeyvalue
            if (userHandling == 1) {
                userMskeyValue = userRepAccount;

                uErrMsg(debugMode, script + "New MSKEYVALUE [" + userMskeyValue + "] created from account [" + userRepAccount + "] in rep [" + repName + "]");
            }
            // skip operation if no user exist in ID Store
            else {
                uErrMsg(debugMode, script + "No MSKEY found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update");
                uSkip(1, 1, "NO MSKEY FOUND");
            }
        }
        // multiple userMskeys found
        else if (userMskey &lt; 0) {
            uErrMsg(2, script + "Multiple ([" + userMskey + "]) MSKEYs found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update!");
            uSkip(1, 1, "MULTIPLE MSKEYS FOUND");
        }
        // userMskey exists once
        else {
            userMskeyValue = uIS_sGetValue(userMskey, idStore, "MSKEYVALUE", 0);

            //uErrMsg(debugMode, script + "User [" + userMskeyValue + "] with MSKEY: [" + userMskey + "]");
            uInfo("User [" + userMskeyValue + "] with MSKEY: [" + userMskey + "]");
            if (userMskeyValue.indexOf("!ERROR:") != -1) {
                uErrMsg(2, script + "No MSKEYVALUE [" + userMskeyValue + "] found for MSKEY [" + userMskey + "] and account [" + userRepAccount + "] in rep [" + repName + "] - retry!");
                uErrMsg(1, 2, "NO MSKEYVALUE FOUND");
            } else {
                //uErrMsg(debugMode, script + "MSKEYVALUE [" + userMskeyValue + "] found for MSKEY [" + userMskey + "] and account [" + userRepAccount + "] in rep [" + repName + "]");
                uInfo("MSKEYVALUE [" + userMskeyValue + "] found for MSKEY [" + userMskey + "] and account [" + userRepAccount + "] in rep [" + repName + "]");
            }
        }
    }

    return userMskeyValue;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1655284707030</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getMskeyValueFromAccountRep</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getMskeyvalueFromMskey

function sapc_getMskeyvalueFromMskey(Par) {
    // Input data
    var userMSKEY = Par;

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    var currentIDStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");
    var SQL = "";

    // SQL statement to get the current MSKEYVALUE in the current Identity Store
    // SQL = SQL + "SELECT avalue FROM mxiv_sentries WHERE attrname = 'MSKEYVALUE' and mskey = ";
    // SQL = SQL + userMSKEY + " and is_id = '" + currentIDStore + "'";

    if (userMSKEY != "" &amp;&amp; userMSKEY != null) {
        // Retrieve MSKEYVALUE
        userMSKEYVALUE = uIS_GetValue(userMSKEY, currentIDStore, "MSKEYVALUE");

        if (logLevel &gt;= 3) {
            UserFunc.uErrMsg(1, "sapc_getMskeyvalueFromMskey userMSKEYVALUE: " + userMSKEYVALUE);
        }
    } else {
        userMSKEYVALUE = "";
    }

    // Return MSKEYVALUE
    return userMSKEYVALUE;

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getMskeyvalueFromMskey</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getMskeyvalueFromMskeyMultiValue

function sapc_getMskeyvalueFromMskeyMultiValue(Par) {

    var script = "sapc_getMskeyvalueFromMskeyMultiValue::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    // Input data
    var userMskeyList = Par;
    var userMskeyValueList = "";
    var userMskeyValue = "";

    var currentIDStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    if (userMskeyList != "" &amp;&amp; userMskeyList != null) {
        // Split list
        var userMskeyArray = userMskeyList.split("|");

        for (var i = 0; i &lt; userMskeyArray.length; i++) {
            // Retrieve MSKEYVALUE
            userMskeyValue = uIS_GetValue(userMskeyArray[i], currentIDStore, "MSKEYVALUE");

            userMskeyValueList = userMskeyValueList + userMskeyValue + "|";
        }

        // Remove trailing seperator |
        var strgLength = userMskeyValueList.length;
        userMskeyValueList = userMskeyValueList.substring(0, strgLength - 1);

        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "UserMskeyValueList: [" + userMskeyValueList + "]");
    } else {
        userMskeyValueList = "";
    }

    // Return List of MskeyValue
    return userMskeyValueList;

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getMskeyvalueFromMskeyMultiValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * 2022-06-15 SAP NN: sapc_getNameOfAssignedPendingPrivileges wont work without audit id
 * Dependency: sapc_core_getNolock, sapc_rds_script_functions
 * IN: %MSKEY%!!%$rep.$NAME%!!&lt;RoleType&gt;!!%$rep.SAPC_PROVISION_VALIDITY%
 */

function sapc_getNameOfAllAssignedPrivileges(Par) {
    importClass(java.lang.StringBuffer);
    rds = sapc_core_scriptHeader("sapc_getNameOfAllAssignedPrivileges", Par);

    var parArray = Par.split("!!");
    var mskey = parArray[0];
    var repositoryName = parArray[1];
    var privilegeType = parArray[2];
    var addValidityProperty = false;
    if (parArray[3] != null &amp;&amp; (parArray[3] == "1" || parArray[3].toLowerCase() == "true")) {
        addValidityProperty = true;
    }

    operation = "";

    if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "User MSKEY: [" + mskey + "]; Repository: [" + repositoryName + "]; Privilege Type: [" + privilegeType + "]; Validity Enabeld: [" + addValidityProperty.toString() + "]");

    uInfo(rds.outPrefix + "User MSKEY: [" + mskey + "]; Repository: [" + repositoryName + "]; Privilege Type: [" + privilegeType + "]; Validity Enabeld: [" + addValidityProperty.toString() + "]");

    var nolock = sapc_core_getNolock();

    if (rds.logLevel &gt;= 2) {
        sap_debug_logUserAssignments(mskey);
    }

    var sql = "";

    sql = "SELECT DISTINCT assignment.mcValidFrom, assignment.mcValidTo, privilegename.mcMSKEYVALUE ";
    sql += " FROM mxi_link assignment " + nolock + " , idmv_entry_simple privilegename " + nolock + " , ";
    sql += " idmv_value_basic repository " + nolock + " , idmv_value_basic privType " + nolock + " ";
    sql += " WHERE assignment.mcOtherMskey = privilegename.mcMSKEY AND assignment.mcOtherMskey = repository.mskey AND assignment.mcOtherMskey = privType.mskey ";
    sql += "  AND repository.attrname = 'MX_REPOSITORYNAME' and repository.searchValue = '" + repositoryName + "' ";
    sql += "  AND privType.attrname = 'MX_PRIVILEGE_TYPE' and privType.searchValue = '" + privilegeType + "' ";
    sql += "  AND assignment.mcThisMskey = " + mskey + " AND assignment.mcLinkType = 2 ";
    sql += "  AND assignment.mcExecState = 1 AND assignment.mcDisabled = 0 ";

    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "SQL Query:\n[" + sql + "]");

    //result looks like privMskeyValue!!privMskeyValue!!privMskeyValue
    var result = uSelect(sql);
    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Result: " + result);

    var allPrivsStringBuf = new StringBuffer();
    var firstElement = true;
    if (result != null &amp;&amp; result != "") {
        var resultArray = result.split("!!");
        for (var i = 0; i &lt; resultArray.length; i++) {
            // get a row
            var rows = resultArray[i];
            // split the result set
            var row = rows.split("|");

            //privMskeyValue is like PRIV:&lt;type&gt;:&lt;repository&gt;:&lt;privilegeName&gt;
            var privMskeyValue = row[2];
            var repTemp = privMskeyValue.split(":");
            var repstring = repTemp[0] + ":" + repTemp[1] + ":" + repTemp[2] + ":";
            var privName = uReplaceString(privMskeyValue, repstring, "");
            var value;

            if (addValidityProperty == true) {
                // valid to | valid from | privMsKeyValue
                var validFrom = row[0];
                if (validFrom == "null") validFrom = "";
                var validFromConverted = sap_abap_convertToABAPValidFromDate(validFrom);
                var validTo = row[1];
                if (validTo == "null") validTo = "";
                var validToConverted = sap_abap_convertToABAPValidToDate(validTo);

                // 2020-06-11 SAP NN: delta for modified validity is not {M} but {R} e.g. {R}{VALIDFROM=2011-08-01!!VALIDTO=9999-12-31!!NEW_VALIDFROM=2011-08-31!!NEW_VALIDTO=2011-12-31}SAP_BC_USER_ADMIN
                if (operation == "{R}") {
                    var NewValidFrom = row[3];
                    if (NewValidFrom == "null") NewValidFrom = "";
                    var NewValidFromConverted = sap_abap_convertToABAPValidFromDate(NewValidFrom);
                    var NewValidTo = row[4];
                    if (NewValidTo == "null") NewValidTo = "";
                    var NewValidToConverted = sap_abap_convertToABAPValidToDate(NewValidTo);
                    value = operation + "{VALIDFROM=" + validFromConverted + "!!VALIDTO=" + validToConverted;
                    value += "!!NEW_VALIDFROM=" + NewValidFromConverted + "!!NEW_VALIDTO=" + NewValidToConverted + "}" + privName;
                } else {
                    value = operation + "{VALIDFROM=" + validFromConverted + "!!VALIDTO=" + validToConverted + "}" + privName;
                }
                uInfo("add privilege plus validity : " + value);
            } else {
                value = operation + privName;
                uInfo("add privilege without validity : " + value);
            }

            if (!firstElement) {
                allPrivsStringBuf.append("|");
            }
            allPrivsStringBuf.append(value);
            firstElement = false;
        }
    }

    var allPrivs = String(allPrivsStringBuf); // must be casted explicitly to String
    if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "Calculated privileges for " + Par + " are: " + allPrivs);
    else uInfo(rds.outPrefix + "Calculated privileges for " + Par + " are: " + allPrivs);

    return allPrivs;
}

/**
 * Prints out all assignments the user has (also all assignments in pending remove state etc.)
 */
function sap_debug_logUserAssignments(mskey) {

    var nolock = "";
    if ("%$ddm.databasetype%" == 1) { //MS-SQL
        nolock = "WITH (NOLOCK)";
    }

    var columns = "mcUniqueId, mcThisMSKEY, mcOtherMSKEY, mcAttrName, mcThisOcName, mcOtherOcName, mcThisMSKEYVALUE, mcOtherMSKEYVALUE, mcLinkState, mcAssignedDirect, mcAssignedInheritCount, mcExecState, mcExecStateHierarchy, mcChangeNumber, mcGroupGuid, mcLastAudit, mcAddedTime, mcModifyTime, mcValidateAddAudit, mcAddAudit, mcContextMSKEY, mcContextCategory, mcContextStr1, mcContextStr2, mcOrphan, mcSoDViolation, mcNotAllowedFor, mcUnsupportedContextType, mcMissingConditionalContext, mcDisabled, mcRequestID";
    var debugSql = "SELECT " + columns + " FROM idmv_link_ext " + nolock + " WHERE mcThisMskey = " + mskey + " ORDER BY mcUniqueId";
    var debugResult = uSelect(debugSql);

    //format output
    debugResult = uReplaceString(debugResult, "!!", "\n");
    debugResult = uReplaceString(debugResult, "\|", "\t");
    columns = uReplaceString(columns, ", ", "\t");

    uWarning(rds.outPrefix + "Debug SQL Query:\n" + debugSql);
    uWarning(rds.outPrefix + "Debug Result:\n" + columns + "\n" + debugResult);
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1655286016663</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getNameOfAllAssignedPrivileges</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function      : sapc_getNameOfAssignedPendingPrivileges
 * Category             : RDS Core script
 * Short description    : Get user assignments like sap_abap_getNameOfAssignedPendingPrivileges but optionally with delta-
 *                        Returns a list of all privileges of the passed user for the passed repository and the passed privilege type. It either
 *                        - contains all already assigned privileges plus/minus the delta of the current pending added and/or removed privileges (repository contant delta = off)
 *                        - contains only delta to be added/removed (repository contant delta = on)
 *                        Main differences to SAP script:
 *                        - using mcValidFrom not mcDirValidFrom (all validities - also inherited - are relevant)
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.    : String Format: &lt;MSKEY of user&gt;!!&lt;repository name&gt;!!&lt;privilege type&gt;[!!&lt;withValidity&gt;!!&lt;withDelta&gt;] e.g. 172645!!BQQ001!!PROFILE or 172645!!BQQ001!!PROFILE!!TRUE!!%$rep.$SAPC_DELTA_PROVISIONING%
 * Return value Cat.    : String List of Privilege (backend) names in format : {ValidFrom=2010-01-01!!ValidTo=2020-12-31}&lt;priv&gt;|{ValidFrom=2010-01-01!!ValidTo=2020-12-31}&lt;priv&gt;|{ValidFrom=2010-01-01!!ValidTo=2020-12-31}&lt;priv&gt;
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies         : -sapc_core_script_functions
 *----------------------------------------------------------------------------------------------------------------------------
 * History				: 2020-06-11 SAP NN: no delta: modified validities not considered when polling from DB as linkstate = 0 (not 1) and execState = 513 -&gt; add another OR to query to get modified validities created
 *						: 2020-06-11 SAP NN: with delta: change determination of operation from audit
 *						: 2020-06-11 SAP NN: increased formatting of queries and output
 *						: 2020-06-11 SAP NN: delta for modified validity is not {M} but {R} e.g. {R}{VALIDFROM=2011-08-01!!VALIDTO=9999-12-31!!NEW_VALIDFROM=2011-08-31!!NEW_VALIDTO=2011-12-31}SAP_BC_USER_ADMIN
 *						: 2020-06-11 SAP NN: Enabled delta also for profiles (according to note 1626816 possible) | Added line to query with delta to cover modify validity process (linkstate = 0, execstate = 513)
 *						: 2024-11-27 SAP NN: Modify assignment validity not working, as the fields mcNewValidFrom/To are empty and mcValidFrom/To holding the new validities. -&gt; need to get validity from link-audit
 *--------------------------------------------------------------------------------------------------------------------------*/

var rds;

function sapc_getNameOfAssignedPendingPrivileges(Par) {
    importClass(java.lang.StringBuffer);

    rds = sapc_core_scriptHeader("sapc_getNameOfAssignedPendingPrivileges", Par);

    var parArray = Par.split("!!");
    var mskey = parArray[0];
    var repositoryName = parArray[1];
    var privilegeType = parArray[2];
    var addValidityProperty = false;
    if (parArray[3] != null &amp;&amp; (parArray[3] == "1" || parArray[3].toLowerCase() == "true")) {
        addValidityProperty = true;
    }
    var deltaEnabled = false;
    if (parArray[4] != null &amp;&amp; (parArray[4] == "1" || parArray[4].toLowerCase() == "true")) {
        deltaEnabled = true;
    }
    operation = "";

    var refAudit = uSelect("select refAudit from mxp_audit " + nolock + " where auditid = " + rds.auditID);
    uInfo(rds.outPrefix + "Reference Audit: [" + refAudit + "]");

    if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "User MSKEY: [" + mskey + "]; Repository: [" + repositoryName + "]; Privilege Type: [" + privilegeType + "]; Validity Enabeld: [" + addValidityProperty.toString() + "]; Delta Enabeld: [" + deltaEnabled.toString() + "]");

    uInfo(rds.outPrefix + "User MSKEY: [" + mskey + "]; Repository: [" + repositoryName + "]; Privilege Type: [" + privilegeType + "]; Validity Enabeld: [" + addValidityProperty.toString() + "]; Delta Enabeld: [" + deltaEnabled.toString() + "]");

    var nolock = "";
    if ("%$ddm.databasetype%" == 1) { //MS-SQL
        nolock = "WITH (NOLOCK)";
    }

    if (rds.logLevel &gt;= 2) {
        sap_debug_logUserAssignments(mskey);
    }

    var sql = "";
    //if (deltaEnabled == false || privilegeType == "PROFILE") {
    // original SAP statement (almost, only mcDirValid* to mcValid*)
    //delta does not work for roles AND profiles
    // NN: says who? in note 1626816 its possible
    if (deltaEnabled == false) {
        sql = "SELECT DISTINCT assignment.mcValidFrom, assignment.mcValidTo, privilegename.mcMSKEYVALUE ";
        sql += " FROM mxi_link assignment " + nolock + " , idmv_entry_simple privilegename " + nolock + " , ";
        sql += " idmv_value_basic repository " + nolock + " , idmv_value_basic privType " + nolock + " ";
        sql += " WHERE assignment.mcOtherMskey = privilegename.mcMSKEY AND assignment.mcOtherMskey = repository.mskey AND assignment.mcOtherMskey = privType.mskey ";
        sql += "  AND repository.attrname = 'MX_REPOSITORYNAME' and repository.searchValue = '" + repositoryName + "' ";
        sql += "  AND privType.attrname = 'MX_PRIVILEGE_TYPE' and privType.searchValue = '" + privilegeType + "' ";
        sql += "  AND assignment.mcThisMskey = " + mskey + " AND assignment.mcLinkType = 2 ";
        sql += "  AND ( ";
        sql += "    (assignment.mcLinkState = 0 AND assignment.mcExecState = 1 AND assignment.mcDisabled = 0) ";
        sql += "    OR (assignment.mcLinkState = 1 AND assignment.mcExecState  IN (512,513) ";
        sql += "      AND ( ";
        sql += "        (assignment.mcAddAudit &gt; assignment.mcValidateAddAudit) ";
        sql += "        OR (assignment.mcAddAudit IS NOT NULL AND assignment.mcValidateAddAudit IS NULL))) ";
        sql += "    OR (assignment.mcLinkState = 0 AND assignment.mcExecState  IN (1536) ";
        sql += "      AND ( ";
        sql += "        (assignment.mcDelAudit &lt; assignment.mcValidateDelAudit) ";
        sql += "        OR (assignment.mcDelAudit IS NULL AND assignment.mcValidateDelAudit IS NOT NULL))) ";
        // 2020-06-11 SAP NN: added state 513 for modify pending validity
        sql += "    OR (assignment.mcLinkState = 0 AND assignment.mcExecState = 513 AND assignment.mcDisabled = 0 ";
        sql += "      AND assignment.mcValidateModValAudit IS NOT NULL) ";
        sql += ") ";

    } else {
        // 2020-06-11 SAP NN: change determination of operation from audit

        // get what audit id it is (add, del or modify-audit)
        var tsql = "select distinct mcAddAudit, mcModifyVal, mcDelAudit from idmv_link_ext " + nolock + " ";
        tsql += " where mcAttrName = 'MXREF_MX_PRIVILEGE' ";
        tsql += "  and (mcModifyVal = " + refAudit + " or mcAddAudit = " + refAudit + " or mcDelAudit = " + refAudit + ") ";
        uInfo("Query to get operation audit by ref audit: [" + tsql + "]");
        var opAudits = uSelect(tsql);
        uInfo("Operation audits by ref audit: [" + opAudits + "]");

        // compare audits from DB to ref-audit which is matching
        if (!opAudits || opAudits.indexOf("!ERROR") != -1) {
            msg = "No operation determined from audit [" + rds.auditID + "]. Script cannot determine operation add, mod or remove.";
            uErrMsg(2, rds.outPrefix + msg);
            uSkip(1, 2, msg);
        }
        var opAuditsArray = uReplaceString(opAudits, "|", "!!").split("!!");
        var auditFieldName = "";
        if (opAuditsArray[0] == refAudit) { // mcAddAudit = refAudit -&gt; Add
            operation = "{A}";
            auditFieldName = "mcAddAudit";
        } else if (opAuditsArray[1] == refAudit) {
            operation = "{R}";
            auditFieldName = "mcModifyVal";
        } else if (opAuditsArray[2] == refAudit) {
            operation = "{D}";
            auditFieldName = "mcDelAudit";
        } else {
            msg = "Unknown operation determined for audit [" + rds.auditID + "]: " + opAuditsArray;
            uErrMsg(2, rds.outPrefix + msg);
            uSkip(1, 2, msg);
        }

        //2024-11-27 SAP NN: Modify assignment validity not working, as the fields mcNewValidFrom/To are empty and mcValidFrom/To holding the new validities. -&gt; need to get validity from link-audit
        //sql = "select mcValidFrom, mcValidTo, mcOtherMSKEYVALUE, mcModifyNewValidFrom, mcModifyNewValidTo from idmv_link_ext " + nolock + " , ";
        sql = "select mcValidFrom, mcValidTo, mcOtherMSKEYVALUE, mcUniqueId from idmv_link_ext " + nolock + " , ";
        sql += " idmv_value_basic pt " + nolock + " , idmv_value_basic rn " + nolock + " ";
        sql += " where pt.mskey = mcOtherMSKEY and pt.attrName = 'MX_PRIVILEGE_TYPE' and pt.searchValue = '" + privilegeType + "' ";
        sql += "  and rn.mskey = mcOtherMSKEY and rn.attrName = 'MX_REPOSITORYNAME' and rn.searchValue = '" + repositoryName + "' ";
        sql += "  and mcThisMSKEY = " + mskey + " and " + auditFieldName + " = " + refAudit;

    }

    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "SQL Query:\n[" + sql + "]");

    //result looks like privMskeyValue!!privMskeyValue!!privMskeyValue
    var result = uSelect(sql);
    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Result: " + result);

    var allPrivsStringBuf = new StringBuffer();
    var firstElement = true;
    if (result != null &amp;&amp; result != "") {
        var resultArray = result.split("!!");
        for (var i = 0; i &lt; resultArray.length; i++) {
            // get a row
            var rows = resultArray[i];
            // split the result set
            var row = rows.split("|");

            //privMskeyValue is like PRIV:&lt;type&gt;:&lt;repository&gt;:&lt;privilegeName&gt;
            var privMskeyValue = row[2];
            var repTemp = privMskeyValue.split(":");
            var repstring = repTemp[0] + ":" + repTemp[1] + ":" + repTemp[2] + ":";
            var privName = uReplaceString(privMskeyValue, repstring, "");
            var linkId = row[3];
            var value;

            if (addValidityProperty == true) {
                // valid to | valid from | privMsKeyValue

                // 2020-06-11 SAP NN: delta for modified validity is not {M} but {R} e.g. {R}{VALIDFROM=2011-08-01!!VALIDTO=9999-12-31!!NEW_VALIDFROM=2011-08-31!!NEW_VALIDTO=2011-12-31}SAP_BC_USER_ADMIN
                if (operation == "{R}") {
                    // 2024-11-27 SAP NN: Modify assignment validity not working, as the fields mcNewValidFrom/To are empty and mcValidFrom/To holding the new validities. -&gt; need to get validity from link-audit
                    var validFrom = getOldValidityOfModifiedAssignment("newValidFrom", refAudit, linkId);
                    if (validFrom == "null") validFrom = "";
                    var validFromConverted = sap_abap_convertToABAPValidFromDate(validFrom);
                    var validTo = getOldValidityOfModifiedAssignment("newValidTo", refAudit, linkId);
                    if (validTo == "null") validTo = "";
                    var validToConverted = sap_abap_convertToABAPValidToDate(validTo);

                    var NewValidFrom = row[0];
                    if (NewValidFrom == "null") NewValidFrom = "";
                    var NewValidFromConverted = sap_abap_convertToABAPValidFromDate(NewValidFrom);
                    var NewValidTo = row[1];
                    if (NewValidTo == "null") NewValidTo = "";
                    var NewValidToConverted = sap_abap_convertToABAPValidToDate(NewValidTo);
                    value = operation + "{VALIDFROM=" + validFromConverted + "!!VALIDTO=" + validToConverted;
                    value += "!!NEW_VALIDFROM=" + NewValidFromConverted + "!!NEW_VALIDTO=" + NewValidToConverted + "}" + privName;
                } else {

                    // 2024-11-27 SAP NN: Modify assignment validity not working, as the fields mcNewValidFrom/To are empty and mcValidFrom/To holding the new validities. -&gt; need to get validity from link-audit
                    var validFrom = row[0];
                    if (validFrom == "null") validFrom = "";
                    var validFromConverted = sap_abap_convertToABAPValidFromDate(validFrom);
                    var validTo = row[1];
                    if (validTo == "null") validTo = "";
                    var validToConverted = sap_abap_convertToABAPValidToDate(validTo);

                    value = operation + "{VALIDFROM=" + validFromConverted + "!!VALIDTO=" + validToConverted + "}" + privName;
                }
                uInfo("add privilege plus validity : " + value);
            } else {
                value = operation + privName;
                uInfo("add privilege without validity : " + value);
            }

            if (!firstElement) {
                allPrivsStringBuf.append("|");
            }
            allPrivsStringBuf.append(value);
            firstElement = false;
        }
    }

    var allPrivs = String(allPrivsStringBuf); // must be casted explicitly to String
    if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "Calculated privileges for " + Par + " are: " + allPrivs);
    else uInfo(rds.outPrefix + "Calculated privileges for " + Par + " are: " + allPrivs);

    return allPrivs;
}

function getOldValidityOfModifiedAssignment(validityType, refAudid_, linkId_) {
    /*
	-- 1st get root audit of current audit -&gt; not required if we know refAudit already
	select * from mxp_audit where auditid = 5108384
	-- 2nd get max last modify or assignment OK audit
	select max (auditid) from (select auditid from idmv_linkaudit_basic where operation in (9, 8) and mclinkid = 158438  and auditid &lt; 5108382) a
	-- 3rd get the valid to date of that audit
	select newValidTo from idmv_linkaudit_basic where operation in (9, 8) and mclinkid = 158438  and auditid = 5108375
	*/
    var lastValidityAudit = uSelect("select max (auditid) from (select auditid from idmv_linkaudit_basic where operation in (9, 8) and mclinkid = " + linkId_ + " and auditid &lt; " + refAudid_ + ") as a");
    return uSelect("select " + validityType + " from idmv_linkaudit_basic where operation in (9, 8) and mclinkid = " + linkId_ + "  and auditid = " + lastValidityAudit + " ");
}

/**
 * Prints out all assignments the user has (also all assignments in pending remove state etc.)
 */
function sap_debug_logUserAssignments(mskey) {

    var nolock = "";
    if ("%$ddm.databasetype%" == 1) { //MS-SQL
        nolock = "WITH (NOLOCK)";
    }

    var columns = "mcUniqueId, mcThisMSKEY, mcOtherMSKEY, mcAttrName, mcThisOcName, mcOtherOcName, mcThisMSKEYVALUE, mcOtherMSKEYVALUE, mcLinkState, mcAssignedDirect, mcAssignedInheritCount, mcExecState, mcExecStateHierarchy, mcChangeNumber, mcGroupGuid, mcLastAudit, mcAddedTime, mcModifyTime, mcValidateAddAudit, mcAddAudit, mcContextMSKEY, mcContextCategory, mcContextStr1, mcContextStr2, mcOrphan, mcSoDViolation, mcNotAllowedFor, mcUnsupportedContextType, mcMissingConditionalContext, mcDisabled, mcRequestID";
    var debugSql = "SELECT " + columns + " FROM idmv_link_ext " + nolock + " WHERE mcThisMskey = " + mskey + " ORDER BY mcUniqueId";
    var debugResult = uSelect(debugSql);

    //format output
    debugResult = uReplaceString(debugResult, "!!", "\n");
    debugResult = uReplaceString(debugResult, "\|", "\t");
    columns = uReplaceString(columns, ", ", "\t");

    uWarning(rds.outPrefix + "Debug SQL Query:\n" + debugSql);
    uWarning(rds.outPrefix + "Debug Result:\n" + columns + "\n" + debugResult);
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1732719302770</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getNameOfAssignedPendingPrivileges</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getPassword

function sapc_getPassword(Par) {

    var script = "sapc_getPassword::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    var InitialPassword = sapc_core_getPackageConstant("SAPC_DEFAULT_INITIAL_PASSWORD");
    var generatedPassword = sapc_generatePassword();

    // Input data
    var parArray = Par.split("|");
    var generatePassword = parArray[0];
    var userMskeyValue = parArray[1];

    if (generatePassword == "TRUE") {

        if (logLevel &gt;= 3) uErrMsg(1, script + " user mskeyValue: [" + userMskeyValue + "] ; MX_ENCRYPTED_PASSWORD: Generated Password");

        return sapc_encryptPassword(generatedPassword + "|" + userMskeyValue);

    } else {

        if (logLevel &gt;= 3) uErrMsg(1, script + " user mskeyValue: [" + userMskeyValue + "] ; MX_ENCRYPTED_PASSWORD: Default Initial Password");

        return sapc_encryptPassword(InitialPassword + "|" + userMskeyValue);
    }

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getPassword</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getPrivNameFromRepAssignment

function sapc_getPrivNameFromRepAssignment(Par) {
    var script = "sapc_getPrivNameFromRepAssignment::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    // if (logLevel &gt;= 2) uErrMsg(1, "Par: " + Par);

    // Par has following format:
    //	%$rep.$NAME%!!&lt;ROLE or PRIVILEGE&gt;!!&lt;Assignment&gt;
    // e.g. : T01001!!ROLE!!{ValidFrom=2011-09-03!!ValidTo=9999-12-31}ROLE_A_0001) 
    //        0       1     2                      3                         
    // Input value &lt;Assignment&gt; contains time dependent assignment of a user:
    // {VALID_FROM=2007-12-01!!VALID_TO=2008-12-01}SAP_XI_ADMINISTRATOR
    // Output needs to be in format:
    //  PRIV:ROLE:T01001:SAP_XI_ADMINISTRATOR in case role is aready active
    //  or
    //  PRIV:ROLE:T01001:SAP_XI_ADMINISTRATOR (VALID_FROM=2007-12-01) in case role is not active yet

    var parArray = Par.split("!!");
    var repName = parArray[0];
    var privType = parArray[1];

    var privAssign = parArray[2] + "!!" + parArray[3];

    var privDisplayName = "";

    var currentDate = new Date();

    // split privAssign
    if (privAssign.charAt(0) == '{' &amp;&amp; privAssign.indexOf("}") != -1) {
        privAssign = uReplaceString(privAssign, "}", "!!");
        var privAssignArray = privAssign.split("!!");

        var privValidFrom = privAssignArray[0];
        var privValidTo = privAssignArray[1];
        var privName = privAssignArray[2];

        privValidFromArray = privValidFrom.split("=");
        privValidFrom = privValidFromArray[1];
        privValidFromArray = privValidFrom.split("-");
        privValidFromYear = privValidFromArray[0];
        privValidFromMonth = privValidFromArray[1];
        // Month in Java starts with 0; therefore doing -1
        var privValidFromMonthInt = parseInt(privValidFromMonth, 10);
        privValidFromMonthInt = privValidFromMonthInt - 1;
        privValidFromMonth = privValidFromMonthInt.toString();
        privValidFromDay = privValidFromArray[2];

        privValidToArray = privValidTo.split("=");
        privValidTo = privValidToArray[1];

        privDisplayName = "PRIV:" + privType + ":" + repName + ":" + privName;

        var privStartDate = new Date(privValidFromYear, privValidFromMonth, privValidFromDay);

        // if (logLevel &gt;= 2) uErrMsg(2, "privValidFromYear: " + privValidFromYear + ", privValidFromMonth: " + privValidFromMonth + ", privValidFromDay: " + privValidFromDay);
        // if (logLevel &gt;= 2) uErrMsg(2, "privStartDate: " + privStartDate + ", currentDate: " + currentDate);

        if (privStartDate &gt; currentDate) {
            privDisplayName = privDisplayName + " (VALID_FROM=" + privValidFrom + ")";
        }
    } else {
        if (logLevel &gt;= 2) uErrMsg(2, "Invalid time pattern: " + privAssign);
    }

    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "Privilege display name: [" + privDisplayName + "]");

    return privDisplayName;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1656583394793</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getPrivNameFromRepAssignment</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function            : sapc_getPrivilegeMskeyFromAudit
 * Category                   : provisioning script
 * Short description          : Extracts the privilege mskey from an audit
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.          : String
 * Parameter(s)               : MSKEYVALUE of MX_PERSON
 * Return value Cat.          : String
 * Return value               : MSKEY of MX_PRIVILEGE
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies : // to scripts, attributes, inbuild functions, context vars, tables/views,
 *                                                      system/job/repository/global constants/variables
 *                            - inbuild function : uGetAuditID
 *                            - inbuild function : uSelect
 *                            - view : mxmc_oper.mcmv_audit
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_getPrivilegeMskeyFromAudit(Par) {
    var script = "sapc_getPrivilegeMskeyFromAudit::";
    var debugMode = 1;

    var userMskeyValue = Par;
    var privMskeyValue = "";

    var auditID = uGetAuditID();
    var idStore = uGetIDStore();

    var userMskey = uIS_sGet(idStore, "MSKEYVALUE", userMskeyValue, true);

    // retrieve userID from audit
    var SQL = "SELECT user_id FROM MCMV_audit WHERE Auditref = " + auditID;

    var auditInfo = uSelect(SQL);

    uErrMsg(debugMode, script + "AuditInfo: [" + auditInfo + "]");

    var auditInfoArray = auditInfo.split(":");

    var privMskey = auditInfoArray[1];

    if (privMskey == "") privMskey = "NULLATR";
    else {
        privMskeyValue = uIS_sGetValue(privMskey, idStore, "MSKEYVALUE", 0);
    }

    uErrMsg(debugMode, script + "User MskeyValue: [" + userMskeyValue + "] ; Privilege MskeyValue: [" + privMskeyValue + "]; auditID: [" + auditID + "]");


    // if direct reference is working this will be added here, is available in SP4

    return privMskey;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getPrivilegeMskeyFromAudit</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// input: repName!!constantName

function sapc_getRepConstant(Par) {

    var parArray = Par.split("!!");

    var repName = parArray[0];
    var repConstName = parArray[1];

    sql = "SELECT VarValue FROM MC_REPOSITORY_VARS WHERE VarName = '" + repConstName + "' and Repository = (SELECT rep_id FROM MC_REPOSITORY WHERE rep_name = '" + repName + "')";
    var repConstValue = uSelect(sql);

    uInfo("sapc_getRepConstant: Retrieved constant [" + repConstName + "] for repository [" + repName + "]: [" + repConstValue + "]");

    return repConstValue;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getRepConstant</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getRepID

function sapc_getRepID(Par) {

    return uSelect("SELECT rep_id FROM MC_REPOSITORY WHERE rep_name = '" + Par + "'");

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getRepID</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getRoleMembersFromRoleName
// This script returns the MSKEYs of the direct MX_PERSON members of a MX_ROLE
// 2021-12-20 SAP NN: no filter for member attr, could return any relation between person and role -&gt; add and mcAttrName = 'MXREF_MX_ROLE'
// 2023-12-10 SAP NN: result should be pipe separated, so it could be used in to identtiy store passes

function sapc_getRoleMembersFromRoleName(Par) {

    var script = "sapc_getRoleMembersFromRoleName::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;
    var roleMskeyValue = Par;
    var roleMskey = sapc_getMskeyFromMskeyvalue(roleMskeyValue);

    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "roleMskeyValue: " + roleMskeyValue + ", roleMskey: " + roleMskey);

    var SQL = "select mcThisMSKEY FROM idmv_link_ext WHERE mcOtherMskey = " + roleMskey + " AND mcThisOcName = 'MX_PERSON' and mcAttrName = 'MXREF_MX_ROLE' ";

    var result = uReplaceString(uSelect(SQL), "!!", "|");
    uWarning(result);

    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1702212325687</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getRoleMembersFromRoleName</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getSQLforUserRepositories
//
// The function checks the database type of the current system and returns the proper SQL statement
// for retrieving the list of user repositories of a given MX_PERSON object
// 2022-09-13 SAP NN: account meta not considered in sql querries ; ASE / DB2 not considered

function sapc_getSQLforUserRepositories(Par) {
    var script = "sapc_getSQLforUserRepositories::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data
    var result = "";
    var sql = "";

    // select database type in order to distinguish Oracle and MS-SQL server specific statements
    var dbType = uGetConstant("ddm.databasetype");

    // Set respective SQL statement
    if (dbType == 1) // MS-SQL 
    {
        sql = "SELECT SUBSTRING(attrname,8,20) AS repositories FROM idmv_value_basic_active with (nolock) WHERE attrname LIKE 'ACCOUNT%' AND attrname NOT LIKE 'ACCOUNTMETA%' AND mskey = %USERMSKEY% ORDER BY attrname";
    } else if (dbType == 9) // ASE
    {
        sql = "SELECT SUBSTRING(attrname,8,20) AS repositories FROM idmv_value_basic_active WHERE attrname LIKE 'ACCOUNT%' AND attrname NOT LIKE 'ACCOUNTMETA%' AND mskey = %USERMSKEY% ORDER BY attrname";
    } else // Oracle or DB2
    {
        sql = "SELECT SUBSTR(attrname,8,20) AS repositories FROM idmv_value_basic_active WHERE attrname LIKE 'ACCOUNT%'AND attrname NOT LIKE 'ACCOUNTMETA%' AND mskey = %USERMSKEY% ORDER BY attrname";
    }

    // Result
    if (logLevel &gt;= 2) uErrMsg(1, script + "SQL Statement: " + sql);

    return sql;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1663144566247</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getSQLforUserRepositories</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getSQLstatementFromRequest

function sapc_getSQLstatementFromRequest(Par) {

    // Input data
    var currentRequestMSKEYVALUE = Par;
    var SQL = "";
    var SQLStatement = "";

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, "sapc_executeSQLstatement currentRequestMSKEYVALUE: " + currentRequestMSKEYVALUE);
    }

    // Get SQL statement from request
    SQL = SQL + "SELECT avalue FROM mxiv_sentries WHERE attrname = 'SAPC_REQ_EXEC_SQL_STATEMENT' AND mskey = ";
    SQL = SQL + "(SELECT DISTINCT (mskey) FROM mxiv_sentries WHERE attrname = 'MSKEYVALUE' AND searchvalue = '";
    SQL = SQL + currentRequestMSKEYVALUE + "')";

    SQLStatement = UserFunc.uSelect(SQL);

    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, "sapc_executeSQLstatement SQLStatement: " + SQLStatement);
    }

    return SQLStatement;

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getSQLstatementFromRequest</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getSalutationCode
// Input: Mr. or Ms. or Mr or Ms
// Output: 0001 for female, 0002 for male

function sapc_getSalutationCode(Par) {

    // Input data
    var currentData = Par + "";

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Write current data to the log
    if (logLevel &gt;= 3) {
        UserFunc.uErrMsg(1, "sapc_getSalutationCode currentData: " + currentData);
    }

    // Handle current data
    var result = "";
    if (currentData != null &amp;&amp; currentData != "") {
        if (currentData.indexOf("Mrs") != -1 || currentData.indexOf("Miss") != -1 || currentData.indexOf("Ms") != -1) {
            result = "0001";
        } else if (currentData.indexOf("Mr") != -1) {
            result = "0002";
        }
    }

    // Result
    if (logLevel &gt;= 3) {
        UserFunc.uErrMsg(1, "sapc_getSalutationCode result: " + result);
    }
    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getSalutationCode</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_getSalutationText
// Input: 1 for female, 2 for male
// Output: Mr. or Ms. or Mr or Ms

function sapc_getSalutationText(Par) {

    // Input data
    var currentData = Par + "";

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Write current data to the log
    if (logLevel &gt;= 3) {
        UserFunc.uErrMsg(1, "sapc_getSalutationText currentData: " + currentData);
    }

    // Handle current data
    var result = "";
    if (currentData != null &amp;&amp; currentData != "") {
        if (currentData.indexOf("1") != -1) {
            result = "Mrs";
        } else if (currentData.indexOf("2") != -1) {
            result = "Mr";
        }
    }

    // Result
    if (logLevel &gt;= 3) {
        UserFunc.uErrMsg(1, "sapc_getSalutationText result: " + result);
    }
    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getSalutationText</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * 2017-11-09 SAP NN: Returning task ID for Guid provided as Par
 */

function sapc_getTaskIDbyGUID(Par) {

    var core = sapc_core_scriptHeader(sapc_getTaskIDbyGUID, Par);

    var retVal = uSelect("select taskID from mxp_tasks %NOLOCK% where taskGuid = '" + Par + "'");

    if (core.logLevel &gt; 1) uWarning(core.outPrefix + " Returning Task ID [" + retVal + "]");

    return retVal;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getTaskIDbyGUID</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_getTodayDate

function sapc_getTodayDate(Par) {
    importClass(java.util.Calendar);
    var today = Calendar.getInstance();
    today.setTime(new Date());
    today.set(Calendar.HOUR_OF_DAY, 0);
    today.clear(Calendar.MINUTE);
    today.clear(Calendar.SECOND);
    today.clear(Calendar.MILLISECOND);
    return today;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1583915719597</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_getTodayDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_getValidityFromAssignment
// Input:	sapc_getValidityFromAssignment({ValidFrom=2012-07-26!!ValidTo=9999-12-31}Z_BCM_ICAGT-S&amp;&amp;VALIDFROM)
// Output:	2012-07-26

function sapc_getValidityFromAssignment(Par) {

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var scriptName = "sapc_getValidityFromAssignment::";

    // Input data
    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, scriptName + " Par: " + Par);
    }
    // Example: Par: {ValidFrom=2012-07-26!!ValidTo=9999-12-31}Z_BCM_ICAGT-S&amp;&amp;VALIDFROM

    var parArray = Par.split("&amp;&amp;");
    var parAssignment = parArray[0];
    var parOption = parArray[1];

    var privValidFrom = "";
    var privValidTo = "";

    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, scriptName + " parAssignment: " + parAssignment + "; parOption: " + parOption);
    }
    // Example: parAssignment: {ValidFrom=2012-07-26!!ValidTo=9999-12-31}Z_BCM_ICAGT-S; parOption: VALIDFROM

    if (parAssignment.charAt(0) == '{' &amp;&amp; parAssignment.indexOf("}") != -1) {
        var parAssignmentArray = parAssignment.split("!!");

        privValidFrom = parAssignmentArray[0]; // {ValidFrom=2012-07-26
        privValidTo = parAssignmentArray[1]; // ValidTo=9999-12-31}Z_BCM_ICAGT-S
        var privValidFromArray = privValidFrom.split("=");
        privValidFrom = privValidFromArray[1]; // 2012-07-26

        var privValidToArray = privValidTo.split("=")[1]; // 9999-12-31}Z_BCM_ICAGT-S
        privValidTo = privValidToArray.split("}")[0]; // 9999-12-31

        if (logLevel &gt;= 2) {
            UserFunc.uErrMsg(1, scriptName + " privValidFrom: " + privValidFrom + "; privValidTo: " + privValidTo);
        }
    }

    if (parOption == "VALIDFROM") {
        return privValidFrom;
    } else if (parOption == "VALIDTO") {
        return privValidTo;
    } else {
        UserFunc.uErrMsg(1, scriptName + " parOption: " + parOption + " unknown. Stopping current pass.");
        uStop("parOption: " + parOption + " unknown. Stopping current pass.");
    }

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_getValidityFromAssignment</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_hanaConnectionCheck

function sapc_hanaConnectionCheck(Par) {
    var rds = sapc_core_scriptHeader("sapc_hanaConnectionCheck", Par);

    var repID = uGetRepositoryID();
    var repName = uGetRepositoryName();
    var repDisplayName = uGetConstant("rep.SAPC_REP_DISPLAYNAME");
    var repHost = uGetConstant("rep.IMDB_HOSTNAME");

    if (stopJob == 0) {
        uWarning(rds.outPrefix + "Connection to HANA system [" + repName + "] - [" + repDisplayName + "] on server [" + repHost + "] established successfully");
    } else {
        uError(rds.outPrefix + "Connection to HANA system [" + repName + "] - [" + repDisplayName + "] on server [" + repHost + "] has NOT been established");

        uStop("Connection failed");
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_hanaConnectionCheck</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_hanaConnectionCheckInitialize
var stopJob;

function sapc_hanaConnectionCheckInitialize(Par) {

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_hanaConnectionCheckInitialize</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_hanaConnectionCheckSetFlag

function sapc_hanaConnectionCheckSetFlag(Par) {
    stopJob = 0;

    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_hanaConnectionCheckSetFlag</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_hana_getRepositoryVariables

function sapc_hana_getRepositoryVariables(Par) {
    var parMapping = uGetRepositoryVar(Par);

    if (parMapping === "true") {
        if (Par === "SAML_USER_MAPPINGS") {
            return "SELECT * FROM SAML_USER_MAPPINGS %$rep.SAPC_LOAD_FILTER_USER%";
        }
        if (Par === "X509_USER_MAPPINGS") {
            return "SELECT * FROM X509_USER_MAPPINGS %$rep.SAPC_LOAD_FILTER_USER%";
        }
        if (Par === "USER_PARAMETERS") {
            return "SELECT * FROM USER_PARAMETERS %$rep.SAPC_LOAD_FILTER_USER%";
        }
    } else {
        return "--";
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_hana_getRepositoryVariables</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_hana_handleBoolean_for_disable

function sapc_hana_handleBoolean_for_disable(Par) {
    var rds = sapc_core_scriptHeader("sapc_hana_handleBoolean_for_disable", Par);

    var result = "";

    if (Par == null || Par == '' || Par == "" || Par == "0" || Par == "false" || Par == "FALSE") {
        result = ""; // interpreted as Boolean-False		
    } else {
        // if a value exists: interpreted as Boolean-True
        result = 'deactivate';
    }

    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_hana_handleBoolean_for_disable</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_hana_handleBoolean_for_enable

function sapc_hana_handleBoolean_for_enable(Par) {
    var rds = sapc_core_scriptHeader("sapc_hana_handleBoolean_for_enable", Par);

    var result = "";

    if (Par == null || Par == '' || Par == "" || Par == "0" || Par == "false" || Par == "FALSE") {
        result = ""; // interpreted as Boolean-False	

    } else {
        // if a value exists: interpreted as Boolean-True
        result = 'activate';

    }

    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_hana_handleBoolean_for_enable</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// 2023-02-19 SAP NN: fixed issue where multiple filters would lead to error, thanks Vadim :)

function sapc_hana_privilege_filter(Par) {

    var rds = sapc_core_scriptHeader("sapc_hana_privilege_filter", Par);

    var filter_apppriv_name = uGetConstant("rep.SAPC_LOAD_FILTER_APPPRIV");
    var filter_systempriv_name = uGetConstant("rep.SAPC_LOAD_FILTER_SYSTEMPRIV");
    var filter_apppriv_change_cond = "";
    var filter_systempriv_change_cond = "";

    if (Par === "APPPRIV") {
        return filter_apppriv_name;
    }
    if (Par === "SYSTEMPRIV") {
        return filter_systempriv_name;
    }
    //change the condition because of the different structure in the HANA assignments tables
    if (Par === "APPPRIV_CHANGE_COND") {
        //filter_apppriv_change_cond = filter_apppriv_name.replace("NAME", "PRIVILEGE");
        // Vadim: this is an error. There can be several occurences of "NAME" in the filter
        filter_apppriv_change_cond = filter_apppriv_name.split("NAME").join("PRIVILEGE");
        return filter_apppriv_change_cond;
    }
    if (Par === "SYSTEMPRIV_CHANGE_COND") {
        //filter_systempriv_change_cond = filter_systempriv_name.replace("NAME", "PRIVILEGE");
        // Vadim: this is an error. There can be several occurences of "NAME" in the filter
        filter_systempriv_change_cond = filter_systempriv_name.split("NAME").join("PRIVILEGE");
        return filter_systempriv_change_cond;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1708364629067</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_hana_privilege_filter</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_hana_user_filter

function sapc_hana_user_filter(Par) {

    var rds = sapc_core_scriptHeader("sapc_hana_user_filter", Par);

    var filter_user_name = uGetConstant("rep.SAPC_LOAD_FILTER_USER");
    var filter_grantee = "";

    if (Par === "USER_NAME") {
        return filter_user_name;
    }
    if (Par === "GRANTEE") {
        //change the condition because of the different structure in the HANA assignments tables
        filter_grantee = filter_user_name.replace("WHERE USER_NAME", "AND GRANTEE");
        return filter_grantee;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_hana_user_filter</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function      : sapc_handleDeletedAssignmentsFromBackend
 * Category             : job script
 * Short description    : Handle deleted assignments during the update load from backend
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.    : Entry
 * Parameter(s)         : PRIV_MSKEY, PRIV_MSKEYVALUE, PRIV_DISPLAYNAME, TMP_TABLE, TASK_ID_ASSIGN_DELETE
 * Return value Cat.    : None
 * Return value         : ---
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies : // to scripts, attributes, inbuild functions, context vars, tables/views,
 *                                                            system/job/repository/global constants/variables
 *                      - inbuild function: uGetConstant
 *                      - inbuild function: uGetRepositoryName
 *                      - system constant : ddm.mcjob
 *                      - system constant : ddm.datetime8601
 *                      - core constant : SAPC_MASTER_IDS_ID
 *                      - inbuild function : uSelect
 *                      - view : idmv_link_simple_all
 *                      - inbuild function : uIS_sGetValue
 *                      - inbuild function : uProvisioning
 *                      - attribute : ACCOUNT&lt;REP&gt; of MX_PERSON
 *                      - attribute : DISPLAYNAME of MX_PERSON
 *                      - attribute : MXREF_MX_PRIVILEGE of MX_PERSON
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_handleDeletedAssignmentsFromBackend(Par) {
    var script = "sapc_handleDeletedAssignmentsFromBackend::";
    var debugMode = 0;

    // -------------------------------------------------------
    // Input Parameters
    var privMskey = Par.get("PRIV_MSKEY");
    var privMskeyValue = Par.get("PRIV_MSKEYVALUE");
    var privDisplayName = Par.get("PRIV_DISPLAYNAME");
    var tmpTable = Par.get("TMP_TABLE");
    var assignmentColumn = Par.get("ASSIGN_COLUMN");
    var taskIDAssignDelete = Par.get("TASK_ID_ASSIGN_DELETE");

    // -------------------------------------------------------
    // Variable Definition 
    var privMemberString = "";
    var privMemberArray = null;
    var privName = "";

    var userMskey = 0;
    var userMskeyValue = "";
    var userDisplayName = "";
    var userRepAccount = "";

    var repName = uGetRepositoryName();
    var jobID = uGetConstant("ddm.mcjob");
    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");

    var dateTime = uGetConstant("ddm.datetime8601");
    dateTime = uReplaceString(dateTime, "T", " ");

    // -------------------------------------------------------
    // get profile name in backend
    // privMskeyValue = [PRIV:&lt;PRIV_TYPE&gt;:&lt;REP&gt;:&lt;PROFILE&gt;]
    uErrMsg(debugMode, script + "Privilege MskeyValue: [" + privMskeyValue + "]; Privilge Display Name: [" + privDisplayName + "]");

    var privMskeyValueArray = privMskeyValue.split(":");

    // check no of parts
    var privMskeyValueArrayLength = privMskeyValueArray.length;

    // privMskeyValueArray[0] = [PRIV]
    // privMskeyValueArray[1] = &lt;PRIV_TYPE&gt;
    // privMskeyValueArray[2] = &lt;REPOSITORY&gt;

    // privMskeyValueArray[3] = &lt;PRIVILEGE NAME&gt;
    // or
    // privMskeyValueArray[3...x] = &lt;PRIVILEGE NAME&gt;

    if (privMskeyValueArrayLength == 4) {
        privName = privMskeyValueArray[3];
    } else if (privMskeyValueArrayLength &gt; 4) {
        privName = privMskeyValueArray[3];

        for (var count = 4; count &lt; privMskeyValueArrayLength; count++) {
            privName = privName + ":" + privMskeyValueArray[count];
        }

        uErrMsg(debugMode, script + "Privilege name is [" + privName + "]");
    } else {
        uErrMsg(2, "Privilege MskeyValue has less than 4 parts: [" + privMskeyValue + ")]");
        uSkip(1, 2, "WRONG PRIVILEGE FORMAT");
    }

    if (privName == null || privName == "") {
        uErrMsg(2, "No privilege name found for privilege mskeyValue [" + privMskeyValue + ")]");
        uSkip(1, 2, "NO PRIVILEGE NAME FOUND");
    }

    // -------------------------------------------------------
    // get user assignments
    SQL = "SELECT mcThisMSKEY FROM idmv_link_simple_all WHERE mcOtherMSKEY = " + privMskey;

    privMemberString = uSelect(SQL);

    uErrMsg(debugMode, script + "Privilege [" + privDisplayName + "] has the following members: [" + privMemberString + "]");

    // privilege has no members
    if (privMemberString == "") {
        uErrMsg(debugMode, script + "Privilege [" + privDisplayName + "] has no assigned members - skip!");
        uSkip(1, 1, "PRIVILEGE HAS NO MEMBERS");
    }

    privMemberArray = privMemberString.split("!!");

    for (var i = 0; i &lt; privMemberArray.length; i++) {
        userMskey = privMemberArray[i];

        // get userMskeyValue
        userMskeyValue = uIS_sGetValue(userMskey, idStore, "MSKEYVALUE", 0);

        // no mskeyValue for user found
        if (userMskeyValue.indexOf("!ERROR:") != -1) {
            uErrMsg(2, script + "MskeyValue has not been found for mskey [" + userMskey + "] - retry!");
            uSkip(1, 2, "No MskeyValue found");
        }
        // mskeyValue for user found
        else {
            // get userDisplayName
            userDisplayName = uIS_sGetValue(userMskey, idStore, "DISPLAYNAME", 0);

            // get RepAccount
            userRepAccount = uIS_sGetValue(userMskey, idStore, "ACCOUNT" + repName, 0);

            uErrMsg(debugMode, script + "userMskeyValue: [" + userMskeyValue + "] ; userDisplayName: [" + userDisplayName + "] ; userRepAccount: [" + userRepAccount + "]");

            // no repaccount of user found
            if (userRepAccount == null || userRepAccount == "null" || userRepAccount == "") {
                uErrMsg(debugMode, script + "Account has not been found for user [" + userMskeyValue + "] - skip!");
            }
            // rep account has been found
            else {
                // search in temp Table if assigment is still there
                SQL = "SELECT COUNT(refid) FROM " + tmpTable + " WHERE refid = '" + userRepAccount + "' AND " + assignmentColumn + " LIKE '%" + privName + "'";

                var exists = uSelect(SQL);

                uErrMsg(debugMode, script + "SQL: [" + SQL + "] ; Assignment exists : [" + exists + "]");

                // no assignment found
                if (exists == 0) {
                    var auditID = uProvision(userMskey, taskIDAssignDelete, 0, 0, "DELETE:" + privMskey, 0);
                    uErrMsg(debugMode, script + "'AuditID: [" + auditID + "]");

                    if (auditID.indexOf("!ERROR:") != -1) {
                        uErrMsg(2, script + "Error while triggering deletion of assignment with user [" + userDisplayName + "(" + MskeyValue + ")] and privilege [" + privDisplayName + "]");
                    } else if (auditID &gt; 0) {
                        uErrMsg(1, script + "Audit ID [" + auditID + "] at [" + dateTime + "] : User [" + userDisplayName + " (" + userMskeyValue + ")] with account [" + userRepAccount + "] on repository [" + repName + "] got assigned privilege [" + privName + "] SUCCESSFULLY removed as triggered from backend!");
                    }
                }
            }
        }
    }

    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_handleDeletedAssignmentsFromBackend</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_handleInheritedAssignments

function sapc_handleInheritedAssignments(Par) {
    var nAssignment = '';
    var parArr = Par.split("&amp;&amp;");
    var oAssignment = parArr[0];
    var user = parArr[1];
    uWarning("---parArr: " + parArr);
    uWarning("---oAssignment: " + oAssignment);
    uWarning("---user: " + user);

    // Check if assignment has properties
    if (oAssignment.indexOf('}') != -1) {
        // Assignment has properties
        uWarning("---Assignment has properties---");
        var assArr = oAssignment.split('}');
        nAssignment = assArr[1];
    } else {
        // Assignment has no properties
        uWarning("---Assignment has no properties---");
        nAssignment = oAssignment;
    }

    // Remove "&lt;" and "&gt;" from assignment
    nAssignment = nAssignment.replace(/&lt;/g, "");
    nAssignment = nAssignment.replace(/&gt;/g, "");

    // Check if assignment is already present in IdS
    var sql = "SELECT COUNT (DISTINCT mcuniqueid) FROM idmv_link_ext WHERE mcthismskeyvalue='" + user + "' AND mcothermskeyvalue='" + nAssignment + "'";
    uWarning("---SQL: " + sql);
    var result = uSelect(sql);

    if (result == 0) {
        // No Assignment found - return complete assignment
        uWarning("Assignment [" + nAssignment + "] for user [" + user + "] not present in IDM. Will write assignment as given from backend!");
        return oAssignment;
    } else {
        // Assignment already presend - skip entry
        uWarning("Assignment [" + nAssignment + "] for user [" + user + "] already present in IDM. Will skip assignment!");
        uSkip(1);
    }

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_handleInheritedAssignments</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
* Script/Function	      : sapc_handleModifyValidity
* Category		      : provisioning script
* Short description	: handle change of validity period of assigned privilege
*----------------------------------------------------------------------------------------------------------------------------
*                       Date             Version     By                   Description of /reason for modification
* Initial Creation      2012-07-17       1.0         D047894, SAP         Initial creation of Script
*----------------------------------------------------------------------------------------------------------------------------
* Parameter(s) Cat.	: Entry
* Parameter(s)		: USER_MSKEYVALUE, USER_REP_ACCOUNT, USER_DISPLAYNAME, PENDING_OPERATION, REP_NAME, BAPI, PRIV_MSKEYVALUE
                                      LINK_VALIDFROM, LINK_VALIDTO
* Return value Cat.	: None  
* Return value		: ---
*----------------------------------------------------------------------------------------------------------------------------
* Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views, 
*					               system/job/repository/global constants/variables
*			      - inbuild function : uGetIDStore
*                       - inbuild function : uGetAuditID
*                       - inbuild function : uGetConstant
*                       - core constant    : SAPC_LOG_LEVEL
*                       - attribute        : ACCOUNT&lt;REP_NAME&gt;
*                       - inbuild function : Left
*                       - inbuild function : uReplaceString
*                       - inbuild function : uIS_sGetValue
*--------------------------------------------------------------------------------------------------------------------------*/
function sapc_handleModifyValidity(Par) {

    var script = "sapc_handleModifyValidity::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    // --------------------------------------------------------------
    // Input parameter and variables

    var pendingMskey = Par.get("PENDING_MSKEY");
    var pendingOperation = Par.get("PENDING_OPERATION");

    var userMskeyValue = Par.get("USER_MSKEYVALUE");
    var userRepAccount = Par.get("USER_REP_ACCOUNT");
    var userDisplayName = Par.get("USER_DISPLAYNAME");
    var userMskey = "";

    var repName = Par.get("REP_NAME");
    var repID = uGetRepositoryID();

    var privMskeyValue = Par.get("PRIV_MSKEYVALUE");
    var privMskey = "";

    var linkValidFrom = Par.get("LINK_VALIDFROM");
    if (linkValidFrom == null) linkValidFrom = "";
    var linkValidTo = Par.get("LINK_VALIDTO");
    if (linkValidTo == null) linkValidTo = "";

    var PackageID = uGetRepositoryPackageID();
    var TaskName = Par.get("TASKTOEXECUTE");
    var repPrivAssignTaskID = '' + uGetPackageTaskID(PackageID, TaskName);
    uInfo("TASKTOEXECUTE: " + repPrivAssignTaskID);
    if (logLevel &gt;= 2) uErrMsg(1, "repPrivAssignTaskID: " + repPrivAssignTaskID);

    var repPrivAssignTaskName = "";

    var idStore = uGetIDStore();
    var auditID = uGetAuditID();

    var privMskeyValueArray = null;
    var privPrefix = "";
    var privName = "";

    var retValue = "";

    if (logLevel &gt;= 2) uErrMsg(1, "Start of " + script + " with parameter: " + Par);

    // ----------------------------------------------------------------
    // privMskeyValue = [PRIV:&lt;PRIV_TYPE&gt;:&lt;REP_NAME&gt;:&lt;PRIV_NAME&gt;]
    privMskeyValueArray = privMskeyValue.split(":");

    // privMskeyValueArray[0]      = [PRIV]
    // privMskeyValueArray[1]      = &lt;PRIV_TYPE&gt;
    // privMskeyValueArray[2]      = &lt;REP_NAME&gt;
    // privMskeyValueArray[3 .. n] = &lt;PRIV_NAME&gt;

    privPrefix = privMskeyValueArray[0] + ":" + privMskeyValueArray[1] + ":" + privMskeyValueArray[2] + ":";
    privName = uReplaceString(privMskeyValue, privPrefix, "");

    if (privName == null || privName == "") {
        // Error message
        if (logLevel &gt;= 1 || debugMode == 1) uErrMsg(2, script + "No privilege name found for MSKEYVALUE [" + userMskeyValue + "]");
        uSkip(1, 1, "No privilege name found");
    }

    // ------------------------------------------------------------

    if (linkValidFrom != null &amp;&amp; linkValidFrom != "" &amp;&amp; linkValidFrom.indexOf("!ERROR") == -1) linkValidFrom = Left(linkValidFrom, 10); //YYYY-MM-DD
    if (linkValidTo != null &amp;&amp; linkValidTo != "" &amp;&amp; linkValidTo.indexOf("!ERROR") == -1) linkValidTo = Left(linkValidTo, 10); //YYYY-MM-DD

    userMskey = uIS_sGet(idStore, "MSKEYVALUE", userMskeyValue, true);

    // ---------------------------------------------------------------------

    if (repPrivAssignTaskID == "" || repPrivAssignTaskID == null) {
        // Error message
        if (logLevel &gt;= 1 || debugMode == 1) uErrMsg(2, script + "No provisioning task found for repository [" + repName + "] : [" + repPrivAssignTaskID + "]");
        uSkip(1, 1, "No provisioning task found");
    } else {
        // Debug message
        if (logLevel &gt;= 3 || debugMode == 1) uErrMsg(1, script + "Privision task ID for repository [" + repName + "] is : [" + repPrivAssignTaskID + "]");
        repPrivAssignTaskName = uGetTaskName(repPrivAssignTaskID);
    }

    // -----------------------------------------------------------------------

    // Debug message
    if (logLevel &gt;= 3 || debugMode == 1) uErrMsg(1, script + "Audit ID: [" + auditID + "] / Operation: [" + pendingOperation + "]: User [" + userDisplayName + "] with unique ID [" + userMskeyValue + "] and account [" + userRepAccount + "] in repository [" + repName + "] has changed validity period ([" + linkValidFrom + "] - [" + linkValidTo + "]) for privilege [" + privName + "] - trigger update of assignment in backend using provisioning task [" + repPrivAssignTaskName + "]");

    // -----------------------------------------------------------------------
    // execute provisioning

    retValue = uProvision(userMskey, repPrivAssignTaskID, auditID, repID, "Change Validity Period", 0);

    if (retValue.indexOf("!ERROR") != -1) {
        // Error message
        if (logLevel &gt;= 1 || debugMode == 1) uErrMsg(2, script + "Provisioning task [" + repPrivAssignTaskName + "(" + repPrivAssignTaskID + ")] has NOT been triggered successfully for user [" + userMskeyValue + "] and repository [" + repName + "] - set to failed");
        uSkip(1, 2, "Provisioning failed");
    } else {
        // Debug message
        if (logLevel &gt;= 3 || debugMode == 1) uErrMsg(1, script + "Provisioning task [" + repPrivAssignTaskName + "(" + repPrivAssignTaskID + ")] has successfully been triggered for user [" + userMskeyValue + "] and repository [" + repName + "]");
    }

    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_handleModifyValidity</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function      : sapc_handleSystemSpecificAttributes
 * Category             : local script
 * Short description    : This script transmits changes on global attributes (e.g. MX_ENCRYPTED_PASSWORD) to the local,
 *						: system specific attributes (e.g. SAPC_IDEN_REP_ENCRYPTED_PASSWORD_AD)
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.    : Entry (MX_PERSON)
 * Parameter(s)         :   MSKEY, MSKEYVALUE, DISPLAYNAME, ENTRYTYPE, SUPPORTED_REPOSITORIES
 * Return value Cat.    : /
 * Return value         : /
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies         : - sapc_core_script_functions
 *						: - sapc_getRepConstant
 *						: - %$pck.SAPC_REPOSITORIES_FOR_SYSTEM_SPECIFIC_ATTRIBUTES%
 *----------------------------------------------------------------------------------------------------------------------------
 * CL 2020-06-19 SAP NN	: 2020-06-19 SAP NN: SAPC_Attributes like SAPC_IDEN_LICENSE* attributes not working
 *	2021-07-13 SAP NN	: Dont throw error when attr has not been updated successfully, could just be an attribute that does not exist for that rep type (workaround, required fix to store rep spec attr list on rep type constant required
 *	2022-07-15 SAP NN	: Exclude ACCOUNTMETA when polling account attributes for user from DB, otherwise SCIM-based repositories will be handled twice
 *--------------------------------------------------------------------------------------------------------------------------*/

function sapc_handleSystemSpecificAttributes(Par) {

    var rds = sapc_core_scriptHeader("sapc_handleSystemSpecificAttributes", Par);

    var userMskey = "" + Par.get("MSKEY");
    var userMskeyValue = "" + Par.get("MSKEYVALUE");
    var userDisplayName = "" + Par.get("DISPLAYNAME");
    var userEntryType = "" + Par.get("ENTRYTYPE");
    var supportedReps = "" + Par.get("SUPPORTED_REPOSITORIES");
    var msg = "";

    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "User mskey: [" + userMskey + "] ; user mskeyValue: [" + userMskeyValue + "] ; user display name: [" + userDisplayName + "] ; user entry type: [" + userEntryType + "] ; auditID: [" + rds.auditID + "]");


    // ---------------------------------------------------------------------------------------------------------------------------------
    // 1 - check if userMskeyValue is available
    if (userMskeyValue == "" || userMskeyValue == null) {
        if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Entry with unique key [" + userMskey + "] seems to be deleted - skip process");
        uSkip(1, 1, "Entry is not available");
    }

    // ---------------------------------------------------------------------------------------------------------------------------------
    // 2 - check if entry is of type MX_PERSON
    if (userEntryType != "MX_PERSON") {
        if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Entry [" + userDisplayName + " (" + userMskeyValue + ")] is not an Identity - skip process");
        uSkip(1, 1, "Entry is no Identity");
    }

    // ---------------------------------------------------------------------------------------------------------------------------------
    // 3 - check if changed values are available
    // &lt;ATTRIBUTE NAME&gt;:&lt;OPERATION&gt;;&lt;NEW VALUE&gt;;&lt;OLD VALUE&gt;
    var auditValueString = uGetChangeValues(";", rds.auditID);

    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Audit ValueString: [" + auditValueString + "]");

    if (auditValueString == "" || auditValueString == null) {
        uErrMsg(1, rds.outPrefix + "NO changed values have been found for user [" + userDisplayname + " (" + userMskeyValue + ")]" + " on [" + auditValueString + "] for audit ID [" + rds.auditID + "]  - skipping process.");
        uSkip(1, 1, "User has no changed values");
    }


    // ---------------------------------------------------------------------------------------------------------------------------------
    // 4 - get attribute and operation from auditValues

    var auditValueArray1 = auditValueString.split(":");
    var attrName = auditValueArray1[0];

    var auditValueArray2 = auditValueArray1[1].split(";");
    var operation = auditValueArray2[0];

    if (rds.logLevel &gt;= 3) uErrMsg(1, rds.outPrefix + "Attribute name: [" + attrName + "] ; operation: [" + operation + "]");

    // ---------------------------------------------------------------------------------------------------------------------------------
    // 6 - get list of repositories where user has account

    var sql = "select AttrName from idmv_value_basic_active where MSKEY = " + userMskey + " and AttrName LIKE 'ACCOUNT%' and AttrName NOT LIKE 'ACCOUNTMETA%'";
    var repAllString = uSelect(sql);
    if (repAllString == null || repAllString == "" || repAllString == "null") {
        msg = "User has no accounts on repositories.";
        if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + msg);
        else uInfo(rds.outPrefix + msg);
        uSkip(1, 1, msg);
    }
    if (repAllString.indexOf("!Error") != -1) {
        msg = "Error when determining accounts for user: " + repAllString;
        if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + msg);
        else uInfo(rds.outPrefix + msg);
        uSkip(1, 2, msg);
    }
    repAllString = uReplaceString(repAllString, "|", "!!");
    repAllString = uReplaceString(repAllString, "ACCOUNT", "");

    if (rds.logLevel &gt;= 3) uErrMsg(1, rds.outPrefix + "All Repositories: [" + repAllString + "]");

    var repAllArray = repAllString.split("!!");

    // get value of attribute
    var attrValue = uIS_GetValue(userMskey, rds.masterIDS, attrName);

    // value can be deleted means null
    if (attrValue.indexOf("!ERROR:") != -1) attrValue = "";

    // ---------------------------------------------------------------------------------------------------------------------------------
    // change attribute for all valid repositories
    for (var i = 0; i &lt; repAllArray.length; i++) {
        repName = repAllArray[i];

        // check repository is enabled for system specific attributes
        repType = "" + sapc_getRepConstant(repName + "!!REPOSITORY_TYPE");
        if (supportedReps.indexOf(repType) == -1) {
            // repository not specified in constant %$pck.SAPC_REPOSITORIES_FOR_SYSTEM_SPECIFIC_ATTRIBUTES% to be enabled for system specific attributes.
            uErrMsg(1, rds.outPrefix + "Repository [" + repName + "] of type [" + repType + "] is not specified as enabled for system specific attributes" + " in cnostant SAPC_REPOSITORIES_FOR_SYSTEM_SPECIFIC_ATTRIBUTES [" + supportedReps + "]");
        } else {

            // define system spec attribute name
            // 2020-06-19 SAP NN: SAPC_Attributes like SAPC_IDEN_LICENSE* attributes not working
            var attrNameRep;
            if (attrName.indexOf("MX_") != -1) {
                attrNameRep = uReplaceString(attrName, "MX_", "SAPC_IDEN_REP_") + "_" + repName;
            } else if (attrName.indexOf("SAPC_IDEN_") != -1) {
                attrNameRep = uReplaceString(attrName, "SAPC_IDEN_", "SAPC_IDEN_REP_") + "_" + repName;
            } else {
                uError(rds.outPrefix + "unknown attribute type, dont know what to replace [" + attrName + "]");
                uSkip(1, 2, "unknown attribute type, dont know what to replace [" + attrName + "]");
            }

            if (operation == "INSERT" || operation == "MODIFY") {
                retValue = uIS_SetValue(userMskey, rds.masterIDS, attrNameRep, attrValue, "TaskID=" + rds.taskID, 0);

                if (retValue.indexOf("!ERROR:") != -1) {
                    //2021-07-13 SAP NN: Dont throw error when attr has not been updated successfully, could just be an attribute that does not exist for that rep type
                    //uErrMsg(2, rds.outPrefix + "Attribute [" + attrNameRep + " has not been updated successfully with value [" + attrValue + "].");
                    uErrMsg(1, rds.outPrefix + "Attribute [" + attrNameRep + " has not been updated successfully with value [" + attrValue + "]. It is possible that the repository type does not support that system specific attribute (e.g. license type for LDAP).");
                } else {
                    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Attribute [" + attrNameRep + "] updated with value [" + attrValue + "]");
                }
            } else if (operation == "DELETE") {
                retValue = uIS_SetValue(userMskey, rds.masterIDS, attrNameRep, "", "TaskID=" + rds.taskID, 0);

                if (retValue.indexOf("!ERROR:") != -1) {
                    uErrMsg(2, rds.outPrefix + "Attribute [" + attrNameRep + " has not been updated successfully with value [" + attrValue + "]");
                } else {
                    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Value of attribute [" + attrNameRep + "] removed");
                }

            } else uErrMsg(2, rds.outPrefix + "Unknown operation [" + operation + "]");
        }
    }
    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1657886150047</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_handleSystemSpecificAttributes</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function       : sapc_handleTimeDependentPrivilege
 * Category              : job script
 * Short description     : validate the validity of an assignment, skip assignment if already inherited
 *----------------------------------------------------------------------------------------------------------------------------
 *					Date		Version	By              Description of /reason for modification
 * Initial Creation	2011-11-11	1.0		d047894, SAP    initial creation of Script
 * Last Changed		2012-02-25	1.1		d047894, SAP    updated
 * Last Changed		2012-04-18	1.2		d047894, SAP    updated error handling
 * Last Changed		2012-06-21	1.3		d047894, SAP    updated
 * Last Changed		2012-06-22	1.4		d047894, SAP    added filter for outdated assignments
 * Last Changed		2012-07-07	1.5		d047894, SAP    changed direct assignment usage
 * Last Changed		2015-11-05	1.6		d050614, SAP	added logic to skip assignment if already inherited, aligned to RDS 8.0 standards
 * Last Changed		2021-06-30	1.7		d050614, SAP	added missing nolock in select query
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.     : String
 * Parameter(s)          : userId, repName, privType, privName
 * Return value Cat.     : String
 * Return value          : privilege Assignment
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies          : // to scripts, attributes, inbuilt functions, context variables, tables/views,
 *                                           system/job/repository/global constants/variables
 *                   - inbuilt function    : uGetConstant
 *                   - core constant       : SAPC_MASTER_IDS_ID
 *                   - inbuilt function    : uGetRepositoryName
 *                   - inbuilt function    : uIS_sGet
 *                   - inbuilt function    : uIS_sGetValue
 *                   - inbuilt function    : uGetConstant
 *                   - inbuilt function    : uSelect
 *                   - view                : idmv_link_simple_all
 *                   - inbuilt function    : Mid
 *                   - inbuilt function    : Left
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_handleTimeDependentPrivilege(Par) {
    var rds = sapc_core_scriptHeader("sapc_handleTimeDependentPrivilege", Par);

    var repName = "";
    var privType = "";
    var privAssign = "";
    var userID = "";
    var nolock = ("%$ddm.databasetype%" == "1") ? " with(nolock) " : " ";

    // format is: {ValidFrom=YYYY-MM-DD!!ValidTo=YYYY-MM-DD}&lt;ROLE_NAME&gt;

    // -------------------------------------------------------------------------------------------------
    // get parameters
    if (Par != null &amp;&amp; Par != "") {
        var parArray = Par.split("|");
        var parArrayLength = parArray.length;

        uErrMsg(0, rds.outPrefix + "Par: [" + Par + "] ; Array Length: [" + parArray + "]");

        if (parArrayLength == 4) {
            userID = parArray[0];
            repName = parArray[1];
            privType = parArray[2];
            privAssign = parArray[3];

            uErrMsg(0, rds.outPrefix + "UserID: [" + userID + "] ; repName: [" + repName + "] ; privType: [" + privType + "] ; privAssign: [" + privAssign + "]");
        } else {
            uErrMsg(1, rds.outPrefix + "WRONG PARAMETER");
            uSkip(1, 2, "WRONG PARAMETER");
        }

        // --------------------------------------------------
        // variable definition
        var repValidFrom = "";
        var repValidTo = "";

        var year = "";
        var month = "";
        var day = "";

        var linkPropertyString = "";
        var linkPropertyArray = null;
        var linkID = 0;
        var linkValidFrom = "";
        var linkValidTo = "";
        var linkState = -1;

        var propertyLinkID = "LINKID=";
        var propertyValidFrom = "VALIDFROM=";
        var propertyValidTo = "VALIDTO=";
        var propertyValidityPeriod = "";

        repName = uGetRepositoryName();

        var privPrefix = "PRIV:" + privType + ":" + repName + ":";
        var privName = "";
        var privMskeyValue = "";
        var privMskey = "";
        var privAssignment = "";

        var userMskey = "";
        var userMskeyValue = "";
        var userRepAccount = "";

        // ------------ get userMskeyValue via userMskey from userRepAccount
        userRepAccount = userID;
        userMskey = uIS_sGet(rds.masterIDS, "ACCOUNT" + repName, userRepAccount, true);

        // no userMskey found
        if (userMskey.indexOf("!ERROR:") != -1) {
            uErrMsg(2, rds.outPrefix + "No MSKEY found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update");
            uSkip(1, 1, "NO MSKEY FOUND");
        }
        // multiple userMskeys found
        else if (userMskey &lt; 0) {
            uErrMsg(2, rds.outPrefix + "Multiple ([" + userMskey + "]) MSKEYs found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update");
            uSkip(1, 1, "MULTIPLE MSKEYS FOUND");
        }

        // --------------- check assignment inherited first -----------------------------------------------

        var sql = "select mcUniqueID from idmv_link_ext " + nolock + " where mcThisMSKEY = " + userMskey + " and mcAttrName = 'MXREF_MX_PRIVILEGE' ";
        sql += " and mcAssignedInheritCount &gt; 0 and mcOtherMSKEYVALUE = '" + privPrefix + privName + "'";
        if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Checking inherited assignment for link with query [" + sql + "]");
        var mcUniqueIds = "" + uSelect(sql);
        if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Unique IDs of inherited assignments [" + mcUniqueIds + "]");

        if (mcUniqueIds != "") { // indirect assignments found
            uWarning(rds.outPrefix + "Privilege [" + privName + "] already indirectly assigned (inherited) to user [" + userMskey + "]");
            uSkip(1, 1, "Privilege already indirectly assigned");
        }


        // ------------------------------------------------------------------------------------------------
        // get priv

        if (privAssign != null &amp;&amp; privAssign.charAt(0) == '{') {
            var endTimeStr = privAssign.indexOf("}");

            if (endTimeStr != -1) {
                privAssignValidity = "" + privAssign.substring(0, endTimeStr + 1);
                privName = "" + privAssign.substring(endTimeStr + 1, privAssign.length + 1);


                // get valid from and valid to out of privValidity
                // {ValidFrom=YYYY-MM-DD!!ValidTo=YYYY-MM-DD}
                inputString = privAssignValidity;
                inputString = uReplaceString(inputString, "{", "");
                inputString = uReplaceString(inputString, "}", "");
                inputString = uReplaceString(inputString, "ValidFrom=", "");
                inputString = uReplaceString(inputString, "ValidTo=", "");

                inputArray = inputString.split("!!");

                repValidFrom = inputArray[0];
                repValidTo = inputArray[1];

                // ---------------------------------------------------------------------------------------------------------------------------------------
                // check validity of assignment

                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "UserID: [" + userID + "] ; Repository name: [" + repName + "] ; Privilege Type: [" + privType + "] ; Privilege name: [" + privName + "] ; Privilege valid from of repository: [" + repValidFrom + "] ; Privilege valid to of repository: [" + repValidTo + "]");

                // --------------------------------------------------
                // check if assignment does exist
                // if assignment exists and valid from or valid to are different from original 
                // LINKID has to be set to modify valid from and valid to of assignment 
                // example: LINKID=3456!!VALIDFROM=2010-06-01!!VALIDTO=2010-12-31
                // Direct Assignment if linkstate is 0, else with reporivioning

                userMskeyValue = uIS_sGetValue(userMskey, rds.masterIDS, "MSKEYVALUE", 0);

                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "User [" + userMskeyValue + "] with MSKEY: [" + userMskey + "]");

                // ------------
                // get privMskey
                privMskeyValue = privPrefix + privName;
                privMskey = uIS_sGet(rds.masterIDS, "MSKEYVALUE", privMskeyValue, true);

                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Privilege [" + privMskeyValue + "] with MSKEY: [" + privMskey + "]");

                if (privMskey.indexOf("!ERROR:") != -1) {
                    //privilege does not exist in ID Store
                    uErrMsg(2, rds.outPrefix + "For user [" + userMskeyValue + "] with account [" + userRepAccount + "] the privilege [" + privMskeyValue + "] can not be assigned as it does not exist in ID Store");
                    uSkip(1, 1, "PRIVILEGE MSKEYVALUE DOES NOT EXIST");
                }


                // --------------------------------------------------
                // Attribute Property VALIDFROM with 8 characters
                if (repValidFrom.length == 8) {
                    year = Mid(repValidFrom, 1, 4);
                    month = Mid(repValidFrom, 5, 2);
                    day = Mid(repValidFrom, 7, 2);

                    repValidFrom = year + "-" + month + "-" + day;
                }

                // --------------------------------------------------
                // Attribute Property VALIDTO
                if (repValidTo.length == 8) {
                    year = Mid(repValidTo, 1, 4);
                    month = Mid(repValidTo, 5, 2);
                    day = Mid(repValidTo, 7, 2);

                    repValidTo = year + "-" + month + "-" + day;
                }


                // --------------------------------------------------------------
                // --------------------------------------------------------------
                // check if validity period of assignment is currently valid
                // VALID TO has to be today or in the future

                // split repValidTo in year - month and day
                year = Mid(repValidTo, 1, 4);
                month = Mid(repValidTo, 6, 2);
                day = Mid(repValidTo, 9, 2);


                var currentDate = new Date();
                var endDate = new Date(year, (month - 1), day);

                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "currentDate: [" + currentDate + "]; endDate: [" + endDate + "] (" + year + "-" + month + "-" + day + ")");

                if (endDate &lt; currentDate) {
                    uErrMsg(1, rds.outPrefix + "Assignment for user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] with validity period ([" + repValidFrom + "] - [" + repValidTo + "]) is outdated and will be ignored - skip assignment");

                    uSkip(1, 1, "OUTDATED ASSIGNMENT");
                }


                // ------------
                // get link properties linkid, validfrom and valid to with userMskey and privMskey

                sql = "SELECT mcUniqueID, mcValidFrom, mcValidTo, mcLinkState FROM idmv_link_simple_all " + nolock;
                sql += " WHERE (mcThisMSKEY = " + userMskey + ") AND (mcOtherMSKEY = " + privMskey + ")";

                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "SQL: [" + sql + "]");

                // propertyString := "300|2011-10-07 00:00:00.0|2011-11-01 23:59:59.0|0"
                linkPropertyString = uSelect(sql);

                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "linkPropertyString: [" + linkPropertyString + "]");

                if (linkPropertyString != "") {
                    linkPropertyString = uReplaceString(linkPropertyString, "|", "!!");
                    linkPropertyArray = linkPropertyString.split("!!");
                    linkID = linkPropertyArray[0];

                    // of not defined value is &gt;null&lt;
                    linkValidFrom = linkPropertyArray[1];

                    if (linkValidFrom == "null" || linkValidFrom == null) linkValidFrom = "";
                    else linkValidFrom = Left(linkValidFrom, 10);

                    linkValidTo = linkPropertyArray[2];

                    if (linkValidTo == "null" || linkValidTo == null) linkValidTo = "";
                    else linkValidTo = Left(linkValidTo, 10);

                    linkState = linkPropertyArray[3];

                    if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Link ID: [" + linkID + "]; Valid From: [" + linkValidFrom + "] ; Valid To: [" + linkValidTo + "] ; Link State: [" + linkState + "]");
                }
                // assignment does not exist yet
                else {
                    linkID = 0;

                    if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "No assignment exists for user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "]");
                }


                // ---------------------------------------------------------------------------------------------------------
                // Check if linkID exists
                propertyValidFrom = propertyValidFrom + repValidFrom;
                propertyValidTo = propertyValidTo + repValidTo;

                // If link does not exist, add assignment
                if (linkID == "") {
                    uErrMsg(1, rds.outPrefix + "Assignment for user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] with validity period ([" + repValidFrom + "] - [" + repValidTo + "]) does not exist in ID Mgmt so far - add assignment");

                    propertyLinkID = "";
                }
                // If link does exist, check if valid from or valid to has been changed
                else {
                    if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "linkID: [" + linkID + "]");

                    //check if valid from or rep equals valid from if link
                    if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + " repValidFrom: [" + repValidFrom + "] ; linkValidFrom: [" + linkValidFrom + "] ; repValidTo: [" + repValidTo + "] ; linkValidTo: [" + linkValidTo + "]");

                    if ((!linkValidFrom.equals(repValidFrom)) || (!linkValidTo.equals(repValidTo))) {
                        uErrMsg(1, rds.outPrefix + "Assignment of user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] with current validity period ([" + linkValidFrom + "] - [" + linkValidTo + "]) needs to be updated with new validity period ([" + repValidFrom + "] - [" + repValidTo + "]) - update assignment");

                        propertyLinkID = propertyLinkID + linkID;
                    } else {
                        if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "No changes in assignment of user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] with validity period ([" + linkValidFrom + "] - [" + linkValidTo + "]) - cancel process!");
                        uSkip(1, 1, "No changes in assignment");
                    }
                }

                // --------------------------------------------------
                // build up property

                // independent of link state, as this job is only used for initial load and update no provision should ever be triggered
                // if linkstate = 0: Immediate Assignment without provisioning / if linkState = 1: apply assignment again with provisioning

                //if(linkState == 0)     
                propertyValidityPeriod = "{DIRECT_REFERENCE=1!!";
                //else                    propertyValidityPeriod = "{";

                if (propertyLinkID != "") {
                    propertyValidityPeriod = propertyValidityPeriod + propertyLinkID + "!!";
                }

                if (repValidFrom != "") {
                    propertyValidityPeriod = propertyValidityPeriod + propertyValidFrom;

                    if (repValidTo != "") propertyValidityPeriod = propertyValidityPeriod + "!!" + propertyValidTo + "}";
                    else propertyValidityPeriod = propertyValidityPeriod + "}";
                } else {
                    if (propertyValidTo != "") propertyValidityPeriod = "{" + propertyValidFrom + "}";
                }

                // --------------------------------------------------------
                // to get the full privilegeAssignment
                privAssignment = propertyValidityPeriod + "&lt;" + privPrefix + privName + "&gt;";

                if (rds.loglevel &gt;= 2) uErrMsg(1, rds.outPrefix + "privilege Assignment: [" + privAssignment + "]");

                return privAssignment;

            } else {
                uError("Invalid time pattern detected. Time pattern not ending with character }: " + privAssign);
                uSkip(1, 2, "INVALID TIME PATTERN");
            }
        } else {
            uError("Invalid time pattern detected. Time pattern not starting with character {: " + privAssign);
            uSkip(1, 2, "INVALID TIME PATTERN");
        }
    }

    return "";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1624972207827</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_handleTimeDependentPrivilege</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * 2021-06-30 SAP NN:	Similar to sapc_handleTimeDependentPrivilege but for user to privassignment (upsite down) and no validities
 * 2022-07-13 SAP NN:	using uSkip and delta togehter causes deletion of assignment when trying to skip -&gt; dont use uSkip
 *						Checking whether assignment between user and privilege already exists from indirect assignment
 * In:					same as sap_scim_getEntryMskeyValue: (ACCOUNT%$rep.$NAME%!!%id%!!%userName%!!%$IDSID%) + !!&lt;privMSKEYVALUE&gt;
 * Dependency:			sap_scim_getEntryMskeyValue
 */

function sapc_handleTimeInDependentUserToPrivAssignments(Par) {

    var nolock = ("%$ddm.databasetype%" == "1") ? " with(nolock) " : " ";
    var scimUserId = sap_scim_getEntryMskeyValue(Par);

    var parArray = Par.split("!!");
    var privMSKEYVALUE = parArray[4];

    var sql = "select mcUniqueID from idmv_link_ext " + nolock + ", idmv_entry_simple " + nolock + " ";
    sql += " where UPPER(mcMSKEYVALUE) = UPPER('" + scimUserId + "') and mcIdStore = 1 ";
    sql += " and mcMSKEY = mcThisMSKEY and mcAttrName = 'MXREF_MX_PRIVILEGE' and mcOtherMSKEYVALUE = '" + privMSKEYVALUE + "'";

    uInfo("sapc_handleTimeInDependentUserToPrivAssignments: SQL Query to check whether priv [" + privMSKEYVALUE + "] is already assigned to user [" + scimUserId + "]: [" + sql + "]");

    var uniqueId = uSelect(sql);

    uInfo("sapc_handleTimeInDependentUserToPrivAssignments: UniqueID of assignment is [" + uniqueId + "]");

    if (uniqueId &amp;&amp; uniqueId.indexOf("!ERROR") == -1) {
        uWarning("sapc_handleTimeInDependentUserToPrivAssignments: Priv [" + privMSKEYVALUE + "] is already assigned to user [" + scimUserId + "] with unique ID [" + uniqueId + "] --&gt; Skipping Assignment");
        // 2022-07-13 SAP NN:	using uSkip and delta togehter causes deletion of assignment when trying to skip -&gt; dont use uSkip
        // uSkip(1, 1, "Already Assigned");
        return "{A}";
    } else {
        uInfo("sapc_handleTimeInDependentUserToPrivAssignments: Priv [" + privMSKEYVALUE + "] is not assigned to user [" + scimUserId + "] yet --&gt; returning user MSKEYVALUE");
    }

    return "{A}{DIRECT_REFERENCE=1}&lt;" + scimUserId + "&gt;";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1658136771347</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_handleTimeInDependentUserToPrivAssignments</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_java_handleBoolean

function sapc_java_handleBoolean(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    var rds = sapc_core_scriptHeader("sapc_java_handleBoolean", Par);

    var result = "";

    if (Par == null || Par == '' || Par == "" || Par == "0" || Par == "false" || Par == "FALSE") {
        result = ""; // interpreted as Boolean-False		
    } else {
        // if a value exists: interpreted as Boolean-True
        result = 1;
    }

    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_java_handleBoolean</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function      : sapc_jobErrorHandler
 * Short description    : Writing Job Errors into log file in DSE folder
 *----------------------------------------------------------------------------------------------------------------------------
 * Output               : "%$ddm.ddmpath%/SAPC_Error_Log.txt"
 *----------------------------------------------------------------------------------------------------------------------------*/

function sapc_jobErrorHandler(Par) {

    thisErr = uGetErrorInfo();
    var errMsg = "";
    var operation = "";
    var attr = thisErr.firstAttr();
    while (attr != null) {
        if (attr.getKey().indexOf("xception") != -1) {
            operation = attr.getKey();
            errMsg = "" + attr.getValue();
            // cutting of err_ModException=com.sap.idm.ic.ToPassException: ToIDStore.modEntry failed updating entry 'PRIV:ROLE:BSTCLNT400:ZP:FI_E_BELEG_400_AN'. IDStore returned error message: "Entry does not exist" when fetching entry
            errMsg = errMsg.substring(errMsg.indexOf(" '") + 1);
            attr = null;
        } else {
            attr = thisErr.nextAttr();
        }
    }

    var textFilePath = "%$ddm.ddmpath%/SAPC_Error_Log.txt";
    var finalErrorString = "";
    thisErr = uGetErrorInfo();
    uInfo("Found Error: " + thisErr);
    attr = thisErr.firstAttr();
    finalErrorString += "%$ddm.datetime8601%:CATEGORY:" + thisErr.get("err_category") + ":OPERATION:" + operation + ":MESSAGE:" + errMsg;
    // add line break
    finalErrorString += uFromHex("0D0A");
    uInfo("Appending final string [" + finalErrorString + "] + to file [" + textFilePath + "].");
    uToFile(textFilePath, finalErrorString, true);

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_jobErrorHandler</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ldapConnectionCheck

function sapc_ldapConnectionCheck(Par) {
    var rds = sapc_core_scriptHeader("sapc_ldapConnectionCheck", Par);

    var repID = uGetRepositoryID();
    var repName = uGetRepositoryName();
    var repDisplayName = uGetConstant("rep.SAPC_REP_DISPLAYNAME");
    var repHost = uGetConstant("rep.LDAP_HOST");

    if (stopJob == 0) {
        uWarning(rds.outPrefix + "Connection to Active Directory [" + repName + "] - [" + repDisplayName + "] on server [" + repHost + "] established successfully");
    } else {
        uError(rds.outPrefix + "Connection to Active Directory [" + repName + "] - [" + repDisplayName + "] on server [" + repHost + "] has NOT been established");
        uStop("Connection failed");
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ldapConnectionCheck</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ldapConnectionCheckInitFlag

function sapc_ldapConnectionCheckInitFlag(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    stopJob = 1;

    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ldapConnectionCheckInitFlag</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_ldapConnectionCheckSetFlag

function sapc_ldapConnectionCheckSetFlag(Par) {
    stopJob = 0;

    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_ldapConnectionCheckSetFlag</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_localStandardScriptsContainer
function sapc_localStandardScriptsContainer(Par) {
    uErrMsg(1, "This is just a dummy");
}


/** SAP ABAP Begin **/
/** ======================================================================================================== **/

function sap_abap_checkAcademicTitleValue(Par) {
    // Import required Java types.
    importClass(java.util.HashMap);

    uInfo("salutation value check is called with " + Par);

    var valueHelpData = new HashMap(2);
    valueHelpData.put("attrname", "MX_ACADEMIC_TITLE");
    valueHelpData.put("key", Par.get("title_key"));
    // Locale is not relevant for academic titles: valueHelpData.put("locale"  , Par.get("xxx"));

    sap_abap_skipExistingValueHelpEntry(valueHelpData);

    return Par;
}


function sap_abap_checkAdminValue(Par) {
    // Import required Java types.
    importClass(java.util.HashMap);

    uInfo("salutation value check is called with " + Par);

    var valueHelpData = new HashMap(3);
    valueHelpData.put("attrname", "MX_ADMIN_UNIT");
    valueHelpData.put("key", Par.get("usergroup"));
    valueHelpData.put("locale", Par.get("langu"));

    sap_abap_skipExistingValueHelpEntry(valueHelpData);

    return Par;
}


function sap_abap_checkGroupValue(Par) {
    // Import required Java types.
    importClass(java.util.HashMap);

    uInfo("salutation value check is called with " + Par);

    var valueHelpData = new HashMap(3);
    valueHelpData.put("attrname", "MX_USER_CATEGORY");
    valueHelpData.put("key", Par.get("usergroup"));
    valueHelpData.put("locale", Par.get("langu"));

    sap_abap_skipExistingValueHelpEntry(valueHelpData);

    return Par;
}


// Main function: sap_abap_checkNull
//PAR looks like attribute!!key!!value!![language](optional)
//for example MX_SALUTATION!!0001!!Mr.!!en

//This script returns either the value specified or if it is emtpy or null
//- for localized values: " " (space)
//- for non-localized values: the key
function sap_abap_checkNull(Par) {
    var array = Par.split("!!");

    var attribute = array[0];
    var key = array[1];
    var value = array[2];
    var language = null;

    if (array.length &gt; 3 &amp;&amp; array[3] != "") {
        language = array[3];
    }

    if (value == null || value == "") {
        var msg = "sap_abap_checkNull: Value for attribute " + attribute + " and key " + key + " is empty or null.";
        if (language != null) {
            msg = msg + " (Language: " + language + "): Using \" \" as value.";
            value = " ";
        } else {
            msg = msg + " Using key as value.";
            value = key;
        }
        uInfo(msg);
    }

    return value;
}


function sap_abap_checkPrefixValue(Par) {
    // Import required Java types.
    importClass(java.util.HashMap);

    uInfo("salutation value check is called with " + Par);

    var valueHelpData = new HashMap(2);
    valueHelpData.put("attrname", "MX_NAME_PREFIX");
    valueHelpData.put("key", Par.get("prefix_key"));
    valueHelpData.put("locale", Par.get("langu"));

    sap_abap_skipExistingValueHelpEntry(valueHelpData);

    return Par;
}


function sap_abap_checkPrinterValue(Par) {
    // Import required Java types.
    importClass(java.util.HashMap);

    uInfo("salutation value check is called with " + Par);

    var valueHelpData = new HashMap(2);
    valueHelpData.put("attrname", "MX_PRINTERSETTINGS_SPLD");
    valueHelpData.put("key", Par.get("padest"));
    // Locale is not relevant for printer settings: valueHelpData.put("locale"  , Par.get("xxx"));

    sap_abap_skipExistingValueHelpEntry(valueHelpData);

    return Par;
}


function sap_abap_checkSalutationValue(Par) {
    // Import required Java types.
    importClass(java.util.HashMap);

    uInfo("salutation value check is called with " + Par);

    var valueHelpData = new HashMap(2);
    valueHelpData.put("attrname", "MX_SALUTATION");
    valueHelpData.put("key", Par.get("title"));
    valueHelpData.put("locale", Par.get("langu"));

    sap_abap_skipExistingValueHelpEntry(valueHelpData);

    return Par;
}


function sap_abap_checkSupplementValue(Par) {
    // Import required Java types.
    importClass(java.util.HashMap);

    uInfo("salutation value check is called with " + Par);

    var valueHelpData = new HashMap(2);
    valueHelpData.put("attrname", "MX_TITLE_SUPPLEMENT");
    valueHelpData.put("key", Par.get("title_key"));
    valueHelpData.put("locale", Par.get("langu"));

    sap_abap_skipExistingValueHelpEntry(valueHelpData);

    return Par;
}


// Main function: sap_abap_skipExistingValueHelpEntry

// Check whether the provided value help entry already exists.
// If yes, skip the entry.
//
// Parameter: Map containing the following keys:
// - attrname: Name of the identity store attribute
// - key: Key of the value help entry
// - locale: Locale of the text that is provided for the value help entry
function sap_abap_skipExistingValueHelpEntry(dseEntry) {
    UserFunc.uInfo("Value help check is called with the following parameters: '" + dseEntry + "'");

    var attrname = dseEntry.get("attrname");
    var valkey = dseEntry.get("key");
    var vallocale = dseEntry.get("locale");

    var tablename = sap_core_getDBTablePrefix() + "mxi_attrValueHelp";

    var sql = "select count(*) from " + tablename + " where ValID = '" + attrname + "'";
    if (valkey != null &amp;&amp; valkey != "") {
        sql = sql + " AND ValKey = '" + valkey + "'";
    }
    if (vallocale != "" &amp;&amp; vallocale != null) {
        sql = sql + " AND ValLocale = '" + vallocale + "'";
    }

    var result = UserFunc.uSelect(sql);

    UserFunc.uInfo("SQL query '" + sql + "' for matching value help entries found " + result + " record(s).");
    if (result == 0) {
        UserFunc.uInfo("Value help entry " + valkey + " for attribute " + attrname + " and locale " + vallocale + " does not exist and will be created.");
    } else {
        UserFunc.uInfo("Value help entry " + valkey + " for attribute " + attrname + " and locale " + vallocale + " already exists, so it will be skipped.");
        UserFunc.uSkip(1);
    }
}


// Main function: sap_setRequiredPrivilege
function sap_setRequiredPrivilege(Par) {
    values = Par.split("|");
    if (values.length != 3) {
        uErrMsg(1, "Invalid paramters");
        return;
    }
    mskey = values[0];
    stackedrepositories = values[1];
    template = values[2];

    uErrMsg(1, "Stacked repositories:" + stackedrepositories);
    uErrMsg(1, "Template:" + template);

    repname = stackedrepositories.split("!!");

    outvalue = "";
    for (i = 0; i &lt; repname.length; i++) {
        priv = repname[i];
        privfixed = uReplaceString(template, "&lt;REPLACE&gt;", priv);
        if (outvalue.length == 0) {
            outvalue = privfixed;
        } else {
            outvalue = outvalue + "|" + privfixed;
        }
    }
    return outvalue;
}


// Main function: sap_getRepositoryType
function sap_getRepositoryType(Par) {
    if (Par != null &amp;&amp; Par != "" &amp;&amp; Par == "DUALABAP") {
        return "ABAP";
    } else {
        return Par;
    }
}


// Main function: sap_getPrivilegeType
function sap_getPrivilegeType(Par) {
    if (Par != null &amp;&amp; Par != "" &amp;&amp; Par == "DUALABAP") {
        return "ABAP";
    } else {
        return Par;
    }
}


// Main function: sap_abap_generateSelectValidityStatement
function sap_abap_generateSelectValidityStatement(Par) {
    dbtype = "%$ddm.databasetype%";
    var nolock = "";
    var convertDate = "";
    if (dbtype == 1) {
        nolock = "WITH (NOLOCK)";
    }
    if (Par == "1900-01-01") {
        if (dbtype == 1 || dbtype == 9) {
            convertDate = "mcDirValidFrom=convert(datetime,'1900-01-01T00:00:00')";
        } else {
            convertDate = "mcDirValidFrom=to_date('1900-01-01 00:00:00','YYYY-MM-DD HH24:MI:SS')";
        }
    } else {
        if (dbtype == 1 || dbtype == 9) {
            convertDate = "mcDirValidTo=convert(datetime,'9999-12-31T23:59:59')";
        } else {
            convertDate = "mcDirValidTo=to_date('9999-12-31 23:59:59', 'YYYY-MM-DD HH24:MI:SS')";
        }
    }

    return "SELECT mcUniqueId,mcThisMskeyvalue,mcOtherMskey FROM idmv_link_ext2 " + nolock + "WHERE mcAttrName='MXREF_MX_PRIVILEGE' AND mcLinkType=2 AND mcAssignedDirect=1 AND " + convertDate;
}


// Main function: sap_getAccountPrivilegesWithDelimiter

function sap_getAccountPrivilegesWithDelimiter(Par) {
        var repositoryNames = sap_core_getRepositoryNamesByRepositoryType(Par);
        var result = "";
        if (repositoryNames != null) {
            for (var i = 0; i &lt; repositoryNames.length; i++) {
                if (result != "") {
                    result = result + "|";
                }
                result = result + "&lt;PRIV:" + repositoryNames[i] + ":ONLY&gt;";
            }
        }
        return result;
    }
    /** ======================================================================================================== **/
    /** SAP ABAP End **/


/** SAP Business Suite Begin **/
/** ======================================================================================================== **/

// 2015-12-07 D050614: made all 4 scripts in package BS public

// Main function: sap_stopMsSqlPass

function sap_bs_stopMsSqlPass(Par) {

    var dbType = "%$ddm.databasetype%";

    //stop this pass if the DB type is not MS-SQL (1)

    if (dbType != 1) { //MS-SQL 
        uSkip(2, "Pass skipped due to DB type which is not MS-SQL");
    }

}

// Main function: sap_stopOraclePass

function sap_bs_stopOraclePass(Par) {

    var dbType = "%$ddm.databasetype%";

    //skip this pass if the db type is MS SQL (1)

    if (dbType == 1) { //MS-SQL 
        uSkip(2, "Pass skipped due to DB type which is not MS-SQL");
    }
}

/** ======================================================================================================== **/
/** SAP Business Suite End **/


/** SAP AS Java Begin **/
/** ======================================================================================================== **/



// Main function: sap_asj_getLocaleLanguage
function sap_asj_getLocaleLanguage(Par) {
    // Main function: sap_getLocaleLanguage
    // Split input parameter Par which contains the string representation of 
    // Java Locale into its parts: language_country_variant
    // this function returns: language
    var result = "";
    if (Par != null &amp;&amp; Par != '' &amp;&amp; Par != "") {
        var stringArray = Par.split("_");
        if (stringArray.length &gt; 0) {
            // return country part
            result = stringArray[0];
        }
    }
    return result;
}


// Main function: sap_asj_getLocaleVariant
function sap_asj_getLocaleVariant(Par) {
    // Split input parameter Par which contains the string representation of 
    // Java Locale into its parts: language_country_variant
    // this function returns: variant
    var result = "";
    if (Par != null &amp;&amp; Par != '' &amp;&amp; Par != "") {
        var stringArray = Par.split("_");
        if (stringArray.length &gt; 2) {
            // return variant part 
            result = stringArray[2];
        }
    }
    return result;
}


// Main function: sap_asj_checkSPMLValidDate
function sap_asj_checkSPMLValidDate(Par) {
    // default input Par looks like this:
    // ISO 8601 format:
    // YYYY-MM-DDThh:mm:ss 


    if (Par == null || Par == "") {
        return "";
    }
    // validate year
    var validate_year = new String(Par);
    if (validate_year.substring(0, 4) == "0000") {
        return "";
    } else {
        var year = parseInt(validate_year.substring(0, 4), 10);
        if (year &lt; 1753 || year == 2500) {
            // MS-SQL supports dates starting with Jan 1st 1753. 
            // (1753 was the year when Sweden, as the last european country switched to the Gregorian calendar).
            // ISDATE is used in stored procedure

            // The year 2500 is the default account expiration year in AS JAVA
            return "";
        } else {
            // assuming that Par is already in SPML format

            return Par;
        }
    }
}

/** ======================================================================================================== **/
/** SAP AS Java End **/


/** ADS Begin **/
/** ======================================================================================================== **/

function sap_ad_checkTable(Par) {
    var dbType = "%$ddm.databasetype%";

    var repositoryName = uGetRepositoryName();
    var outString;
    if (dbType == 1) // MSSQL
    {
        outString = uSelect("select table_name from information_schema.Tables where table_name = 'SAP" + repositoryName + "GROUPASSIGN'");
    } else if (dbType == 9) { // ASE
        outString = uSelect("select name from sysobjects where type in ('U','V') and name = 'SAP" + repositoryName + "GROUPASSIGN'");

    } else { // Oracle+DB2
        outString = uSelect("select table_name from all_tables where table_name = 'SAP" + repositoryName + "GROUPASSIGN'");
    }
    uInfo("Found table: " + outString);

    if (outString == null || outString == "") {
        uSkip(2);
    }
}


function sap_ad_cleanMemberOf(Par) {
    importClass(java.lang.StringBuffer);

    var distinguishedName = Par.get("distinguishedName");
    uInfo("sap_ad_cleanMemberOf:: DN: " + distinguishedName);

    var memberOf = Par.get("memberOf");
    if (memberOf == null || memberOf == "") {
        return Par; // nothing to do
    }
    var memberOfArr = memberOf.split("\\|");

    uInfo("sap_ad_cleanMemberOf:: memberOf old:" + memberOf);
    memberOf = sap_removeMemberOfNotPartOfStartingPointGroups(memberOfArr);
    uInfo("sap_ad_cleanMemberOf:: memberOf new:" + memberOf);

    Par.put("memberOf", memberOf);

    return Par;
}


function sap_removeMemberOfNotPartOfStartingPointGroups(memberOfArr) {
    var repositoryId = uGetRepositoryID();
    var logValue = true;
    var isMandatory = true;
    var resultSB = new StringBuffer();

    if (repositoryId == null || repositoryId == "") {
        uError("repository id could not be obtained");
        uSkip(2);
    }
    var startingPointGroupsLower = uGetConstant("rep.LDAP_STARTING_POINT_GROUPS").toLowerCase();

    var firstElement = true;
    for (var i = 0; i &lt; memberOfArr.length; i++) {
        var singleMemberOf = memberOfArr[i];
        var singleMemberOfLowerCase = singleMemberOf.toLowerCase();
        if (singleMemberOfLowerCase.indexOf(startingPointGroupsLower) != -1) {
            if (!firstElement) {
                resultSB.append("|");
            }
            resultSB.append(singleMemberOf);
        } else {
            uInfo("sap_ad_cleanMemberOf:: Skip " + singleMemberOf + ". It is not under the path specified for the repository constant LDAP_STARTING_POINT_GROUPS.");
        }
        firstElement = false;
    }

    return String(resultSB); // must be casted explicitly to String
}



/** ======================================================================================================== **/
/** ADS End **/


/** General Begin **/
/** ======================================================================================================== **/

function sap_findPrimaryDeltaObject(Par) {
    var tmp = Par.split("!!");
    return tmp[0];
}


function sap_findSecondaryDeltaObject(Par) {
    var tmp = Par.split("!!");
    return tmp[1];
}


// required by error message, could not find script anywhere -&gt; implemented proxy
function sap_core_getDatabasePrefix() {
    return sap_core_getDBTablePrefix();
}


// Main function: sap_noop
function sap_noop(Par) {
    return "";
}

/** ======================================================================================================== **/
/** General End **/</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_localStandardScriptsContainer</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	      : sapc_logCurrentValue
 * Category              : provision script
 * Short description	: Writes the current user mskeyvalue and the current repository if available
 *                         to the log (if log level is set to 2)
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: String
 * Parameter(s)		: MSKEYVALUE|REPNAME
 * Return value Cat.	: String
 * Return value		: userMskeyValue
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views,
 *					               system/job/repository/global constants/variables
 *		            - inbuild function : sapc_core_getPackageConstant
 *                       - core package constant  : SAPC_LOG_LEVEL
 *                       - table            : MXI_ATTRIBUTES
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_logCurrentValue(Par) {
    var script = "sapc_logCurrentValue::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data
    var parArray = Par.split("|");
    var userMskeyValue = parArray[0];

    if (parArray[1] != "" &amp;&amp; parArray[1] != null) {
        var repName = parArray[1];

        // Write data to the log
        if (repName != "" &amp;&amp; repName != null) {
            if (logLevel &gt;= 2) {
                uErrMsg(1, script + "Current user mskeyValue: " + userMskeyValue + "; current Repository: " + repName);
            }
        } else {
            if (logLevel &gt;= 2) {
                uErrMsg(1, script + "Current user mskeyValue: " + userMskeyValue);
            }
        }

    }

    return userMskeyValue;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_logCurrentValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_prepareSQLStatement

function sapc_prepareSQLStatement(Par) {

    var dbType = "%$ddm.databasetype%";
    var script = "sapc_prepareSQLStatement::";

    // Processing
    if (dbType == 1) { // MS-SQL 
        return Par;
    } else if (dbType == 2) { // ORACLE
        var returnValue = uReplaceString(Par, "AS", "");
        return returnValue;
    } else {
        UserFunc.uErrMsg(2, script + " SQL Task: invalid database type: " + dbType);
        // return error message and empty result
        return "";
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_prepareSQLStatement</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * 2021-05-03 SAP NN:	Place this script as initialization script on a process task as breakpoint
 * Usage:	Create Config Item of name SAPC_CONFIGITEM:DEBUG:SAPC_DEBUG_MODE with single value TRUE
 *				(Type = DEBUG, Key = SAPC_DEBUG_MODE)
 *			Create Config Item of name SAPC_CONFIGITEM:DEBUG:SAPC_DEBUG_NEXT_STEP with single value TRUE
 *				(Type = DEBUG, Key = SAPC_DEBUG_NEXT_STEP)
 *				when you want to get to the next step.
 *				The value will be changed to FALSE when the script continues to next step
 */

function sapc_processDebugger(Par) {

    var debMode = local_getConfigItemValue("SAPC_DEBUG_MODE");
    if (debMode &amp;&amp; (debMode.toUpperCase() == "TRUE" || debMode == 1)) {

        var goOn = false;

        // loop until constant SAPC_DEBUG_NEXT_STEP is set to true
        do {

            var debNextStep = local_getConfigItemValue("SAPC_DEBUG_NEXT_STEP");
            if (debNextStep &amp;&amp; (debNextStep.toUpperCase() == "TRUE" || debNextStep == 1)) {

                // revert SAPC_DEBUG_NEXT_STEP to false to stop at next breakpoint
                local_setConfigItemValue("SAPC_DEBUG_NEXT_STEP", "");
                goOn = true;
            }

            uSleep(1000);

        }
        while (!goOn);

    }

    return Par;
}

function local_getConfigItemValue(aConfItem) {

    var confMSKEYVALUE = "SAPC_CONFIGITEM:DEBUG:" + aConfItem;
    var confMSKEY = uIS_Get(uGetIDStore(), confMSKEYVALUE);
    var value = uIS_nGetValues(confMSKEY, "SAPC_CONFIGITEM_VALUE", "|");

    if (!value) {
        //No value
        uWarning("sapc_processDebugger: [" + confMSKEYVALUE + "] is not defined.");
        return false;
    } else if (value.indexOf("|") &gt; -1) {
        //Multivalue
        uWarning("sapc_processDebugger: [" + confMSKEYVALUE + "] is multivalue.");
        return false;
    } else {
        return value;
    }
}

function local_setConfigItemValue(aConfItem, aValue) {

    var confMSKEYVALUE = "SAPC_CONFIGITEM:DEBUG:" + aConfItem;
    var confMSKEY = uIS_Get(uGetIDStore(), confMSKEYVALUE);
    uIS_SetValue(confMSKEY, uGetIDStore(), "SAPC_CONFIGITEM_VALUE", aValue);
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1622544711040</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_processDebugger</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_reconCombinedSQLGeneric
 
function sapc_reconCombinedSQLGeneric(Par){ 
		//Example calling DSE internal function 
		//uStop("Terminated by user");
 
		return Par.toUpperCase(); 
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1702211782827</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_reconCombinedSQLGeneric</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_recon_checkEmptyValue

function sapc_recon_checkEmptyValue(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    if (Par == "") {
        Par = sapc_core_getPackageConstant("SAPC_RECON_NO_VALUE!!com.sap.rds.idm.mass.administration");
    }
    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_recon_checkEmptyValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_recon_generateCompareQuery

function sapc_recon_generateCompareQuery(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");
    //Input Format: attr1,attr2,attr3
    //Output Format: src.attr1 AS attr1_src, src.attr2 AS attr2_src, src.attr3 AS attr3_src,
    //				 idm.attr1 AS attr1_idm, idm.attr2 AS attr2_idm, idm.attr3 AS attr3_idm

    //Output Format: (src.attr1 != idm.attr1) OR (src.attr2 != idm.attr2) OR (src.attr3 != idm.attr3)

    attributeList = Par.trim();
    //attributeList = uReplaceString(attributeList, " ", "");

    attributeArray = attributeList.split(",");

    comparyQuery = "";

    for (i = 0; i &lt; attributeArray.length; i++) {
        thisAttribute = attributeArray[i].trim();
        if (thisAttribute != "") {
            thisAttrCompare = "(src." + thisAttribute + " != idm." + thisAttribute + ")";
            comparyQuery += thisAttrCompare + " OR ";
        } else {
            uWarning("Empty attribute found in the attribute list!");
        }
    }

    comparyQuery = comparyQuery.substring(0, comparyQuery.length - 4);

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Write current data to the log
    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, "comparyQuery: " + comparyQuery);
    }

    return comparyQuery;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_recon_generateCompareQuery</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_recon_generateHTMLOutput

function sapc_recon_generateHTMLOutput(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    //Input Format: %attr1_src%,%attr2_src%,%attr3_src%&amp;&amp;%attr1_idm%,%attr2_idm%,%attr3_idm%
    //Output Format: html code for compare result.


    pars = Par.split("&amp;&amp;");
    sourceParameters_src = pars[0];
    sourceParameters_idm = pars[1];
    attributeList = '%$rep.SAPC_RECON_COMPARE_ATTRIBUTES%';
    attributeList = attributeList.trim();

    sourceParametersArray_src = sourceParameters_src.split(",");
    sourceParametersArray_idm = sourceParameters_idm.split(",");
    attributeArray = attributeList.split(",");

    htmlResult = "";

    // Header;
    htmlResult += "&lt;tr&gt;";
    htmlResult += "&lt;td class=tableHeading&gt;Source&lt;/td&gt;";
    for (i = 0; i &lt; attributeArray.length; i++) {
        thisAttribute = attributeArray[i];
        if (thisAttribute != "") {
            htmlResult += "&lt;td class=tableHeading&gt;" + thisAttribute + "&lt;/td&gt;";
        } else {
            uWarning("Empty attribute found in the attribute list!");
        }
    }
    htmlResult += "&lt;/tr&gt;";

    // IdS Attribute Values;
    htmlResult += "&lt;tr&gt;";
    htmlResult += "&lt;td&gt;IdS&lt;/td&gt;";
    for (i = 0; i &lt; sourceParametersArray_idm.length; i++) {
        thisAttributeValue = sourceParametersArray_idm[i];
        htmlResult += "&lt;td&gt;" + sapc_recon_checkEmptyValue(thisAttributeValue) + "&lt;/td&gt;";
    }
    htmlResult += "&lt;/tr&gt;";


    // Source Attribute Values;
    htmlResult += "&lt;tr&gt;";
    htmlResult += "&lt;td&gt;" + '%$rep.$NAME%' + "&lt;/td&gt;";
    for (i = 0; i &lt; sourceParametersArray_src.length; i++) {
        thisAttributeValue = sourceParametersArray_src[i];
        htmlResult += "&lt;td&gt;" + sapc_recon_checkEmptyValue(thisAttributeValue) + "&lt;/td&gt;";
    }
    htmlResult += "&lt;/tr&gt;";


    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Write current data to the log
    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, "htmlResult: " + htmlResult);
    }

    return htmlResult;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_recon_generateHTMLOutput</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_recon_generateSelectQuery

function sapc_recon_generateSelectQuery(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");
    //Input Format: attr1,attr2,attr3
    //Output Format: src.attr1 AS attr1_src, src.attr2 AS attr2_src, src.attr3 AS attr3_src,
    //				 idm.attr1 AS attr1_idm, idm.attr2 AS attr2_idm, idm.attr3 AS attr3_idm

    attributeList = Par.trim();
    //attributeList = uReplaceString(attributeList, " ", "");

    attributeArray = attributeList.split(",");


    selectQuery = "";

    for (i = 0; i &lt; attributeArray.length; i++) {
        thisAttribute = attributeArray[i].trim();
        if (thisAttribute != "") {
            thisAttrSelect = "src." + thisAttribute + " AS " + thisAttribute + "_src, " + "idm." + thisAttribute + " AS " + thisAttribute + "_idm, ";
            selectQuery += thisAttrSelect;
        } else {
            uWarning("Empty attribute found in the attribute list!");
        }
    }

    selectQuery = selectQuery.substring(0, selectQuery.length - 2);

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Write current data to the log
    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, "selectQuery: " + selectQuery);
    }

    return selectQuery;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_recon_generateSelectQuery</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_recon_getSourceParameters

function sapc_recon_getSourceParameters(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    //Input Format: attr1,attr2,attr3
    //Output Format: %attr1_src%, %attr2_src%, %attr3_src%,
    //				 %attr1_idm%, %attr2_idm%, %attr3_idm%


    attributeList = uReplaceString(Par, " ", "");
    sourceParameters_src = "%" + uReplaceString(attributeList, ",", "_src%,%") + "_src%";
    sourceParameters_idm = "%" + uReplaceString(attributeList, ",", "_idm%,%") + "_idm%";
    sourceParameters = sourceParameters_src + "&amp;&amp;" + sourceParameters_idm;

    return sourceParameters;

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_recon_getSourceParameters</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_removeSPMLPrefix

function sapc_removeSPMLPrefix(Par) {
    var script = "sapc_removeSPMLPrefix::";
    var debugMode = 0;

    var parArray = Par.split("!!");
    var parArrayLength = parArray.length;

    if (parArrayLength != 2) {
        uErrMsg(debugMode, script + "2 input parameters are mandatory: [" + Par + "]");
        uSkip(1, 1, "MISSING PARAMETERS");
    } else {
        var value = parArray[0];
        var type = parArray[1];

        uErrMsg(1, script + "Input value: [" + value + "] ; type: [" + type + "]");

        if (type == "USER") {
            value = uReplaceString(value, "SPML.SAPUSER.", "");
        } else if (type == "ROLE") {
            value = uReplaceString(value, "SPML.SAPROLE.", "");
        } else if (type == "GROUP") {
            value = uReplaceString(value, "SPML.SAPGROUP.", "");
        }

        uErrMsg(debugMode, script + "Output value: [" + value + "]");

        return value;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_removeSPMLPrefix</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_removeSpaces

function sapc_removeSpaces(Par) {
    var script = "sapc_removeSpaces::";

    return uReplaceString(Par, " ", "");
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_removeSpaces</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_remove_linebreaks
//	This script replace all carriage returns with &lt;br&gt;, this will be used for the categories in business roles 
//	at the rubric searchterm1 and searchterm2

function sapc_remove_linebreaks(Par) {

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    var parArray = Par.split("!!");

    var par_searchterm = parArray[0];
    var par_down_up = parArray[1];

    // Replace all carriage returns with &lt;br&gt;
    if ((par_down_up == "download") || (par_down_up == "export")) {
        return par_searchterm.replace(/\r\n/g, "&lt;br&gt;");
    }
    // Replace all &lt;br&gt; with carriage returns
    else if ((par_down_up == "upload") || (par_down_up == "import")) {
        return par_searchterm.replace(/&lt;br&gt;/g, "\r\n");
    }

    if (logLevel &gt;= 2) {
        UserFunc.uErrMsg(1, "searchterm for role catigories: " + par_searchterm);
    }

    return "";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_remove_linebreaks</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_report_convertChangeType

function sapc_report_convertChangeType(Par) {

    var changeType = Par;

    switch (changeType) {
    case '0':
        changeType = "Modify";
        break;
    case '1':
        changeType = "Delete";
        break;
    case '2':
        changeType = "Add";
        break;
    case '3':
        changeType = "Disabled";
        break;
    case '4':
        changeType = "Enabled";
        break;
    default:
        changeType = "N/A";
    }

    return changeType;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_report_convertChangeType</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_report_convertChangedBy

function sapc_report_convertChangedBy(Par) {

    var MSKEY = Par;
    var currentIDStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");
    var changedBy = "";

    switch (MSKEY) {
        case '-1':
            changedBy = "Unknown";
            break;
        case '-2':
            changedBy = "Admin UI";
            break;
        case '-3':
            changedBy = "Runtime Engine";
            break;
        case '-4':
            changedBy = "Reconcile";
            break;
        case '-5':
            changedBy = "Dynamic group expansion";
            break;
        default:
            changedBy = uIS_GetValue(MSKEY, currentIDStore, "MSKEYVALUE");
            if (changedBy == null || changedBy == "null" || changedBy == "" || changedBy.indexOf("!ERROR") != -1) {
                changedBy = "n/a";
            }
    }

    return changedBy;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_report_convertChangedBy</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * 2021-06-05 SAP NN:	Return virst valid value from input Par
 * IN:					!! Separated list of values
 * OUT:					first value of Par that is not empty, null or contains !ERROR
 * 2022-03-10 SAP NN:	parArray[ipa].indexOf("!ERROR") != -1 -&gt; parArray[ipa].indexOf("!ERROR") == -1 / more output
 */


function sapc_returnFirstValidInputValue(Par) {

    uInfo("sapc_returnFirstValidInputValue: Input: [" + Par + "]");
    if (Par) {
        var parArray = Par.split("!!");
        for (ipa = 0; ipa &lt; parArray.length; ipa++) {
            if (parArray[ipa] &amp;&amp; parArray[ipa].indexOf("!ERROR") == -1) {
                uInfo("sapc_returnFirstValidInputValue: first valid value at position [" + ipa + "] is [" + parArray[ipa] + "]");
                return parArray[ipa];
            } else {
                uInfo("sapc_returnFirstValidInputValue: Value at position [" + ipa + "] is empty");
            }
        }
    } else {
        uInfo("sapc_returnFirstValidInputValue: Input parameter is empty, returning empty string");
    }
    return "";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1646922773413</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_returnFirstValidInputValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_returnPar

function sapc_returnPar(Par) {

    uErrMsg(1, Par);

    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_returnPar</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// 2023-12-10 SAP NN: dont fill msg host if rep const is empty, can lead to error
var mConnection;
var mRepository;

var stopJob;

function sapc_rfcConnectionCheck(Par) {
    var rds = sapc_core_scriptHeader("sapc_rfcConnectionCheck", Par);

    var repName = uGetRepositoryName();

    importClass(Packages.com.sap.idm.ic.sap.jco.JCoProxy);
    importPackage(Packages.com.sap.conn.jco);
    importClass(Packages.java.util.Properties);


    var ASHOST = uGetConstant("rep.JCO_CLIENT_ASHOST");
    var SYSNR = uGetConstant("rep.JCO_CLIENT_SYSNR");
    var USER = uGetConstant("rep.JCO_CLIENT_USER");
    var CLIENT = uGetConstant("rep.JCO_CLIENT_CLIENT");
    var PASSWD = uGetConstant("rep.JCO_CLIENT_PASSWD");
    var LANG = uGetConstant("rep.JCO_CLIENT_LANG");
    var GROUP = uGetConstant("rep.JCO_CLIENT_GROUP");
    var GWHOST = uGetConstant("rep.JCO_CLIENT_GWHOST");
    var GWSERV = uGetConstant("rep.JCO_CLIENT_GWSERV");
    var MSHOST = uGetConstant("rep.JCO_CLIENT_MSHOST");
    var R3NAME = uGetConstant("rep.JCO_CLIENT_R3NAME");
    var SNC_LIB = uGetConstant("rep.JCO_CLIENT_SNC_LIB");
    var SNC_MODE = uGetConstant("rep.JCO_CLIENT_SNC_MODE");
    var SNC_MYNAME = uGetConstant("rep.JCO_CLIENT_SNC_MYNAME");
    var SNC_PARTNERNAME = uGetConstant("rep.JCO_CLIENT_SNC_PARTNERNAME");
    var SNC_QOP = uGetConstant("rep.JCO_CLIENT_SNC_QOP");
    var DESCRIPTION = uGetConstant("rep.SAPC_REP_DISPLAYNAME");

    var jcoProperties = new Properties();


    jcoProperties.put("jco.client.ashost", ASHOST);
    jcoProperties.put("jco.client.sysnr", SYSNR);
    jcoProperties.put("jco.client.user", USER);
    jcoProperties.put("jco.client.client", CLIENT);
    jcoProperties.put("jco.client.passwd", PASSWD);
    jcoProperties.put("jco.client.lang", LANG);
    jcoProperties.put("jco.client.group", GROUP);
    jcoProperties.put("jco.client.gwhost", GWHOST);
    jcoProperties.put("jco.client.gwserv", GWSERV);
    // 2023-12-10 SAP NN: dont fill msg host if rep const is empty, can lead to error
    if (MSHOST &amp;&amp; MSHOST != "" &amp;&amp; MSHOST.indexOf("!ERROR") == -1) jcoProperties.put("jco.client.mshost", MSHOST);
    jcoProperties.put("jco.client.r3name", R3NAME);
    jcoProperties.put("jco.client.snc_lib", SNC_LIB);
    jcoProperties.put("jco.client.snc_mode", SNC_MODE);
    jcoProperties.put("jco.client.snc_myname", SNC_MYNAME);
    jcoProperties.put("jco.client.snc_partnername", SNC_PARTNERNAME);
    jcoProperties.put("jco.client.snc_qop", SNC_QOP);


    uWarning(rds.outPrefix + "Starting to test connection to ABAP system [" + repName + "] - [" + DESCRIPTION + "] ...");

    try {

        mConnection = JCoProxy.createInstance();
        var Output = mConnection.logonSapi(jcoProperties, repName);

        if (Output == true) {
            if (MSHOST == "" || MSHOST.length == 0) {
                // direct connection to application server
                uWarning(rds.outPrefix + "Connection to ABAP system [" + repName + "] - [" + DESCRIPTION + "] on server [" + ASHOST + "] established successfully!");

            } else {
                // load balanced connection through Message Server
                uWarning(rds.outPrefix + "Connection to ABAP system [" + repName + "] - [" + DESCRIPTION + "] on server [" + MSHOST + "] established successfully!");
            }
        } else {
            if (MSHOST == "" || MSHOST.length == 0) {
                // direct connection to application server
                uError(rds.outPrefix + "Connection to ABAP system [" + repName + "] - [" + DESCRIPTION + "] on server [" + ASHOST + "] has NOT been established!");

            } else {
                // load balanced connection through Message Server
                uError(rds.outPrefix + "Connection to ABAP system [" + repName + "] - [" + DESCRIPTION + "] on server [" + MSHOST + "] has NOT been established!");

            }
            stopJob = 1;
        }


    } catch (e) {
        uError(rds.outPrefix + "Error while creating JCoProxy. Please check log in Debug mode.");
        stopJob = 1;

    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1702212035830</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_rfcConnectionCheck</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_rfcConnectionCheckInit

function sapc_rfcConnectionCheckInit(Par) {

    stopJob = 1;
    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_rfcConnectionCheckInit</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	: sapc_rfcConnectionClose
 * Category		    : provisioning script
 * Short description	: closes a rfc connection to backend system
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: Entry
 * Parameter(s)		: ---
 * Return value Cat.	: None  
 * Return value		: ---
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views, 
 *					               system/job/repository/global constants/variables
 *			        - rfc call : disconnect
 *--------------------------------------------------------------------------------------------------------------------------*/
function sapc_rfcConnectionClose(Par) {
    var rds = sapc_core_scriptHeader("sapc_rfcConnectionClose", Par);

    mConnection.close();

    if (rds.logLevel &gt;= 2) uWarning(rds.outPrefix + "Close RFC connection");

    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_rfcConnectionClose</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_rfcConnectionOpen

var mConnection;
var mRepository;

function sapc_rfcConnectionOpen(Par) {
    var rds = sapc_core_scriptHeader("sapc_rfcConnectionOpen", Par);

    if (rds.logLevel &gt;= 2) uWarning(rds.outPrefix + "Open RFC connection");

    var USERNAME = uGetConstant("rep.JCO_CLIENT_USER");
    var CLIENT = uGetConstant("rep.JCO_CLIENT_CLIENT");
    var PASSWORD = uGetConstant("rep.JCO_CLIENT_PASSWD");
    var LANGUAGE = uGetConstant("rep.JCO_CLIENT_LANG");
    var SYSNR = uGetConstant("rep.JCO_CLIENT_SYSNR");
    var R3NAME = uGetConstant("rep.JCO_CLIENT_R3NAME");
    var ASHOST = uGetConstant("rep.JCO_CLIENT_ASHOST");
    var MSHOST = uGetConstant("rep.JCO_CLIENT_MSHOST");
    var GROUP = uGetConstant("rep.JCO_CLIENT_GROUP");

    try {
        importClass(Packages.com.sap.mw.jco.JCO);

        if (MSHOST == "" || MSHOST.length == 0) {
            // direct connection to application server
            mConnection = JCO.createClient(CLIENT, USERNAME, PASSWORD, LANGUAGE, ASHOST, SYSNR);
        } else {
            // load balanced connection through Message Server
            mConnection = JCO.createClient(CLIENT, USERNAME, PASSWORD, LANGUAGE, MSHOST, R3NAME, GROUP);
        }

        mConnection.connect();

        if (rds.logLevel &gt;= 2) uWarning(rds.outPrefix + "Connection Attributes : " + mConnection.getAttributes());

        mRepository = new JCO.Repository("IDMgmt", mConnection);
    } catch (e) {
        uError(rds.outPrefix + "Exception while trying to open RFC connection");
        uStop(e);
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_rfcConnectionOpen</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_runResetPasswordTaskAsync

function sapc_runResetPasswordTaskAsync(Par) {

    var script = "sapc_runResetPasswordTaskAsync::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data from input parameter
    var userMskey = Par.get("USER_MSKEY");
    var resetPwdTime = Par.get("RESET_PASSWORD_TIME");
    var repResetPwdTaskName = Par.get("REP_HOOK_TASK_NAME");

    // input data from provisioning
    var currentIDStore = uGetIDStore();
    var currentAuditID = uGetAuditID();

    var message = "";
    var accountReps = "";
    var accountRepsArray = "";

    // New Context Var
    // uSetContextVar("RESET_PASSWORD_TIME", resetPwdTime);

    // -------------------------------------------------------------------------------------------------------------------
    var userMskeyValue = uIS_GetValue(userMskey, currentIDStore, "MSKEYVALUE");
    var requestedByMskey = uIS_GetValue(userMskey, currentIDStore, "SAPC_TEMP_REQUESTED_BY");

    var resetPwdReps = uIS_nGetValues(userMskey, "SAPC_IDEN_TEMP_RESET_PW_REPOSITORIES", "|");
    var resetPwdAllReps = uIS_GetValue(userMskey, currentIDStore, "SAPC_IDEN_TEMP_RESET_PW_ALL_REPOSITORIES");

    var pwdGenerate = uIS_GetValue(userMskey, currentIDStore, "SAPC_IDEN_TEMP_RESET_PW_GENERATE");
    var pwdManual = uIS_GetValue(userMskey, currentIDStore, "SAPC_IDEN_TEMP_NEW_INITIAL_PASSWORD");

    // check atributes
    if (resetPwdAllReps == null || resetPwdAllReps.indexOf("!ERROR:") &gt;= 0) {
        resetPwdAllReps = "";
    }

    if (logLevel &gt;= 2) uErrMsg(1, script + "Password reset has been triggered for user [" + userMskeyValue + "] for repositories [" + resetPwdReps + "] or all repositories [" + resetPwdAllReps + "] on date [" + resetPwdTime + "] with audit ID [" + currentAuditID + "]");

    // New variables set for the audit
    var resetPwdRepsAudit = "";
    var resetPwdAudit = "";


    // check if at least 1 repository is selected
    var repsExistFlag = 0;

    if (resetPwdAllReps == null || resetPwdAllReps == "") {
        if (resetPwdReps == null || resetPwdReps == "") {

            message = "No repository selected";
            if (logLevel &gt;= 2) uErrMsg(1, script + message);

            return "";
        }
    }

    // ---------------------------------------------------------------------------------------------------------------------
    // If password needs to be reset on all repositories where the user has been provisioned to 
    //     -&gt; get all repositories and start the provisioning

    if (resetPwdAllReps == 1) {
        var sql = sapc_getSQLforUserRepositories();

        sql = uReplaceString(sql, "%USERMSKEY%", userMskey);

        if (logLevel &gt;= 2) uErrMsg(1, script + "SQL statement to get all repositories: [" + sql + "]");

        accountReps = uSelect(sql);

        // Prepare data for audit
        resetPwdRepsAudit = accountReps;

        if (logLevel &gt;= 2) uErrMsg(1, script + "Account Repositories: [" + accountReps + "]");

        // if no repositories have been found cancel reset password
        if (accountReps == "") {
            message = "User [" + userMskeyValue + "] has no accounts in any repositories";
            if (logLevel &gt;= 2) uErrMsg(1, script + message);

            return "";
        }
        //The result of the SQL query is a string. Values are delimited with two exclamation marks (!!). 

        accountRepsArray = accountReps.split("!!");

    }
    // password reset triggered only for selected repositories
    else {
        //The input is a string. Values are delimited with pipe (|). 
        accountReps = resetPwdReps;

        // Prepare data for audit
        resetPwdRepsAudit = accountReps;

        accountRepsArray = accountReps.split("|");

    }


    // determine new password and write to MX_ENCRYPTED_PASSWORD
    var password = "";
    var passwordEncrypted = "";
    if (pwdGenerate == 1) { // new password should be generated
        password = sapc_generatePassword();
    } else { // initial password was set manually
        password = uDESDecrypt("", pwdManual);
    }
    passwordEncrypted = uDESEncrypt("", password);
    uIS_SetValue(userMskey, 0, "MX_ENCRYPTED_PASSWORD", passwordEncrypted);

    //if (logLevel &gt;=2) uErrMsg(1, script + "New Password: [" + password + "]");
    if (logLevel &gt;= 2) uErrMsg(1, script + "Set MX_ENCRYPTED_PASSWORD: [" + passwordEncrypted + "]");

    // Loop through the array of repositories and run reset hook task async
    var repName = "";
    var repID = 0;
    for (var i = 0; i &lt; accountRepsArray.length; i++) {
        repName = accountRepsArray[i];

        if (logLevel &gt;= 2) uErrMsg(1, script + "Current repository: [" + repName + "]");

        if (repName.length &gt; 0) {
            // Enable password if disabled before
            var enableAttribute = "SAPC_IDEN_REP_PASSWORD_DISABLED_" + repName;
            var enableOperation = uIS_SetValue(userMskey, currentIDStore, enableAttribute, "");
            if (enableOperation.indexOf("!ERROR:") &gt;= 0) {
                uError(script + "Enabling password for repository + [" + repName + "] returned error: " + enableOperation);
            }

            var pwdResetTask = sapc_getRepConstant(repName + "!!" + repResetPwdTaskName);

            if (logLevel &gt;= 2) uErrMsg(1, script + "Password reset task: [" + pwdResetTask + "]");

            if (pwdResetTask != null &amp;&amp; pwdResetTask != "") {

                if (logLevel &gt;= 2) uErrMsg(1, script + "Password reset task: [" + pwdResetTask + "]");

                repID = sapc_getRepID(repName);

                // call reset password task in async mode
                var result = uProvision(userMskey, pwdResetTask, currentAuditID, repID, "PASSWORD_RESET", 0);

                if (result.indexOf("!ERROR:") &gt;= 0) {
                    uError(script + "Calling reset task on repository + [" + repName + "] returned error: " + result);
                }
            } else {
                uErrMsg(1, script + "Cannot determine Password Reset Task for repository: [" + repName + "]");
            }
        }
    }



    // -----------------------------------------------------------------------------------------------------------------------------------------
    // Prepare data and set SAPC_IDEN_RESET_PW_AUDIT
    // Replace !! by |
    resetPwdRepsAudit = uReplaceString(resetPwdRepsAudit, "!!", "|");

    var requestedByMskeyValue = uIS_GetValue(requestedByMskey, currentIDStore, "MSKEYVALUE");

    resetPwdAudit = resetPwdAudit + "Timestamp: " + resetPwdTime + ", " + "Reset password performed on system(s): " + resetPwdRepsAudit + ", " + "Operation performed by: " + requestedByMskeyValue;

    if (logLevel &gt;= 2) uErrMsg(1, script + "Reset password audit: [" + resetPwdAudit + "]");

    var retValue = uIS_SetValue(userMskey, currentIDStore, "SAPC_IDEN_RESET_PW_AUDIT", resetPwdAudit);

    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_runResetPasswordTaskAsync</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Docu: this global script can be used to notify administrators by E-Mail if a job execution of a scheduled job fails
// Usage: copy pass "SAPC Send Final Job Error Mail" from job "SAPC Send Final Job Error Mail" in com.sap.rds.idm.core to last position of the job you want to use it in.
// Maintain Mail Address of reciever in Attribute MAIL_RECEIVER of pass.

function sapc_sendJobLog(Par) {

    var errCount = uGetErrCount();
    if (errCount == 0) {
        uInfo("No errors occured.");
        return "";
    }

    var jobID = "%$ddm.mcjob%";

    var jobName = "";
    var latestJobLog = "";
    var SQL = "";
    var errMsg;

    var jobLogFileName = "";
    var xmlFilePath = "%$ddm.ddmpath%/JobErrorLog.xml";
    var DSEPath = "%$ddm.ddmpath%/DSE.log";
    var textFilePath = "%$ddm.ddmpath%/SAPC_Error_Log.txt";

    SQL = "SELECT name FROM mc_jobs WHERE jobid = " + jobID;
    jobName = uSelect(SQL);

    // latestJobLog
    if ("%$ddm.databasetype%" == "1" || "%$ddm.databasetype%" == "9") { // MS-SQL or ASE
        SQL = "SELECT TOP 1 log_data FROM MC_LOGS %NOLOCK% WHERE jobid = " + jobID + " ORDER BY logdate DESC";
    } else { // ORACLE or DB2
        SQL = "SELECT log_data FROM MC_LOGS WHERE jobid = " + jobID + " AND rownum &lt; 2 ORDER BY logdate DESC";
    }

    latestJobLog = uSelect(SQL);

    var latestJobLogSplit = latestJobLog.split("}");
    var latestJobLogClearText = uFromBase64(latestJobLogSplit[1]);

    uInfo("Writing XML job log to file: " + xmlFilePath);
    uToFile(xmlFilePath, latestJobLogClearText, "FALSE");
    mailSubject = "IdM Job Error Notification for " + jobID + "/" + jobName;
    mailMessage = "Please find attached ";

    var originator = sapc_local_getCoreConstant("SAPC_ERROR_MAIL_ORIGINATOR");
    if (originator == null || originator == "") {
        errMsg = "sapc_sendJobLog: Constant SAPC_ERROR_MAIL_ORIGINATOR not defined";
        uErrMsg(2, errMsg);
        uSkip(1, 2, errMsg);
    }
    var receiver = sapc_local_getCoreConstant("SAPC_ERROR_MAIL_RECEIVER");
    if (receiver == null || receiver == "") {
        errMsg = "sapc_sendJobLog: Constant SAPC_ERROR_MAIL_RECEIVER not defined";
        uErrMsg(2, errMsg);
        uSkip(1, 2, errMsg);
    }
    var mailHost = sapc_local_getCoreConstant("SAPC_ERROR_MAIL_SMTP_HOST");
    if (mailHost == null || mailHost == "") {
        mailHost = "sapc_sendJobLog: Constant SAPC_ERROR_MAIL_SMTP_HOST not defined";
        uErrMsg(2, errMsg);
        uSkip(1, 2, errMsg);
    }
    var mailPort = sapc_local_getCoreConstant("SAPC_ERROR_MAIL_SMTP_PORT");
    if (mailPort == null || mailPort == "") {
        errMsg = "sapc_sendJobLog: Constant SAPC_ERROR_MAIL_SMTP_PORT not defined";
        uErrMsg(2, errMsg);
        uSkip(1, 2, errMsg);
    }


    /////////// Send Email -- cannot send multiple attachments -&gt; gotta send multiple mails
    //uSendSMTPMessage(Sender, 	Recipients, Subject, MessageOrFileName, SMTPHost [,ContentType]	 [,PortNo] 	[,Attachment] [,AttachmentType]);
    uSendSMTPMessage(originator, receiver, mailSubject + " - Job-Log", "Please find Job Log attached.", mailHost, 1, mailPort, xmlFilePath);
    if (uCheckFile(DSEPath) &gt; 0) {
        uSendSMTPMessage(originator, receiver, mailSubject + " - DSE-Log", "Please find DSE Log attached.", mailHost, 1, mailPort, DSEPath);
    }
    if (uCheckFile(textFilePath) &gt; 0) {
        uSendSMTPMessage(originator, receiver, mailSubject + " - Text-Log", "Please find Text Log attached.", mailHost, 1, mailPort, textFilePath);
    }

    uKillFiles(xmlFilePath);
    if (uCheckFile(textFilePath) &gt; 0) {
        uKillFiles(textFilePath);
    }

    return "";
}

function sapc_local_getCoreConstant(constantName) {
    var sql = "select mc_package_variables.VARVALUE from mc_package_variables %NOLOCK%, mc_package %NOLOCK% ";
    sql += "where mc_package_variables.mcPackageID = mc_package.mcPackageID ";
    sql += "and mc_package.mcQualifiedName = 'com.sap.rds.idm.core' ";
    sql += "and mc_package_variables.VARNAME = '" + constantName + "'";
    return uSelect(sql);
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_sendJobLog</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/* Sends email notifications to approvers using new approval mechanism
 * Each approver gets individual emails to support user language settings
 * Supported template substitutions from context variables provided by dispatcher at time of release:
 *  PAR_LINKID
 *  PAR_APPROVALURL
 *  PAR_TARGETCONTEXTDISPLAYNAME
 *  PAR_TARGETUSERMSKEY
 *  PAR_TARGETROLEDISPLAYNAME
 *  PAR_REQUESTINGUSERDISPLAYNAME
 *  PAR_TARGETUSERDISPLAYNAME
 *  PAR_VALIDTO
 *  PAR_VALIDFROM
 *  PAR_DATEASSIGNED
 *  PAR_REQUESTREASON
 *  PAR_REASON
 *  PAR_LASTAPPROVERDISPLAYNAME
 *  PAR_DELEGATEDFROMDISPLAYNAME
 *  PAR_REFERENCED_MSKEY - for generic mskey reference used in Prov Framework.
 *  PAR_REQUESTSTATUS - 1=approved,0=declined,2=timed out,3=not enough approvers, 4=Force decline
 * Supported template substitutions added by script:
 *  PAR_SYSTEMURL - Typically a link to the IdM Login page, can be used in non-approval templates
 *  PAR_REQUESTRESULT- Translated from PAR_REQUESTSTATUS using template parameters values APPROVED=/DECLINED=/TIMEOUT=
 *  PAR_RECIPIENTSSALUTATION - MX_SALUTATION value of email recipient
 *  PAR_RECIPIENTSDISPLAYNAME - displayname or mskeyvalue of recipient
 *  PAR_DELEGATEDFROMDISPLAYNAME - Displayname of person who delegated request
 *  PAR_CHARSET - Charset encoding given in parameters of list-file
 *  PAR_REFERENCED_MSKEY - Generic MSKEY reference which is translated to Displayname or MskeyValue into PAR_REFERENCED_DISPLAYNAME
 *
 *  Any context variable following the format #MSG_PAR_&lt;NAME&gt; set before the notification task can also be used in
 *  the templates using the PAR_&lt;NAME&gt; syntax.
 * SAPC Enhancements:
 *  replace uInfo( with if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix +
 *  enhancement to use sapc_getContextVar on context expected to be &gt;2000 char
 *  check for remaining open approvals when sending completion message
 *  replace host and port in approvalurl
 *  uSkip(1,2) replaced by uSkip(1,1) in order to avoid failed state in case of notification error
 * 2018-01-05 SAP NN: if #MSG_RECIPIENTS is not set the script tries sending mail to null. Changed check for null value
 * 2018-12-13 SAP NN: special characters in variables in mail subject getting messed up (e.g. PAR_REPORTNAME -&gt; Role&amp;#x20;Details&amp;#x20;Report instead of Role Details Report)
 * 2019-08-16 SAP NN: Issue #1 Long context variables running into error: Par is undefined
 * 2019-11-25 : SAP GS : if Parameter follows format #MSG_HTML_PAR_&lt;....&gt;, then HTML value is passed unencoded.
 * 2021-09-07 SAP NN: update for multivalue context var (did not work with HTML parameters)
 * 2022-02-09 SAP NN: added non-mandatory context variable #MSG_CONTENT_TYPE, standard is text/html, alternative context can be set to text/plain
 * 2022-02-11 SAP NN: dont escape content if plain text
 */


var globalErrText;

function sapc_sendNotification(Par) {

    var rds = sapc_core_scriptHeader("sapc_sendNotification", Par);

    lDebug = Par.get("DEBUGSTATE");
    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Debugstate=" + lDebug);

    lThisMskey = Par.get("MSKEY");
    globalErrText = "mskey=" + lThisMskey;
    lDefaultLanguage = Par.get("DEFAULTLANGUAGE");
    lSMTPHost = Par.get("SMTPHOST");
    lSMTPPort = Par.get("SMTPPORT");
    lSMTPSender = Par.get("ORIGINATOR");
    lMailAttr = Par.get("MAILATTR");
    lLangAttr = Par.get("LANGATTR");
    lDefLangAttr = Par.get("DEFAULTLANGATTR");
    lCutDateAt = Par.get("CUTDATEAT");
    lCharEnc = Par.get("CHARENC");
    lSqlLimit = " top 1 ";
    lOraLimit = " and rownum &lt; 2 ";
    lSystemUrl = "" + Par.get("SYSTEMURL");
    mailDebugRecipients = "";

    lUserLanguage = "";
    lTemplateLanguage = "";

    if (lLangAttr === "" || lLangAttr === null) {
        lLangAttr = "" + lDefLangAttr;
    }
    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "lDefLangAttr:" + lDefLangAttr + " lLangAttr:" + lLangAttr);
    ctxVars = uMGetContextVar("#MSG%");
    ctxVars.put("PAR_SYSTEMURL", lSystemUrl);

    // --- SAPC enhanement to skip notification of further approvals are outstanding --- #MSG_TEMPLATE == Assignment completed notification
    if (ctxVars.getProperty("#MSG_TEMPLATE") == "Assignment completed notification") { // assignment comletion message
        var openApprovalItems = uSelect("select taskname from mxp_tasks %NOLOCK% where taskid in (select mcTaskId from mxi_approval %NOLOCK% where mcAuditId = (select refAudit from mxp_audit %NOLOCK% where auditId = " + rds.auditID + "))");
        if (!(openApprovalItems == "" || openApprovalItems == "null" || openApprovalItems == null)) {
            if (rds.logLevel &gt;= 1) uErrMsg(1, rds.outPrefix + "Outstanding approval items for audit [" + rds.auditID + "]: " + uReplaceString(openApprovalItems, "|", ", ") + ". Skipping notification.");
            return "";
        }
    }

    // --- SAPC enhancement, write attachment file path into variable
    var attachmentFilePath = "" + ctxVars.getProperty("#MSG_PAR_SAPC_ATTACHMENT");

    var ctxkeyset = ctxVars.keySet();
    var keyname = "";

    if ((lDebug == 1) || (lDebug == "1")) {
        mailDebugRecipients += Par.get("DEBUGRCPT");
        for (keys = ctxkeyset.iterator(); keys.hasNext(); dummy = 1) {
            keyname = keys.next();
            keyvalue = ctxVars.getProperty(keyname);
            if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Key:" + keyname + " value:" + keyvalue);
        }
    }

    // Set limiters for Oracle/DB2 or SQL Server/ASE
    if ("%$ddm.databasetype%" == 1 || "%$ddm.databasetype%" == "1" || "%$ddm.databasetype%" == 9 || "%$ddm.databasetype%" == "9") {
        lOraLimit = "";
    } else {
        // DB2 and Oracle both use rownum
        lSqlLimit = "";
    }

    // -- SAPC enhancement 2022-02-11 SAP NN: make content type configurable and dont escape content if plain text
    // 2022-02-09 SAP NN: added non-mandatory context variable #MSG_CONTENT_TYPE, standard is text/html, alternative context can be set to text/plain
    var contentTypeContext = uGetContextVar("#MSG_CONTENT_TYPE", "###DEFAULTNOTGOOD###");
    uWarning(rds.outPrefix + "contentTypeContext " + contentTypeContext);

    lTemplateName = checkVar(ctxVars.getProperty("#MSG_TEMPLATE"), "Assignment notification script called for entry without correct context variables.");
    lNotificationType = checkVar(ctxVars.getProperty("#MSG_TYPE"), "Assignment notification script called with unsupported type.");
    lRecipients = checkVar(ctxVars.getProperty("#MSG_RECIPIENTS"), "Assignment notification script called without recipients.");
    lReqStatus = ctxVars.getProperty("#MSG_PAR_REQUESTSTATUS");

    debugEmailSent = 0; // increase to 1 after first email to avoid 1 debugemail per recipient

    // #MSG_RECIPIENTS contained list of mskeys to receive message, separated with |
    // if no recipient and not debug reciever cancel
    // 2018-01-05 SAP NN: if #MSG_RECIPIENTS is not set the script tries sending mail to null. Changed check for null value
    // if ((mailDebugRecipients == "" ||  mailDebugRecipients == "null") &amp;&amp; (lRecipients == "null" || lRecipients == "" || lRecipients == null)) {
    if (!mailDebugRecipients &amp;&amp; !lRecipients) {
        uErrMsg(2, rds.outPrefix + "No Recipients for mail, cancelling.");
        uSkip(1, 1, "Missing recipients.");
    }
    replist = uSplitString(lRecipients, "|");
    for (it = replist.iterator(); it.hasNext(); dummy = 1) {
        recipmskey = it.next();
        // 2018-01-05 SAP NN: if #MSG_RECIPIENTS is not set the script tries sending mail to null. Changed check for null value
        // if (recipmskey != null) {
        if (recipmskey) {
            if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Preparing Mail for User " + recipmskey);
            lTemplateText = "";
            lRecipientDisplayName = getDisplayNameOrMskeyValue(recipmskey);
            lRecipientSalutation = getSalutation(recipmskey);
            lRecipientEmailAddr = uIS_sGetValue(recipmskey, 0, lMailAttr, 0);
            ctxVars.put("PAR_RECIPIENTSSALUTATION", lRecipientSalutation);
            ctxVars.put("PAR_RECIPIENTSDISPLAYNAME", lRecipientDisplayName);

            if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "------------ BEGIN RECIPIENT " + lRecipientEmailAddr + "/" + lRecipientDisplayName + "/" + recipmskey);

            // get user language code
            lUserLanguage = uIS_sGetValue(recipmskey, 0, lLangAttr, 0); //"MX_COMMUNICATION_LANGUAGE");
            if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Recipmskey: [" + recipmskey + "] lUserLanguage: [" + lUserLanguage + "] lLangAttr: [" + lLangAttr + "]");
            // Get template contents and parameters
            lTemplateData = "";
            if (lUserLanguage !== "") {
                // get template content, first try user language, then default
                q = "select " + lSqlLimit + " mcSubject,mcTemplate,mcparameters,mcType from mc_templates where mcId='" + lTemplateName + "' and mcLanguage='" + lUserLanguage + "' " + lOraLimit + " order by mcType desc"; // and mcType=1";
                lTemplateData = uSelect(q);
                lTemplateLanguage = lUserLanguage;
            }
            if (lTemplateData === "") {
                lTemplateLanguage = lDefaultLanguage;
                q = "select " + lSqlLimit + " mcSubject,mcTemplate,mcparameters,mcType from mc_templates where mcId='" + lTemplateName + "' and mcLanguage='" + lDefaultLanguage + "' " + lOraLimit + " order by mcType desc"; // and mcType=1";
                lTemplateData = uSelect(q);
            }
            if (lTemplateData === "") {
                uError("No template found for message " + lTemplateName + " matching default or user language (" + lUserLanguage + "/" + lDefaultLanguage + ")");
                uSkip(1, 1);
                return "";
            }
            lTemplateDataArray = lTemplateData.split("|");
            lTemplateSubject = lTemplateDataArray[0];
            lTemplateParameters = lTemplateDataArray[2];
            lTemplateType = lTemplateDataArray[3] - 1;
            if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Subject: " + lTemplateSubject);
            if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "parameters: " + lTemplateParameters);
            if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Template &lt;cr&gt;&lt;lf&gt; " + lTemplateText);

            // special handling for translating approved/declined based on 
            // #MSG_PAR_REQUESTSTATUS = 0,1 or 2 &amp; template parameters
            appStart = Instr(1, lTemplateParameters, "APPROVED=");
            if ((appStart &gt; 0) &amp;&amp; ((lReqStatus == "1") || (lReqStatus == 1))) {
                temp = Mid(lTemplateParameters, appStart + 9, Instr(appStart, lTemplateParameters, "!!") - (appStart + 9));
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Approved text: " + temp);
                ctxVars.put("PAR_REQUESTRESULT", temp);
            }
            appStart = Instr(1, lTemplateParameters, "DECLINED=");
            if ((appStart &gt; 0) &amp;&amp; ((lReqStatus == "0") || (lReqStatus === 0) || (lReqStatus == "3") || (lReqStatus == 3) || (lReqStatus == "4") || (lReqStatus == 4))) {
                temp = Mid(lTemplateParameters, appStart + 9, Instr(appStart, lTemplateParameters, "!!") - (appStart + 9));
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Declined text: " + temp);
                ctxVars.put("PAR_REQUESTRESULT", temp);
                if ((lReqStatus == "3") || (lReqStatus == 3)) {
                    ctxVars.put("PAR_LASTAPPROVERDISPLAYNAME", "system");
                }
            }
            appStart = Instr(1, lTemplateParameters, "TIMEOUT=");
            if ((appStart &gt; 0) &amp;&amp; ((lReqStatus == "2") || (lReqStatus == 2))) {
                temp = Mid(lTemplateParameters, appStart + 8, Instr(appStart, lTemplateParameters, "!!") - (appStart + 8));
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Declined text: " + temp);
                ctxVars.put("PAR_REQUESTRESULT", temp);
                ctxVars.put("PAR_LASTAPPROVERDISPLAYNAME", "system");
            }
            appStart = Instr(1, lTemplateParameters, "CHARENC=");
            if ((appStart &gt; 0) &amp;&amp; ((lReqStatus == "2") || (lReqStatus == 2))) {
                temp = Mid(lTemplateParameters, appStart + 8, Instr(appStart, lTemplateParameters, "!!") - (appStart + 8));
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Declined text: " + temp);
                lCharEnc = temp;
                ctxVars.put("PAR_CHARSET", temp);
            }

            lCharEnc = checkValidCharEnc(lCharEnc);

            if (lDebug == 1) {
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Decode template using charset:" + lCharEnc);
            }

            lTemplateText = uFromHex(lTemplateDataArray[1], lCharEnc);

            // replace parameters:
            for (keys = ctxkeyset.iterator(); keys.hasNext(); dummy = 1) {

                keyname = "" + keys.next(); // adding "" to make it string, cos indexOf is not working when trying to find "_0"
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Start processing keyname [" + keyname + "]");
                var keyvalueUnencoded;
                // sapc enhancement
                // 2019-08-16 SAP NN: Issue #1 Long context variables running into error: Par is undefined
                if (keyname &amp;&amp; keyname.indexOf("_0") == (keyname.length - 2)) {
                    //SAPC if _0 in context variable name, the context variable is longer than 2000 char -&gt; use sapc - function to get mv context
                    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Found multivalue context variable [" + keyname + "] (&gt;2000 char)");
                    keyname = uReplaceString(keyname, "_0", "");
                    keyvalueUnencoded = sapc_uGetContextVar(keyname);
                    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Multivalue context variable [" + keyname + "] resolved it to [" + keyvalueUnencoded + "]");
                } else {
                    keyvalueUnencoded = ctxVars.getProperty(keyname);
                }

                if (keyname.indexOf('#MSG_HTML_PAR_') &gt; -1) {
                    keyvalue = keyvalueUnencoded;
                    keyname = uReplaceString(keyname, '#MSG_HTML_PAR_', "#MSG_PAR_");
                } else if (contentTypeContext == "text/plain") { // 2022-02-11 SAP NN: dont escape content if plain text
                    keyvalue = keyvalueUnencoded;
                } else {
                    keyvalue = uHTMLEscape(keyvalueUnencoded);
                }

                uWarning(rds.outPrefix + "keyvalue " + keyvalue);


                keyname = uReplaceString(keyname, "#MSG_", "");
                if ((keyvalue !== null) &amp;&amp; (Instr(1, keyname, "PAR_") &gt; 0)) {
                    if ((keyname == "PAR_VALIDFROM") || (keyname == "PAR_VALIDTO") || (keyname == "PAR_DATEASSIGNED")) {
                        dPos = Instr(1, keyvalue, lCutDateAt);
                        if (dPos &gt; 1) {
                            if ((lDebug == 1) || (lDebug == "1")) {
                                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Cutting datetime value at character " + Instr(1, keyvalue, lCutDateAt));
                            }
                            keyvalue = Left(keyvalue, dPos - 1);
                        }
                    }
                    if (keyname == "PAR_DELEGATEDFROM") {
                        // get displayname or mskeyvalue of this person and switch keyname
                        keyvalue = getDisplayNameOrMskeyValue(keyvalue);
                        keyname = "PAR_DELEGATEDFROMDISPLAYNAME";
                    }
                    if (keyname == "PAR_REFERENCED_MSKEY") {
                        // get displayname or mskeyvalue of this reference and switch keyname
                        keyvalue = getDisplayNameOrMskeyValue(keyvalue);
                        keyname = "PAR_REFERENCED_DISPLAYNAME";
                    }
                    if (keyname == "PAR_SAPC_PASSWORD") {
                        // get displayname or mskeyvalue of this reference and switch keyname
                        keyvalue = uDESDecrypt(keyvalueUnencoded);
                    }

                    if (keyname == "PAR_APPROVALURL") {
                        //SAPC replace host/port of approvalurl with systemurl
                        keyvalue = uReplaceString(keyvalue, "http://localhost:50000", lSystemUrl);
                    }
                    if ((lDebug == 1) || (lDebug == "1")) {
                        if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "replace in template key:" + keyname + " with value:" + keyvalue);
                    }
                    lTemplateText = uReplaceString(lTemplateText, "NOENC_" + keyname, keyvalueUnencoded);
                    lTemplateText = uReplaceString(lTemplateText, keyname, keyvalue);
                    lTemplateSubject = uReplaceString(lTemplateSubject, keyname, keyvalue);
                }
            }
            if ((lDebug == 1) || (lDebug == "1")) {
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "updated template:\r\n" + lTemplateText);
            }

            // 2018-12-13 SAP NN: special characters in variables in mail subject getting messed up (e.g. PAR_REPORTNAME -&gt; Role&amp;#x20;Details&amp;#x20;Report instead of Role Details Report)
            // lTemplateSubject = decodeURI(lTemplateSubject); // does not help at all
            lTemplateSubject = uReplaceString(lTemplateSubject, "&amp;#x20;", " ");
            lTemplateSubject = uReplaceString(lTemplateSubject, "&amp;#x27;", "'");

            keys = null;
            lMailContentType = "text/html;charset=" + lCharEnc;

            // 2022-02-09 SAP NN: added non-mandatory context variable #MSG_CONTENT_TYPE, standard is text/html, alternative context can be set to text/plain
            if (contentTypeContext != "###DEFAULTNOTGOOD###")
                lMailContentType = contentTypeContext;

            if (lDebug == "1") {
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Debug=1, debugEmailSent: " + debugEmailSent);
                if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Send smtp message with contenttype: " + lMailContentType);
                mailMessage = "DEBUG: original recipient=" + lRecipientEmailAddr + "\n\n" + lTemplateText;
                if (debugEmailSent == 1) {
                    // we already sent a debug email. Do nothing
                    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Already sent debug email once, skipping recipient:" + lRecipientEmailAddr);
                } else {
                    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Sending " + lSMTPSender + ":" + mailDebugRecipients + ":" + lTemplateSubject + ":" + mailMessage + ":" + lSMTPHost + ":" + lSMTPPort);
                    if (attachmentFilePath == "null" || attachmentFilePath == "" || attachmentFilePath == null) {
                        res = uSendSMTPMessage(lSMTPSender, mailDebugRecipients, "DEBUG: " + lTemplateSubject, mailMessage, lSMTPHost, lMailContentType, lSMTPPort);
                        //      uSendSMTPMessage(Sender,    Recipients,            Subject,                     MessageOrFileName, SMTPHost [,ContentType] [,PortNo] [,Attachment] [,AttachmentType] [,Charset] [,HeaderEncoding] [,TransferEncoding] [,LogFile] [,BodyCodePage] [,SubjectCodePage] [,SubjectCodePage])
                    } else {
                        res = uSendSMTPMessage(lSMTPSender, mailDebugRecipients, "DEBUG: " + lTemplateSubject, mailMessage, lSMTPHost, lMailContentType, lSMTPPort, attachmentFilePath);
                    }
                    debugEmailSent = 1;
                    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + res);
                }
            } else {
                if (lRecipientEmailAddr === "") {
                    uWarning("No email address found for mskey " + recipmskey + ", skipping email for this user");
                } else {
                    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Send email to " + lRecipientEmailAddr);
                    if (attachmentFilePath == "null" || attachmentFilePath == "" || attachmentFilePath == null) {
                        res = uSendSMTPMessage(lSMTPSender, lRecipientEmailAddr, lTemplateSubject, lTemplateText, lSMTPHost, lMailContentType, lSMTPPort);
                        //  uSendSMTPMessage    (Sender, Recipients,                 Subject,    MessageOrFileName, SMTPHost [,ContentType]     [,PortNo] [,Attachment] [,AttachmentType] [,Charset] [,HeaderEncoding] [,TransferEncoding] [,LogFile] [,BodyCodePage] [,SubjectCodePage] [,SubjectCodePage])
                        if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Result:" + res);
                    } else {
                        res = uSendSMTPMessage(lSMTPSender, lRecipientEmailAddr, lTemplateSubject, lTemplateText, lSMTPHost, lMailContentType, lSMTPPort, attachmentFilePath);
                        //  uSendSMTPMessage    (Sender, Recipients,                 Subject,    MessageOrFileName, SMTPHost [,ContentType]     [,PortNo] [,Attachment] [,AttachmentType] [,Charset] [,HeaderEncoding] [,TransferEncoding] [,LogFile] [,BodyCodePage] [,SubjectCodePage] [,SubjectCodePage])
                        if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Result:" + res);
                    }
                }
            }

            if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Send mail for " + recipmskey);
        }
    }
    return "";
}

function getSalutation(mskey) {
    userValue = uIS_sGetValue(mskey, 0, "MX_SALUTATION", 0);
    if (userValue === null || Instr(1, userValue, "!ERROR") &gt; 0) {
        return "";
    } else {
        return userValue;
    }
}

function getDisplayNameOrMskeyValue(mskey) {
    // get displayname or mskeyvalue if not set
    userValue = uIS_sGetValue(mskey, 0, "DISPLAYNAME", 0);
    if (userValue === null || Instr(1, userValue, "!ERROR") &gt; 0) {
        userValue = uIS_sGetValue(mskey, 0, "MSKEYVALUE", 0);
        if (userValue === null || Instr(1, userValue, "!ERROR") &gt; 0) {
            uError("No displayname or mskeyvalue found for mskey " + mskey);
            uSkip(1, 1);
        }

    }
    return userValue;
}

function checkVar(v, err) {
    if (v === "") {
        uError(err + " " + globalErrText);
        uSkip(1, 1);
    }
    return v;
}

function checkValidCharEnc(pCharEnc) {
    uCharEnc = pCharEnc.toUpperCase();
    if ((uCharEnc == 'US-ASCII') || (uCharEnc == 'ISO-8859-1') || (uCharEnc == 'UTF-8') || (uCharEnc == 'UTF-16BE') || (uCharEnc == 'UTF-16LE') || (uCharEnc == 'UTF-16')) {
        return uCharEnc;
    } else {
        uWarning("Unknown character encoding type given by template or job-setting:" + pCharEnc + ", defaulting to UTF-8 but text in message might be broken");
        return "UTF-8";
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1661243179997</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_sendNotification</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	      : sapc_setContextVars
 * Category              : provisioning script
 * Short description	: Set multiple attributes to context variables
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: Entry
 * Parameter(s)		: USER_MSKEY, USER_MSKEYVALUE, &lt;ATTRIBUTE1&gt;, &lt;ATTRIBUTE2&gt;....
 * Return value Cat.	: ---
 * Return value		: ---
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: sapc_core_script_functions
 * Change History	: 2020-01-24 SAP NN: DT cannot hand over key beginning with # (e.g. #MSG_PAR_... for notification context variables) -&gt; add # if key starts with MXG_
 *					: 2020-12-07 SAP NN: import of Iterator class failing with SP8 for SAP IdM
 *--------------------------------------------------------------------------------------------------------------------------*/

function sapc_setContextVars(Par) {
    var script = "sapc_setContextVars::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Import required Java types.
    importClass(java.util.HashMap);
    importClass(java.util.Set);
    //importClass(java.util.Iterator);

    if (Par != null &amp;&amp; Par != "") {
        var entry = Par;
        var iterator = entry.keySet().iterator();

        var key = null;
        var value = null;

        while (iterator.hasNext()) {
            key = iterator.next();
            value = entry.get(key);

            // 2020-01-24 SAP NN: DT cannot hand over key beginning with # (e.g. #MSG_PAR_... for notification context variables) -&gt; add # if key starts with MXG_
            if (key.indexOf("MSG_") == 0) {
                uInfo(script + "Key [" + key + "] is message variable, adding #");
                key = "#" + key;
            }

            // ignore usermskey and usermskeyvalue
            if (key.indexOf("USER_MSKEY") == -1) {
                uSetContextVar(key, value);

                if (logLevel &gt;= 2) uErrMsg(1, script + "Key: [" + key + "] ; value: [" + value + "]");
            }
        }
    }

    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1607320955057</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_setContextVars</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_setDefaultValidDate
// Input: VALIDFROM or VALIDTO data in format DD.MM.YYYY and type -&gt; example: (31.12.2011|VALID_FROM) or (|VALIDTO)
// Output: if VALIDFROMor VALID to are empty return default value
//	VALIDFROM:	current day
//	VALIDTO:	9999-12-31
// 2020-11-16 SAP NN: returning undefined-undefined-2020-11-16 if date format is YYYY-MM-DD

function sapc_setDefaultValidDate(Par) {

    var script = "sapc_setDefaultValidDate::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");

    // Input data
    Par = Par + "";
    var parSplit = Par.split("|");
    var currentDate = parSplit[0] + "";
    var currentOperation = parSplit[1] + "";
    var returnDate = "";

    // Write current data to the log
    if (logLevel &gt;= 2) uErrMsg(1, script + "Par: [" + Par + "] ; currentDate: [" + currentDate + "] ; currentOperation: [" + currentOperation);

    // 2020-11-16 SAP NN: returning undefined-undefined-2020-11-16 if date format is YYYY-MM-DD
    if (currentDate &amp;&amp; currentDate.indexOf("-") != -1) { // 2020-11-16 -&gt; 16.11.2020
        var tmp = currentDate.split("-");
        currentDate = tmp[2] + "." + tmp[1] + "." + tmp[0];
    }

    if (currentDate == "" || currentDate == null) {
        if (currentOperation == "VALID_FROM") {
            // Get current date; format YYYYMMDDhhmmssZ
            var currentSystemTime = uGetGeneralizedTimeZ() + "";
            uInfo(script + "currentSystemTime: [" + currentSystemTime + "]");
            var currentYear = currentSystemTime.slice(0, 4);
            var currentMonth = currentSystemTime.slice(4, 6);
            var currentDay = currentSystemTime.slice(6, 8);
            var newCurrentDate = "" + currentDay + "." + currentMonth + "." + currentYear;
            returnDate = newCurrentDate;
        } else if (currentOperation == "VALID_TO") {
            returnDate = "31.12.9999";
        }
    } else {
        returnDate = currentDate;
    }

    if (logLevel &gt;= 2) uErrMsg(1, script + "ReturnDate: " + returnDate);

    return returnDate;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1605510513963</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_setDefaultValidDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// 2020-01-29 SAP NN: Mass admin jobs writing to files will resolve file name for every entry, which is pretty RT consuming
// Par: &lt;varName&gt;!!&lt;varValue&gt;
function sapc_setJobVar(Par) {
    uSetUserVar(Par.split("!!")[0], Par.split("!!")[1]);
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1580277360107</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_setJobVar</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// 2020-01-29 SAP NN: Mass admin jobs writing to files will resolve file name for every entry, which is pretty RT consuming
// Par: Entry (Key,Value set)
// 2021-06-14 SAP NN: Removing import of Iterator

function sapc_setJobVars(Par) {

    importClass(java.util.HashMap);
    importClass(java.util.Set);
    //importClass(java.util.Iterator);

    if (Par != null &amp;&amp; Par != "") {
        var entry = Par;
        var iterator = entry.keySet().iterator();

        var key = null;
        var value = null;

        while (iterator.hasNext()) {
            key = iterator.next();
            value = entry.get(key);

            uSetUserVar(key, value);

        }
    }

    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1623653661017</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_setJobVars</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_setLockRepository
// Usage: sapc_setLockRepository(&lt;repository&gt;!!&lt;lockstatus&gt;)
// Example: {A}$FUNCTION.sapc_setLockRepository(%$rep.$NAME%!!$FUNCTION.sap_abap_isLocked(%islocked%)$$)$$

function sapc_setLockRepository(Par) {

    var parSplit = Par.split("!!");
    var repositoryName = parSplit[0];
    var lockStatus = parSplit[1];
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var script = "sapc_setLockRepository::";

    if (lockStatus == 1) {
        if (logLevel &gt;= 2) {
            UserFunc.uErrMsg(1, script + " repositoryName: " + repositoryName + "; lockStatus: " + lockStatus);
        }
        return repositoryName;
    }

    return "";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_setLockRepository</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	: sapc_setValidityPeriod
 * Category		    : job script
 * Short description   : validate the validity of an assignment during import from backend oder file
 *                     PrivTypes are:  ROLE          (ABAP Role Privilege ),
 *                                     ALL           (all Types of Privileges and Business Roles)
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: String
 * Parameter(s)		: StartDate, EndDate, UserID, assignName, AssignType
 * Return value Cat.	: String
 * Return value		: propertyValidityPeriod
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views,
 *					               system/job/repository/global constants/variables
 *                   - inbuild functoin    : uGetConstant
 *			  - global constant     : glb.SAP_MASTER_IDS_ID
 *                   - inbuild function    : uGetRepositoryName
 *                   - inbuild function    : uIS_sGet
 *                   - inbuild function    : uIS_sGetValue
 *                   - inbuild function    : uGetConstant
 *                   - inbuild function    : uSelect
 *                   - view                : idmv_link_simple_all
 *                   - inbuild function    : Mid
 *                   - inbuild function    : Left
 *                   - repository constant : rep.SAPC_PRIV_RECONCILIATION
 *----------------------------------------------------------------------------------------------------------------------------
 * Change History
 * 2023-02-20 SAP NN: #1 Setting valid from if valid to is set and valid from empty (instead of setting valid to)
 *--------------------------------------------------------------------------------------------------------------------------*/

function sapc_setValidityPeriod(Par) {

    var script = "sapc_setValidityPeriod::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    // --------------------------------------------------
    //parameter input

    // Par:= &lt;startDate&gt;!!&lt;endDate&gt;!!&lt;UserID&gt;!!&lt;AssignName&gt;!!&lt;AssignType&gt;
    var inputString = Par;
    var inputArray = inputString.split("!!");
    var inputStartDate = inputArray[0];
    var inputEndDate = inputArray[1];
    var inputUserID = inputArray[2];
    var inputPrivName = inputArray[3];
    var inputPrivType = inputArray[4];


    uErrMsg(debugMode, script + "UserID: [" + inputUserID + "] ; Privilege name: [" + inputPrivName + "] ; Start date: [" + inputStartDate + "] ; End date: [" + inputEndDate + "] ; Privilege Type: [" + inputPrivType + "]");

    // --------------------------------------------------
    // variable definition


    var repValidFrom = "";
    var repValidTo = "";

    var year = "";
    var month = "";
    var day = "";

    var linkPropertyString = "";
    var linkPropertyArray = null;
    var linkID = 0;
    var linkValidFrom = "";
    var linkValidTo = "";
    var linkState = -1;


    var propertyLinkID = "LINKID=";
    var propertyValidFrom = "VALIDFROM=";
    var propertyValidTo = "VALIDTO=";
    var propertyValidityPeriod = "";

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");
    var repName = "";

    var privPrefix = "";
    var privMskeyValue = "";
    var privMskey = "";

    var repReconciliationType = 0;

    var userMskey = "";
    var userMskeyValue = "";
    var userRepAccount = "";

    // -----------------------------------------------------------------------------------------------------
    // evaluate privType

    // Reconcile
    // if repReconciliationType == 0 : update from backend
    // if repReconciliationType == 1 : reprovision to backend

    if (inputPrivType == 'ROLE') {
        repReconciliationType = uGetConstant("rep.SAPC_PRIV_RECONCILIATION");

        privPrefix = "PRIV:" + inputPrivType + ":" + repName + ":";
        privMskeyValue = privPrefix + inputPrivName;

        repName = uGetRepositoryName();
    } else if (inputPrivType == 'ALL') {
        repReconciliationType = 0;

        privMskeyValue = inputPrivName;

        repName = "UPLOAD";
    } else {
        uErrMsg(2, script + "Privilege [" + privMskeyValue + "] has wrong assignment type defined");
        uSkip(2, 1, "WRONG ASSIGNMENT TYPE");
    }


    // --------------------------------------------------
    // check if assignment does exist
    // if assignment exists and valid from or valid to are different from original 
    // LINKID has to be set to modify valid from and valid to of assignment 
    // example: LINKID=3456!!VALIDFROM=2010-06-01!!VALIDTO=2010-12-31
    // Direct Assignment if linkstate is 0, else with reporivioning

    // ------------
    // get privMskey

    privMskey = uIS_sGet(idStore, "MSKEYVALUE", privMskeyValue, true);

    uErrMsg(debugMode, script + "Privilege [" + privMskeyValue + "] with MSKEY: [" + privMskey + "]");

    if (inputPrivType == 'ROLE') {
        // ------------
        // get userMskeyValue via userMskey from userRepAccount

        userRepAccount = inputUserID;
        userMskey = uIS_sGet(idStore, "ACCOUNT" + repName, userRepAccount, true);

        // no userMskey found
        if (userMskey.indexOf("!ERROR:") != -1) {
            uErrMsg(2, script + "No MSKEY found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update");
            uSkip(1, 1);
        }
        // multiple userMskeys found
        else if (userMskey &lt; 0) {
            uErrMsg(2, script + "Multiple ([" + userMskey + "]) MSKEYs found for account name [" + userRepAccount + "] in repository [" + repName + "] - skip update");
            uSkip(1, 1);
        }

        userMskeyValue = uIS_sGetValue(userMskey, idStore, "MSKEYVALUE", 0);

    } else if (inputPrivType == 'ALL') {
        userMskeyValue = inputUserID;
        userMskey = uIS_sGet(idStore, "MSKEYVALUE", userMskeyValue, true);

        // no userMskey found
        if (userMskey.indexOf("!ERROR:") != -1) {
            uErrMsg(2, script + "No MSKEY found for user name [" + userMskeyValue + "] - skip update");
            uSkip(1, 1, "MULTIPLE MSKEYS FOUND");
        }
        // multiple userMskeys found
        else if (userMskey &lt; 0) {
            uErrMsg(2, script + "Multiple ([" + userMskey + "]) MSKEYs found for user name [" + userMskeyValue + "] - skip update");
            uSkip(1, 1, "MULTIPLE MSKEYS FOUND");
        }
    }


    uErrMsg(debugMode, script + "User [" + userMskeyValue + "] with MSKEY: [" + userMskey + "]");

    // ------------
    // get link properties linkid, validfrom and valid to with userMskey and privMskey

    sql = "SELECT mcUniqueID, mcValidFrom, mcValidTo, mcLinkState FROM idmv_link_simple_all " + " WHERE (mcThisMSKEY = " + userMskey + ") AND (mcOtherMSKEY = " + privMskey + ")";

    uErrMsg(debugMode, script + "SQL: [" + sql + "]");

    // propertyString := "300|2011-10-07 00:00:00.0|2011-11-01 23:59:59.0|0"
    linkPropertyString = uSelect(sql);

    uErrMsg(debugMode, script + "linkPropertyString: [" + linkPropertyString + "]");

    if (linkPropertyString != "") {
        linkPropertyString = uReplaceString(linkPropertyString, "|", "!!");
        linkPropertyArray = linkPropertyString.split("!!");

        linkID = linkPropertyArray[0];

        // of not defined value is &gt;null&lt;

        linkValidFrom = linkPropertyArray[1];
        if (linkValidFrom == "null" || linkValidFrom == null) linkValidFrom = "";
        else linkValidFrom = Left(linkValidFrom, 10);

        linkValidTo = linkPropertyArray[2];
        if (linkValidTo == "null" || linkValidTo == null) linkValidTo = "";
        else linkValidTo = Left(linkValidTo, 10);

        linkState = linkPropertyArray[3];

        uErrMsg(debugMode, script + "Link ID: [" + linkID + "]; Valid From: [" + linkValidFrom + "] ; Valid To: [" + linkValidTo + "] ; Link State: [" + linkState + "]");
    } else {
        linkID = 0;

        uErrMsg(debugMode, script + "No assigment exists for user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "]");
    }


    // --------------------------------------------------
    // Attribute Property VALIDFROM with 8 characters
    if (inputStartDate.length == 8) {
        year = Mid(inputStartDate, 1, 4);
        month = Mid(inputStartDate, 5, 2);
        day = Mid(inputStartDate, 7, 2);

        repValidFrom = year + "-" + month + "-" + day;
    } else if (inputStartDate.length == 10) {
        repValidFrom = inputStartDate;
    }

    // --------------------------------------------------
    // Attribute Property VALIDTO
    if (inputEndDate.length == 8) {
        year = Mid(inputEndDate, 1, 4);
        month = Mid(inputEndDate, 5, 2);
        day = Mid(inputEndDate, 7, 2);

        repValidTo = year + "-" + month + "-" + day;
    } else if (inputEndDate.length == 10) {
        repValidTo = inputEndDate;
    }


    // ---------------------------------------------------------------------------------------------------------
    // Reconcile
    // if repReconciliationType == 0 : update from backend
    // if repReconciliationType == 1 : reprovision to backend

    if (repReconciliationType != 1) {
        // --------------------------------------------------
        // Check if linkID exists

        propertyValidFrom = propertyValidFrom + repValidFrom;
        propertyValidTo = propertyValidTo + repValidTo;

        // If link does not exist, add assignment
        if (linkID == "") {
            uErrMsg(1, script + "Assignment for user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] with validity period ([" + repValidFrom + "] - [" + repValidTo + "]) does not exist in ID Mgmt so far - add assignment");

            propertyLinkID = "";
        }

        // If link does exist, check if valid from or valid to has been changed
        else {
            uErrMsg(debugMode, script + "linkID: [" + linkID + "]");

            //check if valid from or rep equals valid from if link

            uErrMsg(debugMode, script + " repValidFrom: [" + repValidFrom + "] ; linkValidFrom: [" + linkValidFrom + "] ; repValidTo: [" + repValidTo + "] ; linkValidTo: [" + linkValidTo + "]");

            if ((!linkValidFrom.equals(repValidFrom)) || (!linkValidTo.equals(repValidTo))) {
                uErrMsg(1, script + "Assignment of user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] with current validity period ([" + linkValidFrom + "] - [" + linkValidTo + "]) needs to be updated with new validity period ([" + repValidFrom + "] - [" + repValidTo + "]) - update assignment");

                propertyLinkID = propertyLinkID + linkID;
            } else {
                uErrMsg(debugMode, script + "No changes in assignment of user [" + userMskeyValue + "] and privilege [" + privMskeyValue + "] with validity period ([" + linkValidFrom + "] - [" + linkValidTo + "]) - cancel process!");
                uSkip(1, 1, "No changes in assignment");
            }
        }

        // --------------------------------------------------
        // build up property

        if (linkState == 0) propertyValidityPeriod = "{"; // issue with {DIRECT-REFERENCE=1!!";
        else propertyValidityPeriod = "{";


        if (propertyLinkID != "") {
            propertyValidityPeriod = propertyValidityPeriod + propertyLinkID + "!!";
        }

        if (repValidFrom != "") {
            propertyValidityPeriod = propertyValidityPeriod + propertyValidFrom;

            if (repValidTo != "") {
                propertyValidityPeriod = propertyValidityPeriod + "!!" + propertyValidTo + "}";
            } else {
                propertyValidityPeriod = propertyValidityPeriod + "}";
            }
        } else {
            if (propertyValidTo != "") {
                // 2023-02-20 SAP NN: #1 Setting valid from if valid to is set and valid from empty (instead of setting valid to)
                // propertyValidityPeriod = "{" + propertyValidFrom + "}";
                propertyValidityPeriod = "{" + propertyValidTo + "}";
            }
        }

        uErrMsg(debugMode, script + "Validity period: [" + propertyValidityPeriod + "]");

        return propertyValidityPeriod;

    } // end of repReconciliationType != 1
    else {
        // no yet implemented
        var message = "Wrong reconciliation type [" + repReconciliationType + "] defined in repository " + repName + "]";
        uErrMsg(2, script + message);

        uSkip(1, 2, message);
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1676898074923</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_setValidityPeriod</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_showDestination

function sapc_showDestination(Par) {
    var script = "sapc_showDestination::";

    var auditID = uGetAuditID();
    var taskID = uGetTaskID();
    var repID = uGetRepositoryID();

    var userMskey = Par.get("MSKEY");
    var userMskeyValue = Par.get("MSKEYVALUE");
    var userDisplayName = Par.get("DISPLAYNAME");

    var taskName = uGetTaskName(taskID);
    var repName = uGetRepositoryName(repID);

    var userAccount = Par.get("ACCOUNT" + repName);

    var outputUser = "";

    if (userAccount == null) userAccount = userMskeyValue;
    if (userDisplayName == null) outputUser = userMskeyValue;
    else outputUser = userDisplayName + " (" + userMskeyValue + ")";


    uErrMsg(1, script + "AuditID [" + auditID + "]: Event triggered on task [" + taskName + "] for account [" + userAccount + "] of user [" + outputUser + "] on repository [" + repName + "]");

    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_showDestination</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION> function sapc_skipIfSAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue(Par) {
     var skipVal = "%$rep.SAPC_LOAD_SKIP_CHANGES_FROM_BE%";
     uInfo("sapc_skipIfSAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue: Value of SAPC_LOAD_SKIP_CHANGES_FROM_BE is [" + skipVal + "]");
     if (skipVal.toUpperCase() == "TRUE" || skipVal == "1") {
         uWarning("SAPC_LOAD_SKIP_CHANGES_FROM_BE is set to true. Skipping pass.");
         uSkip(2);
     }
     return Par;
 }</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1657613456967</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_skipIfSAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>function sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse(Par) {
    var repConstVal = "%$rep.SAPC_MANAGE_GROUP_OBJECTS%";
    uInfo("sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse: Value of SAPC_MANAGE_GROUP_OBJECTS is [" + repConstVal + "]");
    if (repConstVal &amp;&amp; (repConstVal.toUpperCase() == "TRUE" || repConstVal == "1")) {
        uInfo("sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse: SAPC_MANAGE_GROUP_OBJECTS is true. Continueing.");
    } else {
        uWarning("SAPC_MANAGE_GROUP_OBJECTS is set to false. Skipping pass.");
        uSkip(2);
    }
    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1657613464573</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>function sapc_skipIf_SAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue_or_sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse(Par) {
    sapc_skipIfSAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue();
    sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse();
    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1657191001027</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_skipIf_SAPC_LOAD_SKIP_CHANGES_FROM_BEisTrue_or_sapc_skipIfSAPC_MANAGE_GROUP_OBJECTSisFalse</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_splitAssignment

function sapc_splitAssignment(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");

    pars = Par.split("@@");
    assignment = pars[0];
    index = pars[1];

    result = assignment.split("&amp;&amp;")[index];

    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_splitAssignment</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_splitString

function sapc_splitString(Par) {
    //Example calling DSE internal function 
    //uStop("Terminated by user");
    ERROR-- &gt; To delete!
        pars = Par.split("@@");
    assignment = pars[0];
    index = pars[1];

    result = assignment.split("&amp;&amp;")[index];

    return result;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_splitString</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_spmlConnectionCheck

function sapc_spmlConnectionCheck(Par) {
    var rds = sapc_core_scriptHeader("sapc_spmlConnectionCheck", Par);

    var repID = uGetRepositoryID();
    var repName = uGetRepositoryName();
    var repDisplayName = uGetConstant("rep.SAPC_REP_DISPLAYNAME");
    var repHost = uGetConstant("rep.APPLICATION_HOST");
    var repPort = uGetConstant("rep.HTTP_PORT");

    if (stopJob == 0) {
        uWarning(rds.outPrefix + "Connection to JAVA system [" + repName + "] - [" + repDisplayName + "] on server [" + repHost + "] port [" + repPort + "] established successfully");
    } else {
        uError(rds.outPrefix + "Connection to JAVA system [" + repName + "] - [" + repDisplayName + "] on server [" + repHost + "] port [" + repPort + "] has NOT been established");

        uStop("Connection failed");
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_spmlConnectionCheck</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_spmlConnectionCheckInitialize

function sapc_spmlConnectionCheckInitialize(Par) {
    stopJob = 1;
    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_spmlConnectionCheckInitialize</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_spmlConnectionCheckSetFlag



function sapc_spmlConnectionCheckSetFlag(Par) {
    stopJob = 0;

    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_spmlConnectionCheckSetFlag</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_stopJobABAP

function sapc_stopJobABAP(Par) {

    var repName = "%$rep.$NAME%";

    if (uGetErrCount() &gt; 0) {
        uError("RFC connection to [" + repName + "] could NOT be established!");
        uStop("RFC connection to [" + repName + "] could NOT be established!");
    } else {
        uInfo("RFC connection to [" + repName + "] established successfully");
    }


    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1583208662570</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_stopJobABAP</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_stringToDate

function sapc_stringToDate(inStr_) {
    uInfo("sapc_stringToDate started with date [" + inStr_ + "]");
    if (inStr_ &amp;&amp; inStr_.split("-").length == 3) {
        importClass(java.util.Calendar);
        var retDate_ = Calendar.getInstance();
        // .set not existing anymore
        retDate_.set(inStr_.split("-")[0], inStr_.split("-")[1], inStr_.split("-")[2]);
        uInfo("sapc_stringToDate returning [" + retDate_ + "]");
        return retDate_;
    } else {
        uErrMsg(2, "sapc_stringToDate: [" + inStr_ + "] is not a valid date string.");
        return -1;
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1583915870300</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_stringToDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_timeStampToStringDate

function sapc_timeStampToStringDate(timeStamp_) {
    uInfo("sapc_timeStampToStringDate in: [" + timeStamp_ + "]");
    var retVal_ = "";
    if (timeStamp_) {
        importClass(java.util.Calendar);
        var timeStampCal = Calendar.getInstance();
        timeStampCal.setTimeInMillis(timeStamp_);
        var year = "" + timeStampCal.get(Calendar.YEAR);
        var month = "" + (timeStampCal.get(Calendar.MONTH) + 1);
        if (month.length == 1) month = "0" + month;
        var day = "" + timeStampCal.get(Calendar.DAY_OF_MONTH);
        if (day.length == 1) day = "0" + day;
        retVal_ = year + "-" + month + "-" + day;
    }
    uInfo("sapc_timeStampToStringDate out: [" + retVal_ + "]");
    return retVal_;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1583915764323</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_timeStampToStringDate</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_timeStampToStringDateTime

function sapc_timeStampToStringDateTime(timeStamp_) {
    uInfo("sapc_timeStampToStringDateTime in: [" + timeStamp_ + "]");
    var retVal_ = "";
    if (timeStamp_) {
        importClass(java.util.Calendar);
        var timeStampCal = Calendar.getInstance();
        timeStampCal.setTimeInMillis(timeStamp_);
        var year = "" + timeStampCal.get(Calendar.YEAR);
        var month = "" + (timeStampCal.get(Calendar.MONTH) + 1);
        if (month.length == 1) month = "0" + month;
        var day = "" + timeStampCal.get(Calendar.DAY_OF_MONTH);
        if (day.length == 1) day = "0" + day;
        var hour = "" + timeStampCal.get(Calendar.HOUR_OF_DAY);
        if (hour.length == 1) hour = "0" + hour;
        var min = "" + timeStampCal.get(Calendar.MINUTE);
        if (min.length == 1) min = "0" + min;
        var sec = "" + timeStampCal.get(Calendar.SECOND);
        if (sec.length == 1) sec = "0" + min;
        retVal_ = year + "-" + month + "-" + day + " " + hour + ":" + min + ":" + sec;
    }
    uInfo("sapc_timeStampToStringDateTime out: [" + retVal_ + "]");
    return retVal_;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1583915806350</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_timeStampToStringDateTime</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_toUpperCase

function sapc_toUpperCase(Par) {
    return Par.toUpperCase();
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_toUpperCase</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function	      : sapc_toUpperCaseMskeyValue
 * Category              : provisioning script
 * Short description	: set value of attribute MSKEYVALUE to upper case
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: entry of MX_PERSON
 * Parameter(s)		: MSKEY, MSKEYVALUE
 * Return value Cat.	: ---
 * Return value		: ---
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: // to scripts, attributes, inbuild functions, context vars, tables/views,
 *					               system/job/repository/global constants/variables
 *		            - inbuild function : uGetConstant
 *                       - inbuild function : uGetIDStore
 *                       - inbuild function : uIS_SetValue
 *                       - attribute        : MSKEYVALUE
 *                       - core constant    : SAPC_LOG_LEVEL
 *--------------------------------------------------------------------------------------------------------------------------*/
// Main function: sapc_toUpperCaseMskeyValue
// Main function: sapc_toUpperCase_MSKEYVALUE
// Input: MSKEY and MSKEYVALUE of current entry
// Output: MSKEYVALUE set to upper case letters

function sapc_toUpperCaseMskeyValue(Par) {
    Script _sapc_toUpperCaseMskeyValue _is _obsolete
    var script = "sapc_toUpperCaseMskeyValue::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debudMode = 0;


    // Input data
    var mskey = Par.get("MSKEY");
    var mskeyValue = Par.get("MSKEYVALUE");

    var currentIDStore = uGetIDStore();

    // Data processing
    mskeyValue = mskeyValue.toUpperCase();
    mskeyValue = mskeyValue + "$";

    var retValue = uIS_SetValue(mskey, currentIDStore, "MSKEYVALUE", mskeyValue);

    if (retValue.indexOf("!ERROR:") != -1) {
        uErrMsg(2, script + "MSKEYVALUE has not been changed successfully!");
    }

    mskeyValueSplit = mskeyValue.split("$");
    mskeyValue = mskeyValueSplit[0];

    retValue = uIS_SetValue(mskey, currentIDStore, "MSKEYVALUE", mskeyValue);

    if (logLevel &gt;= 2) uErrMsg(debudMode, script + "user mskey: [" + mskey + "] ; user mskey value: [" + mskeyValue + "]");

    if (retValue.indexOf("!ERROR:") != -1) {
        uErrMsg(2, script + "MSKEYVALUE has not been changed successfully!");
    }

    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_toUpperCaseMskeyValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_triggerJob V2CORE; PUBLIC

function sapc_triggerJob(Par) {
    var script = "sapc_triggerJob::";

    var mskey = Par.get("MSKEY");
    var requestorMskey = Par.get("REQUESTOR_MSKEY");
    var activity = Par.get("ACTIVITY");
    var groupName = Par.get("GROUP_NAME");

    var sql = "";
    var changeType = "";
    var jobName = "";
    var jobID = 0;
    var returnValue = "";
    var dbType = "%$ddm.databasetype%";

    uErrMsg(0, script + "Mskey [" + mskey + "] ; Activity: [" + activity + "]");

    // ------------------------
    // Specify the Change_Type

    // Set respective SQL statement
    if (dbType == 1) // MS-SQL 
    {
        sql = "SELECT SUBSTRING(Job_name, 0, 100) AS TYPE FROM MCMV_jobs " + " WHERE group_name IN ('" + groupName + "') " + " AND Job_name like '%" + activity + "%'";
    } else if (dbType == 2) // Oracle
    {
        sql = "SELECT SUBSTR(JOB_NAME, 0 , 100) as Type FROM MCMV_JOBS " + " WHERE group_name IN ('" + groupName + "') " + " AND JOB_NAME like '%" + activity + "%'";
    } else {
        uErrMsg(2, script + "Invalid database type: [" + dbType + "]");

        uSkip(1, 1, "WRONG DB TYPE");
    }

    changeType = uSelect(sql);

    if (changeType == "") {
        uErrMsg(1, script + "ChangeType could not be found!");
        uSkip(1, 1);
    }

    // SQL statement is valid for MS SQL and Oracle						
    sql = "SELECT Job_name FROM MCMV_jobs " + " WHERE group_name IN ('" + groupName + "') " + "AND Job_name = '" + changeType + "'";

    jobName = uSelect(sql);

    if (jobName == "") {
        uErrMsg(1, script + "jobName could not be found!");
        uSkip(1, 1);
    }

    //------------------------------------------------ 
    // find related Job to be executed 

    // SQL Statement is valid for MS SQL and Oracle
    sql = "SELECT jobid FROM MCMV_jobs " + " WHERE group_name IN ('" + groupName + "') " + "	AND Job_name = '" + jobName + "'";

    jobID = uSelect(sql);

    // uErrMsg(1, script + "JobID: " + jobID);

    if (jobID.length &gt; 0) {
        //------------------------------------------------ 
        // execute job 
        returnValue = uRunJobNow(jobID);

        if (returnValue.equals("")) {
            uErrMsg(0, script + "Job [" + jobName + "] with JobID " + jobID + " has been triggered successfully");
        } else {
            uErrMsg(2, script + "Job [" + jobName + "] with JobID " + jobID + " has NOT been triggered successfully");
        }
    } else {
        uErrMsg(2, script + "No JobID has been found for job [" + jobName + "]!");
    }

    return "";
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_triggerJob</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_triggerJobForReposOfRepoType
 
function sapc_triggerJobForReposOfRepoType(Par){ 
		//Example calling DSE internal function 
		//uStop("Terminated by user");
 
		return Par.toUpperCase(); 
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1702211741430</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_triggerJobForReposOfRepoType</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_triggerLockUnlockFromJob

function sapc_triggerLockUnlockFromJob(Par) {
    var script = "sapc_triggerLockUnlockFromJob::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    // Input data
    var userMskeyValue = Par.get("MSKEYVALUE");
    var repNotification = Par.get("REP_NOTIFICATION");
    var operationRequestorMskey = Par.get("SAPC_TEMP_REQUESTED_BY") + "";
    var operationTimeAndReason = Par.get("SAPC_IDEN_TEMP_LAST_LOCK_REASON_NEW") + "";

    // lockRep             : lock repository of the user
    // unlockRep           : unlock repository of the user
    // lockOnAllReps       : flag to lock all repositories 
    // unlockOnAllReps     : flag to unlock all repositories
    var lockRep = Par.get("REP_LOCK");
    var unLockRep = Par.get("REP_UNLOCK");
    var lockOnAllReps = Par.get("LOCK_ON_ALL_REP");
    var unLockOnAllReps = Par.get("UNLOCK_ON_ALL_REP");

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");
    var jobID = uGetConstant("ddm.mcjob");

    // New variables set in the context below
    var lockReps = "";
    var unLockReps = "";
    var lockAudit = "";

    var lockRepsCount = 0;
    var unLockRepsCount = 0;

    var accountReps = "";
    var accountRepsArray = "";
    var accountRepsArrayLength = "";
    var repID = "";
    var i = "";

    // Set lockReason, lockTime (structure: %$ddm.datetime8601%|%SAPC_IDEN_TEMP_LAST_LOCK_REASON_NEW% )
    var operationTimeAndReasonSplit = operationTimeAndReason.split("!!");
    var lockTime = operationTimeAndReasonSplit[0];
    var lockReason = operationTimeAndReasonSplit[1];

    // Get mskey of user
    var userMskey = uIS_Get(idStore, userMskeyValue);
    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "userMskey: " + userMskey);

    // get disabled status of user
    var userDisabled = uIS_GetValue(userMskey, idStore, "MX_DISABLED");
    if (userDisabled.indexOf("!ERROR:") != -1) userDisabled = "";
    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "User disabled value: " + userDisabled);

    // Log output for error analysis
    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "Called for userMskeyValue:  [" + userMskeyValue + "] ; userMskey: [" + userMskey + "] ; lockOnAllRepositories: [" + lockOnAllReps + "] ; unLockOnAllRepositories: [" + unLockOnAllReps + "] ; lockRepository: [" + lockRep + "] ; UnLockRepository: [" + unLockRep + "] ; operationTimeAndReason: [" + operationTimeAndReason + "] ; operationRequestorMskey: [" + operationRequestorMskey + "]");

    // ----------------------------------------------------------------------------------------------------------------
    // Exit script if nothing is to be processed -&gt; no repository to be processed
    if ((lockOnAllReps == "" || lockOnAllReps == null) &amp;&amp; (unLockOnAllReps == "" || unLockOnAllReps == null) &amp;&amp; (lockRep == "" || lockRep == null) &amp;&amp; (unLockRep == "" || unLockRep == null)) {
        if (logLevel &gt;= 2) uErrMsg(1, script + "Nothing to be processed.");
        return 0;
    }

    // ----------------------------------------------------------------------------------------------------------------
    // 1 - Get all repositories of the user

    // Create SQL statement to retrieve all repositories of the user
    if (lockOnAllReps == "1" || unLockOnAllReps == "1") {

        var sql = sapc_getSQLforUserRepositories();
        sql = uReplaceString(sql, "%USERMSKEY%", userMskey);

        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "SQL to get all repositories: " + sql);

        accountReps = uSelect(sql);

        accountRepsArray = accountReps.split("!!");
        accountRepsArrayLength = accountRepsArray.length;

        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "AccountRepositories: " + accountReps);
    }

    // ----------------------------------------------------------------------------------------------------------------
    // 2 - check if lock in all repositories is defined

    // If identity needs to be locked on all repositories -&gt; get the repositories and start the provisioning
    if (lockOnAllReps == "1" &amp;&amp; (unLockOnAllReps == "" || unLockOnAllReps == "0" || unLockOnAllReps == null)) {
        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "LockRepositories: " + lockReps);

        // -----------------------------------------------------------------------
        // global lock --&gt; set MX_DISABLED = 1

        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "Setting MX_DISABLED for user: " + userMskeyValue);

        retValue = uIS_SetValue(userMskey, idStore, "MX_DISABLED", "1");

        if (retValue.indexOf("!ERROR:") != -1) {
            uErrMsg(2, script + "Locking user [" + userMskeyValue + "] failed!");
        } else {
            lockReps = accountReps;
            lockRepsCount = accountRepsArrayLength;
        }
    }
    // If identity needs to be unlocked on all repositories -&gt; get the repositories and start the provisioning
    else if (unLockOnAllReps == "1" &amp;&amp; (lockOnAllReps == "" || lockOnAllReps == "0" || lockOnAllReps == null)) {
        if (logLevel &gt;= 2) uErrMsg(debugMode, script + "UnlockRepositories: " + unLockReps);

        // remove MX_Disabled if it has been set
        if (userDisabled == "1") {
            if (logLevel &gt;= 2) uErrMsg(debugMode, script + "removing MX_DISABLED for user: " + userMskeyValue);

            retValue = uIS_SetValue(userMskey, idStore, "MX_DISABLED", "");

            if (retValue.indexOf("!ERROR:") != -1) {
                uErrMsg(2, script + "Unlocking user [" + userMskeyValue + "] failed!");
            } else {
                unLockReps = accountReps;
                unLockRepsCount = accountRepsArrayLength;
            }
        }
    }
    // If a concrete repository has been defined
    else {
        // ----------------------------------------------------------------------------------------------------------------
        // 3 - get the repositories which have to be locked and the one which have to be unlocked

        // Process lock repository
        if (lockRep != null &amp;&amp; lockRep != "") {
            // Prepare data for audit
            lockReps = lockRep + "";
            lockRepsCount = 1;
        }

        // Process unlock repository
        if (unLockRep != null &amp;&amp; unLockRep != "") {
            // Prepare data for audit
            unLockReps = unLockRep + "";
            unLockRepsCount = 1;
        }
    }


    // ----------------------------------------------------------------------------------------------------------------
    // 4 - Processing lockReps if repositories listed
    if (lockRepsCount &gt;= 1) {
        if (logLevel &gt;= 2) uErrMsg(1, script + "Processing lockReps");

        lockRepsArray = lockReps.split("!!");

        for (i = 0; i &lt; lockRepsArray.length; i++) {
            if (lockRepsArray.length == 1) repName = lockRepsArray;
            else repName = lockRepsArray[i];

            if (logLevel &gt;= 2) uErrMsg(debugMode, script + "Current Repository Lock: " + repName);

            if (repName.length &gt; 0) {
                repID = sapc_getRepID(repName);

                // execute lock task of repository
                var lockIdentityTask = sapc_getRepConstant(repName + "!!" + "MX_HOOK7_TASK");

                if (logLevel &gt;= 3) uErrMsg(1, script + "lockIdentityTask: " + lockIdentityTask);

                auditIDNew = uProvision(userMskey, lockIdentityTask, 0, repID, "LOCK IDENTITY", 0);

                if (auditIDNew.indexOf("!ERROR:") != -1) {
                    uErrMsg(2, script + "Executing Lock Task [" + lockIdentityTask + "] for user [" + userMskeyValue + "] for repository [" + repName + "] failed");
                } else {
                    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "Disabling User [" + userMskeyValue + "] in repository [" + repName + "] has been triggered successfully with autidID [" + auditIDNew + "]");
                }

                // Adding current repository to attribute SAPC_IDEN_REPOSITORIES_LOCKED and SAPC_IDEN_REPOSITORIES_LOCKED_UI
                if (logLevel &gt;= 3) uErrMsg(1, script + "BEFORE adding to SAPC_IDEN_REPOSITORIES_LOCKED");

                retValue = uIS_SetValue(userMskey, idStore, "SAPC_IDEN_REPOSITORIES_LOCKED", repName, "JobID=" + jobID, 0);

                if (retValue.indexOf("!ERROR:") != -1) {
                    uErrMsg(2, script + "Adding repository [" + repName + "] to attribute [" + "SAPC_IDEN_REPOSITORIES_LOCKED" + "] failed");
                } else {
                    if (logLevel &gt;= 3) uErrMsg(debugMode, script + "AFTER adding to SAPC_IDEN_REPOSITORIES_LOCKED: [" + retValue + "]");
                }

                if (logLevel &gt;= 3) uErrMsg(1, script + "BEFORE adding to SAPC_IDEN_REPOSITORIES_LOCKED_UI");

                retValue = uIS_SetValue(userMskey, idStore, "SAPC_IDEN_REPOSITORIES_LOCKED_UI", repName, "JobID=" + jobID, 0);

                if (retValue.indexOf("!ERROR:") != -1) {
                    uErrMsg(2, script + "Adding repository [" + repName + "] to attribute [" + "SAPC_IDEN_REPOSITORIES_LOCKED_UI" + "] failed");
                } else {
                    if (logLevel &gt;= 3) uErrMsg(debugMode, script + "AFTER adding to SAPC_IDEN_REPOSITORIES_LOCKED_UI: [" + retValue + "]");
                }

                // Trigger notification to user
                //to do
            }
        }
    }

    // ----------------------------------------------------------------------------------------------------------------
    // 5 - Processing unlockReps if repositories listed
    if (unLockRepsCount &gt;= 1) {
        if (logLevel &gt;= 2) uErrMsg(1, script + "Processing unLockReps");

        unLockRepsArray = unLockReps.split("!!");

        for (i = 0; i &lt; unLockRepsArray.length; i++) {
            if (unLockRepsArray.length == 1) repName = unLockRepsArray;
            else repName = unLockRepsArray[i];

            if (logLevel &gt;= 2) uErrMsg(1, script + "Current Repository UnLock: " + repName);

            if (repName.length &gt; 0) {
                repID = sapc_getRepID(repName);

                // execute lock task of repository
                var unLockIdentityTask = sapc_getRepConstant(repName + "!!" + "MX_HOOK6_TASK");

                if (logLevel &gt;= 3) uErrMsg(1, script + "unLockIdentityTask: " + unLockIdentityTask);

                auditIDNew = uProvision(userMskey, unLockIdentityTask, 0, repID, "LOCK IDENTITY", 0);

                if (auditIDNew.indexOf("!ERROR:") != -1) {
                    uErrMsg(2, script + "Executing Unlock Task [" + unLockIdentityTask + "] for user [" + userMskeyValue + "] for repository [" + repName + "] failed");
                } else {
                    if (logLevel &gt;= 2) uErrMsg(1, script + "Enabling User [" + userMskeyValue + "] in repository [" + repName + "] has been triggered successfully with autidID [" + auditIDNew + "]");
                }

                // Removing current repository to attribute SAPC_IDEN_REPOSITORIES_LOCKED and SAPC_IDEN_REPOSITORIES_LOCKED_UI
                if (logLevel &gt;= 3) uErrMsg(1, script + "BEFORE removing from SAPC_IDEN_REPOSITORIES_LOCKED");

                retValue = uIS_SetValue(userMskey, idStore, "SAPC_IDEN_REPOSITORIES_LOCKED", repName, "JobId=" + jobID, 2);

                if (retValue.indexOf("!ERROR:") != -1) uErrMsg(2, script + "Adding repository [" + repName + "] to attribute [" + "SAPC_IDEN_REPOSITORIES_LOCKED" + "] failed");

                else if (logLevel &gt;= 3) uErrMsg(1, script + "AFTER removing from SAPC_IDEN_REPOSITORIES_LOCKED: [" + retValue + "]");

                if (logLevel &gt;= 3) uErrMsg(1, script + "BEFORE adding to SAPC_IDEN_REPOSITORIES_LOCKED_UI");

                retValue = uIS_SetValue(userMskey, idStore, "SAPC_IDEN_REPOSITORIES_LOCKED_UI", repName, "JobId=" + jobID, 2);

                if (retValue.indexOf("!ERROR:") != -1) uErrMsg(2, script + "Adding repository [" + repName + "] to attribute [" + "SAPC_IDEN_REPOSITORIES_LOCKED_UI" + "] failed");
                else if (logLevel &gt;= 3) uErrMsg(1, script + "AFTER adding to SAPC_IDEN_REPOSITORIES_LOCKED_UI: [" + retValue + "]");

                // Trigger notification to user
                //to do
            }
        }
    }

    // ----------------------------------------------------------------------------------------------------------------
    // Prepare data and set SAPC_IDEN_LOCK_UNLOCK_AUDIT

    // Set unLockReason, unLockTime (structure: %$ddm.datetime8601%|%SAPC_IDEN_TEMP_LAST_LOCK_REASON_NEW% )
    var operationTimeAndReasonArray = operationTimeAndReason.split("!!");
    var unLockTime = operationTimeAndReasonArray[0];
    var unLockReason = operationTimeAndReasonArray[1];

    lockReps = uReplaceString(lockReps, "!!", ",");
    unLockReps = uReplaceString(unLockReps, "!!", ",");

    // get mskey value of requestor
    var operationRequestorMskeyValue = uIS_GetValue(operationRequestorMskey, idStore, "MSKEYVALUE");

    lockAudit = lockAudit + "Timestamp: " + unLockTime + "\n" + "Lock performed on system(s): " + lockReps + "\n" + "Unlock performed on system(s): " + unLockReps + "\n" + "Operation performed by: " + operationRequestorMskeyValue + "\n" + "Reason: " + unLockReason;

    if (logLevel &gt;= 2) uErrMsg(1, script + "lockAudit: " + lockAudit);


    //retValue = uIS_SetValue(userMskey, idStore, "SAPC_IDEN_LOCK_UNLOCK_AUDIT", lockAudit, "JobId=" + jobID, 0);
    retValue = uIS_SetValue(userMskey, idStore, "SAPC_IDEN_DISABLE_AUDIT", lockAudit, "JobId=" + jobID, 0);

    if (retValue.indexOf("!ERROR:") != -1) {
        uErrMsg(2, script + "Setting AuditLock for user [" + userMskeyValue + "]  failed");
    }
    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_triggerLockUnlockFromJob</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_triggerResetPasswordFromJob

function sapc_triggerResetPasswordFromJob(Par) {
    var script = "sapc_triggerResetPasswordFromJob::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    // Input data
    var userMskeyValue = Par.get("MSKEYVALUE");
    var repName = Par.get("REP_NAME");
    var resetPwdTime = Par.get("RESET_PASSWORD_TIME");
    var resetPwdRequestor = Par.get("SAPC_TEMP_REQUESTED_BY");
    var curRepPackageID = "";

    var generatePassword = Par.get("GENERATE_PASSWORD");
    var passwordValue = Par.get("PASSWORD_VALUE");
    var passwordToBeEncrypted = "";

    if (generatePassword == "TRUE") {

        passwordToBeEncrypted = sapc_generatePassword();

        if (logLevel &gt;= 2) uErrMsg(debugMode, script + " Generated Password.");

    } else {
        if (passwordValue == null || passwordValue == "") {

            if (logLevel &gt;= 2) uErrMsg(debugMode, script + " No password has been provided.");

        } else {

            passwordToBeEncrypted = passwordValue;

            if (logLevel &gt;= 2) uErrMsg(debugMode, script + " User Input Password.");

        }
    }

    var resetPwdAudit = "";
    var retValue = "";

    var idStore = sapc_core_getPackageConstant("SAPC_MASTER_IDS_ID");
    var resetPwdPerformedByMskey = resetPwdRequestor;
    // Get mskey of user
    var userMskey = uIS_Get(idStore, userMskeyValue);

    if (logLevel &gt;= 2) uErrMsg(debugMode, script + "userMskeyValue: [" + userMskeyValue + "] ; userMskey: [" + userMskey + "] ; repName: [" + repName + "] ; resetPwdRequestor: [" + resetPwdRequestor + "]");

    if (userMskey.indexOf("!ERROR:") != -1) {
        if (logLevel &gt;= 2) uErrMsg(debugMode, script + " No mskey found for userMskeyValue [" + userMskeyValue + "]");
        uSkip(2, 1, "NO MSKEY FOUND");
    } else if (userMskey &lt; 0) {
        if (logLevel &gt;= 2) uErrMsg(debugMode, script + " Multiple mskey found for userMskeyValue [" + userMskeyValue + "]");
        uSkip(2, 1, "MULTIPLE MSKEY FOUND");
    } else if (userMskey &gt; 0 &amp;&amp; repName != "") {
        var repID = sapc_getRepID(repName);

        if (repID &gt; 0) {
            curRepPackageID = "";
            curRepPackageID = sapc_core_getRepositoryPackageID(repName);
            var pwdResetTask = "" + uGetPackageTaskID(curRepPackageID, "SetUserPassword");

            if (logLevel &gt;= 2) uErrMsg(debugMode, script + "Password reset task: [" + pwdResetTask + "] for repository [" + repName + "]");

            // Set password for specific repository
            var encryptedPassword = uDESEncrypt("", passwordToBeEncrypted);
            var systemSpecPasswordAttribute = "SAPC_IDEN_REP_ENCRYPTED_PASSWORD_" + repName;
            // If needed activate below line and comment the line with the systemSpecPasswordAttribute
            // retValue = uIS_SetValue(userMskey, idStore, "MX_ENCRYPTED_PASSWORD", encryptedPassword);
            retValue = uIS_SetValue(userMskey, idStore, systemSpecPasswordAttribute, encryptedPassword);

            // Trigger provisioning
            var result = uProvision(userMskey, pwdResetTask, 0, repID, "PASSWORD_RESET", 0);

            // -----------------------------------------------------------------------------------------------------------------------------------------
            // Prepare data and set SAPC_IDEN_RESET_PW_AUDIT

            var resetPwdPerformedByMskeyValue = uIS_GetValue(resetPwdPerformedByMskey, idStore, "MSKEYVALUE");

            resetPwdAudit = resetPwdAudit + "Timestamp: " + resetPwdTime + "\n" + "Reset password performed on system(s): " + repName + "\n" + "Operation performed by: " + resetPwdPerformedByMskeyValue + "\n";

            if (logLevel &gt;= 2) uErrMsg(debugMode, script + "Reset password audit: [" + resetPwdAudit + "]");

            retValue = uIS_SetValue(userMskey, idStore, "SAPC_IDEN_RESET_PW_AUDIT", resetPwdAudit);


        } else {
            if (logLevel &gt;= 2) uErrMsg(debugMode, script + "No repository found for repository name[" + repName + "]");
        }
    }

    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_triggerResetPasswordFromJob</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_uGetAuditID

function sapc_uGetAuditID(Par) {
    return uGetAuditID();
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_uGetAuditID</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * Script to call uIS_RepairEntry
 * Can be called with DSE Entry as parameter or with string parameter !! separated
 * Dependencies:
 *  - sapc_core_script_functions
 */

function sapc_uIS_RepairEntry(Par) {

    var scriptName = "sapc_uIS_RepairEntry";

    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    if (logLevel &gt;= 2) uErrMsg(1, "Starting " + scriptName + " with parameter " + Par);

    // check whether it is called in to Generic or to Identity Store
    var parArray = new Array();
    // Par instanceof Array did not work, obviously not an Array but objects are both -&gt; have to check Par for being a string
    if (Par.constructor == String) { // parameter is string -&gt; to identity store pass
        if (logLevel &gt;= 2) uErrMsg(1, "Parameter is string.");
        parArray = Par.split("!!");
    } else { // parameter is not a string -&gt; generic pass
        if (logLevel &gt;= 2) uErrMsg(1, "Parameter is DSE Entry.");
        parArray[0] = "" + Par.get("MSKEY");
    }
    uIS_RepairEntry(parArray[0]);
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_uIS_RepairEntry</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function       : sapc_uIS_SetValue
 * Category              : generic (Parameter can be DSE entry (Array) or !! separated string)
 * Short description     : set Value of object
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.    : Entry
 * Parameter(s)         :   MSKEY (if empty current entry), IS_ID (if empty current IDS), ATTRNAME, ATTRVALUE,
                                USERINFO (if empty name of task), OPERATION (if empty 0)
 *                          Operations:
 *                              0: Multivalue: Add / Single value: Replace or add (if not existing)
 *                              1: delete case sensitive
 *                              2: delete case insensitive
 * Return value Cat.    : ---
 * Return value         : ---
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies         : -sapc_core_script_functions
 *--------------------------------------------------------------------------------------------------------------------------*/


function sapc_uIS_SetValue(Par) {

    var rds = sapc_core_scriptHeader("sapc_uIS_SetValue", Par);

    // check whether it is called in to Generic or to Identity Store
    var parArray = new Array();
    // Par instanceof Array did not work, obviously not an Array but objects are both -&gt; have to check Par for being a string
    if (Par.constructor == String) { // parameter is string -&gt; to identity store pass
        if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Parameter is a string.");
        parArray = Par.split("!!");
    } else { // parameter is not a string -&gt; generic pass
        if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Parameter is of type object.");
        parArray[0] = "" + Par.get("MSKEY");
        parArray[1] = "" + Par.get("IS_ID");
        parArray[2] = "" + Par.get("ATTRNAME");
        parArray[3] = "" + Par.get("ATTRVALUE");
        parArray[4] = "" + Par.get("USERINFO");
        parArray[5] = "" + Par.get("OPERATION");
    }


    // check mskey is given &amp; its a task; if not take current object
    if (parArray[0] == "" || parArray[0] == null || parArray[0] == "null") {
        if (rds.auditID == 0) { // not a task
            uErrMsg(2, rds.outPrefix + "Error: Missing MSKEY parameter.");
            uSkip(1, 2, "Missing MSKEY parameter.");
        } else {
            parArray[0] = uGetEntryID();
        }
    }

    // check ids is given; if not take current ids
    if (parArray[1] == "" || parArray[1] == null || parArray[1] == "null") parArray[1] = rds.masterIDS;

    // check ids user given; if not take current Job/Task
    if (parArray[4] == "" || parArray[4] == null || parArray[4] == "null") parArray[4] = rds.taskName;

    // check ids operation given; if not take default = 0
    if (parArray[5] == "" || parArray[5] == null || parArray[5] == "null") parArray[5] = "0";

    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Calling uIS_SetValue for entry [" + parArray[0] + "] on attribute [" + parArray[2] + "] to be set to [" + parArray[3] + "].");

    // uIS_SetValue(&lt;Entry ID&gt;,  &lt;IdStore&gt;,   &lt;Attribute Name&gt;, &lt;Attribute Value&gt;, [&lt;User ID&gt;], [&lt;Attribute Operation&gt;]);
    var retVal = uIS_SetValue(parArray[0], parArray[1], parArray[2], parArray[3], parArray[4], parArray[5]);

    if (rds.logLevel &gt;= 2) uErrMsg(1, rds.outPrefix + "Return Value of uIS_SetValue: " + retVal);
    return retVal;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_uIS_SetValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function       : sapc_uIS_nGetValues
 * Category              : generic (Parameter can be DSE entry (Array) or !! separated string)
 * Short description     : get n Values of object with advanced logic: uIS_nGetValues does not work for member - attributes, this one does
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.    : Entry
 * Parameter(s)         :   Attribute Name (ATTRNAME)[, MSKEY (MSKEY), Separator (SEPARATOR)]
 * Return value Cat.    : Attribute (list separated by !! or given separator)
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies         : -sapc_core_script_functions
 *----------------------------------------------------------------------------------------------------------------------------
 * History				: 2021-12-20 SAP NN: line 60: mskey not defined -&gt; replace by parArray[1]
 *						: 2022-09-13 SAP NN: line 46: if MSKEY not given, take current entry, writing into wrong parameter ([0] instead of [1])
 *						: 2022-09-14 SAP NN: line 46: if / else wrong, even if member-attribut, still uIS_nGetValue was called
 *--------------------------------------------------------------------------------------------------------------------------*/


function sapc_uIS_nGetValues(Par) {

    var rds = sapc_core_scriptHeader("sapc_uIS_nGetValues", Par);

    // check whether it is called in to Generic or to Identity Store
    var parArray = [];
    // Par instanceof Array did not work, obviously not an Array but objects are both -&gt; have to check Par for being a string
    if (Par.constructor == String) { // parameter is string -&gt; to identity store pass
        sapc_uInfo(rds.outPrefix + "Parameter is a string.");
        parArray = Par.split("!!");
    } else { // parameter is not a string -&gt; generic pass
        sapc_uInfo(rds.outPrefix + "Parameter is of type object.");
        parArray[0] = "" + Par.get("ATTRNAME");
        parArray[1] = "" + Par.get("MSKEY");
        parArray[2] = "" + Par.get("SEPARATOR");
    }

    // check attrName is given
    if (parArray[0] == "" || parArray[0] == null || parArray[0] == "null") {
        uErrMsg(2, rds.outPrefix + "Error: Missing parameter ATTRNAME.");
        uSkip(1, 2, "Missing parameter ATTRNAME.");
    }

    // check mskey is given &amp; its a task; if not given but is task, take current object
    if (parArray[1] == "" || parArray[1] == null || parArray[1] == "null") {
        if (rds.auditID == 0) { // not a task
            uErrMsg(2, rds.outPrefix + "Error: Missing MSKEY parameter.");
            uSkip(1, 2, "Missing MSKEY parameter.");
        } else {
            parArray[1] = uGetEntryID();
        }
    }

    // check separator is given
    if (parArray[2] == "" || parArray[2] == null || parArray[2] == "null") parArray[2] = "!!";

    var retVal = "";
    if (parArray[0].indexOf("MXMEMBER") == 0) { // Member Attributes dont work for uIS_nGetValues
        sapc_uInfo(rds.outPrefix + "[" + parArray[0] + "] is a MXMEMBER_* attribute.");

        var select = "select mcThisMSKEY from idmv_link_ext %NOLOCK% where mcThisOCName = '" + parArray[0].substring(parArray[0].indexOf("_") + 1) + "' and mcAttrName = 'MXREF_'||(select mcEntryType from idmv_entry_simple where mcmskey = " + parArray[1] + ") and mcexecstate = 1 and mcOtherMSKEY = " + parArray[1];
        //select mcThisMSKEY from idmv_link_ext where mcThisOCName = 'MX_PERSON' and mcAttrName = 'MXREF_'||(select mcEntryType from idmv_entry_simple where mcmskey = 5029 ) and mcexecstate = 1 and mcOtherMSKEY = 5029;
        sapc_uInfo(rds.outPrefix + "Query to get attribute [" + parArray[0] + "]: [" + select + "]");
        retVal += uSelect(select);
        sapc_uInfo(rds.outPrefix + "[" + parArray[0] + "] of [" + parArray[1] + "]: [" + retVal + "]");
        retVal = uReplaceString(retVal, "!!", parArray[2]);
    } else {
        retVal += uIS_nGetValues(parArray[1], parArray[0], parArray[2]);
        // uIS_nGetValues(&lt;MSKey&gt;, &lt;Attribute Name&gt; [,Separator]);
    }
    sapc_uInfo(rds.outPrefix + "Return Value [" + retVal + "]");
    return retVal;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1663147836443</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_uIS_nGetValues</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*---------------------------------------------------------------------------------------------------------------------------
 * Script/Function		: sapc_uProvision
 * Category				: provisioning script
 * Short description	: Call uProvision via script (toGeneric)
 *----------------------------------------------------------------------------------------------------------------------------
 * Parameter(s) Cat.	: Entry
 * Parameter(s)			:	MSKEY*,
 *							FULLQUALIFIEDNAME* // &lt;package name&gt;:task.&lt;task_name&gt; // com.sap.rds.idm.forms.default:task.SAPC_Reset_Password
 *							REPID
 *							MESSAGE
 *----------------------------------------------------------------------------------------------------------------------------
 * Dependencies		: sapc_core_script_functions, sapc_core_getDBcommands
 * Change History	: 2020-01-24 SAP NN: Created (SP3),
 *					: 2021-01-18 SAP NN: Line 27 (repid = ... instead of message = ...) + line 32 (did not use sqlGetTask)
 *--------------------------------------------------------------------------------------------------------------------------*/

function sapc_uProvision(Par) {

    var rds = sapc_core_scriptHeader("sapc_uProvision", Par);

    var repid = Par.get("REPID");
    if (!repid || repid.indexOf("!ERROR") != -1) repid = 0;

    var message = Par.get("MESSAGE");
    if (!message || message.indexOf("!ERROR") != -1) message = "Initiated by " + rds.taskName;

    var sqlGetTask = "select t.TaskID from MXP_Tasks t, mc_package pck where pck.mcPackageID = t.mcPackageID ";
    sqlGetTask += " and pck.mcQualifiedName " + sapc_core_getDBcommands("CONCAT") + "':task.' " + sapc_core_getDBcommands("CONCAT") + " t.TaskName ";
    sqlGetTask += " = '" + Par.get("FULLQUALIFIEDNAME") + "' and t.mcObsoletedBy is null ";

    sapc_uInfo(rds.outPrefix + " SQL to get task for FQN [" + Par.get("FULLQUALIFIEDNAME") + "]: [" + sqlGetTask + "]");
    var taskToStart = uSelect(sqlGetTask);
    sapc_uInfo(rds.outPrefix + " 'ID of task for FQN [" + Par.get("FULLQUALIFIEDNAME") + "]: [" + taskToStart + "]");

    if (!taskToStart || taskToStart.indexOf("!ERROR") != -1 || taskToStart.toUpperCase() == "NULL") {
        uErrMsg(2, rds.outPrefix + "Could not get task ID for FQN [" + Par.get("FULLQUALIFIEDNAME") + "]. Return value from DB is [" + taskToStart + "]");
        uSkip(1, 2, rds.outPrefix + "Could not get task ID");
    }

    var OutString = uProvision(Par.get("MSKEY"), taskToStart, rds.auditID, repid, message, 1);
    //uProvision(&lt;Entry ID&gt;, &lt;Task ID&gt;, &lt;Audit Ref&gt;, &lt;Repository ID&gt;, &lt;Msg&gt;, &lt;Standalone=1, Event=0&gt;);

    sapc_uInfo(rds.outPrefix + "Audit ID of triggered task: [" + OutString + "]");

    if (OutString.indexOf("!ERROR") &gt;= 0) {
        uErrMsg(2, rds.outPrefix + OutString);
        uSkip(1, 2, rds.outPrefix + OutString);
    }
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1611011386450</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_uProvision</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function:sapc_uSleep

function sapc_uSleep(Par) {

    var script = "sapc_uSleep::";
    var logLevel = sapc_core_getPackageConstant("SAPC_LOG_LEVEL");
    var debugMode = 0;

    var waitTimeMS = Par;

    if (logLevel &gt;= 2) uErrMsg(1, "Start of " + script + " with waitTimeMS: " + waitTimeMS);

    uSleep(waitTimeMS);

    return "";

}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_uSleep</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>// Main function: sapc_updateMskeyValue
// update MskeyValue of Request
function sapc_updateMskeyValue(Par) {
    var script = "sapc_updateMskeyValue::";

    var mskey = Par.get("MSKEY");

    var date = Par.get("DATE");
    var requestorMskey = Par.get("REQUESTOR_MSKEY");
    var activity = Par.get("ACTIVITY");

    var idStore = uGetIDStore();

    var requestorMskeyValue = uIS_sGetValue(requestorMskey, idStore, "MSKEYVALUE", 0);

    uErrMsg(1, script + "MSKEY: [" + mskey + "] ; Date: [" + date + "] ; Activity: [" + activity + "] ; RequestorMskeyValue: [" + requestorMskeyValue + "]");

    //var uniqueValue = type + ":" + activity + ":" + date + ":" + requestorMskeyValue;
    var uniqueValue = activity + ":" + date + ":" + requestorMskeyValue;

    var returnValue = uIS_SetValue(mskey, idStore, "DISPLAYNAME", uniqueValue);

    uniqueValue = uReplaceString(uniqueValue, "SAPC ", "SAPC_");
    uniqueValue = uReplaceString(uniqueValue, " ", "");

    returnValue = uIS_SetValue(mskey, idStore, "MSKEYVALUE", uniqueValue);

    //var returnValue = uIS_SetValue(mskey, idStore, "DISPLAYNAME", uniqueValue);

    return 0;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTNAME>sapc_updateMskeyValue</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
<SCRIPT>
<MCENABLED>1</MCENABLED>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCPROTECTED>0</MCPROTECTED>
<MCSCRIPTDEFINITION>/*
 * 2020-03-18 SAP NN: it seems that a wait task only waits as long as all audits end in state ok,
 *		but if a child audit ends in error, its breaking
 *		This script waits for all child audits and continues no matter the state
 * In: TIMEOUT (Timeount in s, default 600), FAILONTIMEOUT (true or false, error on timeout else continue, default false) -&gt; !!-Separated String or Hashmap
 * 2020-06-17 SAP NN: made Par string or hashmap
 * 2022-04-13 SAP NN: also check for audits where root audit is current, otherwise e.g. Submit AC Request would not be considered
 * 2023-01-10 SAP NN: missing brackets in query select ... auditid = ... or refaudit = ... -&gt; (auditid = ... or refaudit = ...)
 */

function sapc_waitForPendingAudits(Par) {

    var timeout;
    var failOnTimeout;

    if (Par == "" || Par == null) { // !Par not working here if it is called in toGeneric
        uInfo("sapc_waitForPendingAudits: Called without parameters, using defaults (600 seconds, no error on timeout)");
        timeout = 600;
        failOnTimeout = false;
    } else {
        if (Par.constructor == String) { // parameter is string -&gt; to identity store pass
            uInfo("sapc_waitForPendingAudits: Parameter is a string.");
            var parArray = Par.split("!!");
            timeout = parArray[0];
            failOnTimeout = parArray[1];
        } else { // parameter is not a string -&gt; generic pass
            uInfo("sapc_waitForPendingAudits: Parameter is of type object.");
            timeout = Par.get("TIMEOUT");
            failOnTimeout = Par.get("FAILONTIMEOUT");
        }

        if (!timeout || timeout.indexOf("!ERROR") != -1) {
            uInfo("sapc_waitForPendingAudits: No timeout value provided, using default 600 seconds");
            timeout = 600;
        } else if (isNaN(timeout)) {
            uError("sapc_waitForPendingAudits: Parameter TIMEOUT not numeric [" + timeout + "]");
            uSkip(1, 2, "sapc_waitForPendingAudits: Parameter TIMEOUT not numeric [" + timeout + "]");
        }

        if (!failOnTimeout || failOnTimeout.indexOf("!ERROR") != -1) {
            uInfo("sapc_waitForPendingAudits: No option to fail on timeout provided, using default false");
            failOnTimeout = false;
        } else if (failOnTimeout.toUpperCase() == "TRUE") {
            failOnTimeout = true;
        } else {
            failOnTimeout = false;
        }
    }



    var auditRunningList = "-1, 0, 1, 20, 21, 37";

    var running = true;
    var startTime = new Date().getTime();
    var auditid = uGetAuditID();
    var timedout = false;
    var sql;

    do {
        // --- check for running tasks on audit
        // 2022-04-13 SAP NN: also check for audits where root audit is current, otherwise e.g. Submit AC Request would not be considered
        // 2023-01-10 SAP NN: missing brackets in query select ... auditid = ... or refaudit = ... -&gt; (auditid = ... or refaudit = ...)
        sql = "select count (*) from mxp_audit where (auditid = " + auditid + " or refaudit = " + auditid + " or auditroot = " + auditid + ") ";
        sql += " and provstatus in (" + auditRunningList + ")";
        var numRunningTasks = uSelect(sql);
        uInfo("sapc_waitForPendingAudits: Nr. of tasks running for audit [" + auditid + "] [" + numRunningTasks + "].");
        if (numRunningTasks == 1) { // not 0 but 1 cos itself is still running
            uInfo("sapc_waitForPendingAudits: Audit [" + auditid + "] completed -&gt; continue.");
            running = false;
        } else {
            sql = "select * from mxp_audit where (auditid = " + auditid + " or refaudit = " + auditid + " or auditroot = " + auditid + ") ";
            sql += " and provstatus in (" + auditRunningList + ")";
            uInfo("sapc_waitForPendingAudits: Tasks running for audit [" + auditid + "] [" + uSelect(sql, "|-|") + "].");
        }
        // --- check for timeout
        if (new Date().getTime() - startTime &gt; timeout * 1000) {
            uWarning("sapc_waitForPendingAudits: Timeout [" + timeout + "] reached.");
            if (failOnTimeout) {
                uError("sapc_waitForPendingAudits: timout [" + timeout + "] reached -&gt; error");
                uSkip(1, 2, "sapc_waitForPendingAudits: timout [" + timeout + "] reached -&gt; error");
            } else {
                uWarning("sapc_waitForPendingAudits: timout [" + timeout + "] reached -&gt; continuing");
                timedout = true;
                running = false;
            }
        }
        uSleep(1000);
    } while (running);

    if (timedout &amp;&amp; failOnTimeout) {
        uError("sapc_waitForPendingAudits: timed out after [" + (new Date().getTime() - startTime) / 1000 + "] seconds and is supposed to fail on timeout");
        uSkip(1, 2, "timed out after [" + (new Date().getTime() - startTime) * 1000 + "] seconds and is supposed to fail on timeout");
    }

    uWarning("sapc_waitForPendingAudits: been waiting [" + (new Date().getTime() - startTime) / 1000 + "] seconds");
    return Par;
}</MCSCRIPTDEFINITION>
<MCSCRIPTLANGUAGE>JScript</MCSCRIPTLANGUAGE>
<MCSCRIPTLASTCHANGE>1676031526937</MCSCRIPTLASTCHANGE>
<MCSCRIPTNAME>sapc_waitForPendingAudits</MCSCRIPTNAME>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
</SCRIPT>
</PACKAGE_SCRIPTS>
<JOBS>
<JOB JOBGUID="0A5B0C20-556D-4869-8382-36990553543E" MCPACKAGEID="com.sap.rds.idm.core">
<ACTIVE>1</ACTIVE>
<AUTOCREATED>0</AUTOCREATED>
<BOOTSTRAPJOB>0</BOOTSTRAPJOB>
<CHANGED_BY>MXMC_admin</CHANGED_BY>
<CHANGED_DATE>1702211575353</CHANGED_DATE>
<ENGINE_TYPE>2</ENGINE_TYPE>
<JOBDEFINITION>
<mx:EMS xmlns:mx="http://www.maxware.com/EMS">
<mx:GUID>0A5B0C20-556D-4869-8382-36990553543E</mx:GUID>
<mx:VERSION>1.0</mx:VERSION>
<mx:DSEJobs>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="SAPC Assign Account Privilege"/>
</mx:Sequence>
<mx:Job name="SAPC Assign Account Privilege">
<mx:Description/>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="0d9f597d-0450-43e8-b79e-246c957e76c1"/>
</mx:Sequence>
<mx:Globals/>
<mx:Functions/>
<mx:Common>
<ENGINETYPE>1</ENGINETYPE>
<SCRIPTENG>null</SCRIPTENG>
<EVLOG>0</EVLOG>
<ERRLOG>%$ddm.ddmpath%\DSE.log</ERRLOG>
<XLRESET>1</XLRESET>
<PASSDOC>null</PASSDOC>
<SNMPTRAPLEVEL>0</SNMPTRAPLEVEL>
<MAXERROR>0</MAXERROR>
<LOGLIMIT>25</LOGLIMIT>
<RIGHT_TRIM>0</RIGHT_TRIM>
<MCLOGLEVEL>1</MCLOGLEVEL>
</mx:Common>
<mx:Pass name="0d9f597d-0450-43e8-b79e-246c957e76c1">
<TYPE>ToIDStore</TYPE>
<DESCRIPTION>SAPC Assign Account Privilege</DESCRIPTION>
<REPOSITORY>0</REPOSITORY>
<MAXDELETE>5%</MAXDELETE>
<AUDITLEVEL>0</AUDITLEVEL>
<DELTAENABLED>0</DELTAENABLED>
<SKIP>0</SKIP>
<JUSTDELTA>0</JUSTDELTA>
<MARKDEL>0</MARKDEL>
<AUTODELETE>0</AUTODELETE>
<CURRTAB>2</CURRTAB>
<READFROMPVO>0</READFROMPVO>
<FILTEREDITSTATUS>0</FILTEREDITSTATUS>
<USEIDSTORE>1</USEIDSTORE>
<SOURCEENTRYTYPE>0</SOURCEENTRYTYPE>
<IDSTORE>%ID_STORE%</IDSTORE>
<USERINFO>JobId=%$ddm.mcjob%</USERINFO>
<DELIMITER>|</DELIMITER>
<STOREID>-- Self --</STOREID>
<DATABASEURL>%$ddm.identitycenter%</DATABASEURL>
<PROBE>0</PROBE>
<SOURCEREPOSITORY>0</SOURCEREPOSITORY>
<mx:Class>
<mx:attr name="MSKEYVALUE">
<mx:value>%MSKEYVALUE%</mx:value>
</mx:attr>
<mx:attr name="MX_ENTRYTYPE">
<mx:value>MX_PERSON</mx:value>
</mx:attr>
<mx:attr name="changetype">
<mx:value>modify</mx:value>
</mx:attr>
<mx:attr name="MXREF_MX_PRIVILEGE">
<mx:value>{A}&lt;PRIV:%$rep.$NAME%:ONLY&gt;</mx:value>
</mx:attr>
</mx:Class>
</mx:Pass>
</mx:Job>
</mx:DSEJobs>
</mx:EMS>
</JOBDEFINITION>
<MAX_LOGENTRIES>100</MAX_LOGENTRIES>
<MCPUBLIC>0</MCPUBLIC>
<MCREFERENCESTATUS>-1</MCREFERENCESTATUS>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
<MCSOURCEGUID>0A5B0C20-556D-4869-8382-36990553543E</MCSOURCEGUID>
<MULTIPROVISION>0</MULTIPROVISION>
<MXPROTECTED>0</MXPROTECTED>
<NAME>SAPC Assign Account Privilege</NAME>
<PRIORITY_ACTUAL>20</PRIORITY_ACTUAL>
<PRIORITY_DEF>20</PRIORITY_DEF>
<PROVISION>1</PROVISION>
<REVISION_NUMBER>0</REVISION_NUMBER>
<SCHEDULE_RULE>Provision</SCHEDULE_RULE>
<STATE>1</STATE>
</JOB>
<JOB JOBGUID="1CB97202-9A53-41FC-813A-3D5B3C0DD530" MCPACKAGEID="com.sap.rds.idm.core">
<ACTIVE>1</ACTIVE>
<AUTOCREATED>0</AUTOCREATED>
<BOOTSTRAPJOB>0</BOOTSTRAPJOB>
<CHANGED_BY>MXMC_admin</CHANGED_BY>
<CHANGED_DATE>1732719149787</CHANGED_DATE>
<ENGINE_TYPE>2</ENGINE_TYPE>
<JOBDEFINITION>
<mx:EMS xmlns:mx="http://www.maxware.com/EMS">
<mx:GUID>40A4F8A8-C8EE-4840-AE61-43B3E044B734</mx:GUID>
<mx:VERSION>1.0</mx:VERSION>
<mx:DSEJobs>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="SAPC_ModifyValidity"/>
</mx:Sequence>
<mx:Job name="SAPC_ModifyValidity">
<mx:Description/>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="483e2493-bed3-4f62-982e-1db425401e16"/>
</mx:Sequence>
<mx:Globals/>

<mx:Common>
<ENGINETYPE>1</ENGINETYPE>
<SCRIPTENG>null</SCRIPTENG>
<EVLOG>0</EVLOG>
<ERRLOG>%$ddm.ddmpath%\DSE.log</ERRLOG>
<XLRESET>1</XLRESET>
<PASSDOC>null</PASSDOC>
<SNMPTRAPLEVEL>0</SNMPTRAPLEVEL>
<MAXERROR>0</MAXERROR>
<LOGLIMIT>25</LOGLIMIT>
<RIGHT_TRIM>0</RIGHT_TRIM>
<MCLOGLEVEL>1</MCLOGLEVEL>
</mx:Common>

<mx:Pass name="483e2493-bed3-4f62-982e-1db425401e16">
            <TYPE>To Generic</TYPE>
            <DESCRIPTION>SAPC Modify Validity</DESCRIPTION>
            <REPOSITORY>0</REPOSITORY>
<MAXDELETE>5%</MAXDELETE>
<AUDITLEVEL>0</AUDITLEVEL>
<DELTAENABLED>0</DELTAENABLED>
<SKIP>1</SKIP>
<JUSTDELTA>0</JUSTDELTA>
<MARKDEL>0</MARKDEL>
<AUTODELETE>0</AUTODELETE>
<CURRTAB>2</CURRTAB>
<READFROMPVO>1</READFROMPVO>
<FILTEREDITSTATUS>0</FILTEREDITSTATUS>
<USEIDSTORE>0</USEIDSTORE>
<IDSTORE>null</IDSTORE>
<SOURCEENTRYTYPE>0</SOURCEENTRYTYPE>
<SCRIPTNEXT>sapc_handleModifyValidity</SCRIPTNEXT>
<mx:Class>
<mx:attr name="PENDING_MSKEY">
<mx:value>%MSKEY%</mx:value>
</mx:attr>
<mx:attr name="PENDING_OPERATION">
<mx:value>%MX_OPERATION%</mx:value>
</mx:attr>
<mx:attr name="USER_MSKEYVALUE">
<mx:value>%SUBJECT.MSKEYVALUE%</mx:value>
</mx:attr>
<mx:attr name="USER_REP_ACCOUNT">
<mx:value>%SUBJECT.ACCOUNT%$rep.$NAME%%</mx:value>
</mx:attr>
<mx:attr name="USER_DISPLAYNAME">
<mx:value>%SUBJECT.DISPLAYNAME%</mx:value>
</mx:attr>
<mx:attr name="REP_NAME">
<mx:value>%$rep.$NAME%</mx:value>
</mx:attr>
<mx:attr name="PRIV_MSKEYVALUE">
<mx:value>%TARGET.MSKEYVALUE%</mx:value>
</mx:attr>
<mx:attr name="#LINK_VALIDFROM">
<mx:value>%LINK.ValidFrom%</mx:value>
</mx:attr>
<mx:attr name="LINK_VALIDFROM">
<mx:value>%MX_VALIDFROM_NEW%</mx:value>
</mx:attr>
<mx:attr name="#LINK_VALIDTO">
<mx:value>%LINK.ValidTo%</mx:value>
</mx:attr>
<mx:attr name="LINK_VALIDTO">
<mx:value>%MX_VALIDTO_NEW%</mx:value>
</mx:attr>
<mx:attr name="TASKTOEXECUTE">
<mx:value>AssignUserMembership</mx:value>
</mx:attr>
</mx:Class>
</mx:Pass>

<mx:Functions>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_handleModifyValidity"/>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_core_script_functions"/>
</mx:Functions>
</mx:Job>
</mx:DSEJobs>
</mx:EMS>
</JOBDEFINITION>
<MAX_LOGENTRIES>100</MAX_LOGENTRIES>
<MCPUBLIC>0</MCPUBLIC>
<MCREFERENCESTATUS>-1</MCREFERENCESTATUS>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
<MCSOURCEGUID>1CB97202-9A53-41FC-813A-3D5B3C0DD530</MCSOURCEGUID>
<MULTIPROVISION>0</MULTIPROVISION>
<MXPROTECTED>0</MXPROTECTED>
<NAME>SAPC_ModifyValidity</NAME>
<PRIORITY_ACTUAL>20</PRIORITY_ACTUAL>
<PRIORITY_DEF>20</PRIORITY_DEF>
<PROVISION>1</PROVISION>
<REVISION_NUMBER>0</REVISION_NUMBER>
<SCHEDULE_RULE>Provision</SCHEDULE_RULE>
<STATE>1</STATE>
</JOB>
<JOB JOBGUID="27FE45E5-0F4F-4827-AE16-68F343366161" MCPACKAGEID="com.sap.rds.idm.core">
<ACTIVE>1</ACTIVE>
<AUTOCREATED>0</AUTOCREATED>
<BOOTSTRAPJOB>0</BOOTSTRAPJOB>
<CHANGED_BY>MXMC_admin</CHANGED_BY>
<CHANGED_DATE>1702211575260</CHANGED_DATE>
<ENGINE_TYPE>2</ENGINE_TYPE>
<JOBDEFINITION>
<mx:EMS xmlns:mx="http://www.maxware.com/EMS">
<mx:GUID>3120401F-7F21-441B-A8BE-98E2F71EE56E</mx:GUID>
<mx:VERSION>1.0</mx:VERSION>
<mx:DSEJobs>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="Assignment Notification"/>
</mx:Sequence>
<mx:Job name="Assignment Notification">
<mx:Description/>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="7FAA82CB-5F9A-46EB-BA7A-8FF0CE6C77D5"/>
</mx:Sequence>
<mx:Globals/>
<mx:Common>
<ENGINETYPE>1</ENGINETYPE>
<SCRIPTENG>null</SCRIPTENG>
<EVLOG>0</EVLOG>
<ERRLOG>%$ddm.ddmpath%\DSE.log</ERRLOG>
<XLRESET>1</XLRESET>
<PASSDOC>null</PASSDOC>
<SNMPTRAPLEVEL>0</SNMPTRAPLEVEL>
<MAXERROR>0</MAXERROR>
<LOGLIMIT>200</LOGLIMIT>
<RIGHT_TRIM>1</RIGHT_TRIM>
<MCLOGLEVEL>1</MCLOGLEVEL>
<ERRFUNCTION>null</ERRFUNCTION>
<SNMPREMOTEHOST>null</SNMPREMOTEHOST>
</mx:Common>
<mx:Pass name="7FAA82CB-5F9A-46EB-BA7A-8FF0CE6C77D5">
<TYPE>To Generic</TYPE>
<DESCRIPTION>SAPC - Send Notification</DESCRIPTION>
<REPOSITORY>0</REPOSITORY>
<PINITIALIZE>sapc_wait30Seconds</PINITIALIZE>
<MAXDELETE>5%</MAXDELETE>
<AUDITLEVEL>0</AUDITLEVEL>
<DELTAENABLED>0</DELTAENABLED>
<SKIP>1</SKIP>
<JUSTDELTA>0</JUSTDELTA>
<MARKDEL>0</MARKDEL>
<AUTODELETE>0</AUTODELETE>
<CURRTAB>2</CURRTAB>
<READFROMPVO>1</READFROMPVO>
<FILTEREDITSTATUS>0</FILTEREDITSTATUS>
<USEIDSTORE>0</USEIDSTORE>
<IDSTORE>null</IDSTORE>
<SOURCEENTRYTYPE>0</SOURCEENTRYTYPE>
<SCRIPTNEXT>sapc_sendNotification</SCRIPTNEXT>
<mx:Class>
<mx:attr name="MSKEY">
<mx:value>%MSKEY%</mx:value>
</mx:attr>
<mx:attr name="DEBUGSTATE">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(MAIL_DEBUG!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="DEBUGRCPT">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(MAIL_DEBUG_RECIPIENTS!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="SMTPHOST">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(MAIL_SMTP_HOST!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="SMTPPORT">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(MAIL_SMTP_PORT!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="ORIGINATOR">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(MAIL_ORIGINATOR!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="MAILATTR">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(DEFAULT_MAIL_ATTRIBUTE!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="#">
<mx:value>The URL of your web-ui is set in package constant MX_GUI_URL_PREFIX and generated automatically from that</mx:value>
</mx:attr>
<mx:attr name="SYSTEMURL">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(MX_GUI_URL_PREFIX!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="#">
<mx:value>If no language is set on the user or user specifies language that has no template, use this language:</mx:value>
</mx:attr>
<mx:attr name="DEFAULTLANGUAGE">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(DEFAULT_MAIL_LANGUAGE!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="#">
<mx:value>If repository doesnt define language attribute, use default:</mx:value>
</mx:attr>
<mx:attr name="LANGATTR">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(MAIL_LANGUAGEATTRIBUTE!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="DEFAULTLANGATTR">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(DEFAULT_MAIL_LANGUAGE_ATTRIBUTE!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="#">
<mx:value>Date values can be cut after the first occurrence of a char. "." used on  (22-12-2012 11:24:03.999) to remove milliseconds from the time</mx:value>
</mx:attr>
<mx:attr name="CUTDATEAT">
<mx:value>.</mx:value>
</mx:attr>
<mx:attr name="#">
<mx:value>Default character encoding of template files. Can be overriden using CHARENC=.... per file in template list parameters</mx:value>
</mx:attr>
<mx:attr name="CHARENC">
<mx:value>$FUNCTION.sapc_core_getPackageConstant(DEFAULT_CHAR_ENCODING!!com.sap.idm.util.notification)$$</mx:value>
</mx:attr>
<mx:attr name="#">
<mx:value>Supported encodings US-ASCII,ISO-8859-1,UTF-8,UTF-16BE,UTF-16LE,UTF-16</mx:value>
</mx:attr>
</mx:Class>
</mx:Pass>






<mx:Functions>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_core_script_functions"/>
<mx:Function Enabled="TRUE" ErrorStatus="0" Script="JScript" name="sapc_wait30Seconds">
<mx:Code>// Main function: sapc_wait30Seconds

function sapc_wait30Seconds(Par) {
    uSleep(30000);
}</mx:Code>
</mx:Function>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_sendNotification"/>
</mx:Functions>
</mx:Job>
</mx:DSEJobs>
</mx:EMS>
</JOBDEFINITION>
<MACHINE>sqlserver</MACHINE>
<MAX_LOGENTRIES>100</MAX_LOGENTRIES>
<MCPUBLIC>0</MCPUBLIC>
<MCREFERENCESTATUS>-1</MCREFERENCESTATUS>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
<MCSOURCEGUID>27FE45E5-0F4F-4827-AE16-68F343366161</MCSOURCEGUID>
<MULTIPROVISION>0</MULTIPROVISION>
<MXPROTECTED>0</MXPROTECTED>
<NAME>SAPC - Send Notification (wait 30 seconds before)</NAME>
<PRIORITY_ACTUAL>20</PRIORITY_ACTUAL>
<PRIORITY_DEF>20</PRIORITY_DEF>
<PROVISION>1</PROVISION>
<REVISION_NUMBER>0</REVISION_NUMBER>
<SCHEDULE_RULE>Provision</SCHEDULE_RULE>
<STATE>1</STATE>
<TEST>0</TEST>
</JOB>
<JOB JOBGUID="4B6E3935-63DA-4009-9685-036E2C8AE721" MCPACKAGEID="com.sap.rds.idm.core">
<ACTIVE>1</ACTIVE>
<AUTOCREATED>0</AUTOCREATED>
<BOOTSTRAPJOB>0</BOOTSTRAPJOB>
<CHANGED_BY>MXMC_admin</CHANGED_BY>
<CHANGED_DATE>1702211575223</CHANGED_DATE>
<ENGINE_TYPE>2</ENGINE_TYPE>
<JOBDEFINITION>
<mx:EMS xmlns:mx="http://www.maxware.com/EMS">
<mx:GUID>216000DC-8125-49E0-98CD-C4A094F715EE</mx:GUID>
<mx:VERSION>1.0</mx:VERSION>
<mx:DSEJobs>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="Log Error"/>
</mx:Sequence>
<mx:Job name="Log Error">
<mx:Description/>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="c95bb60c-0869-4573-a3a8-82bc0b119f87"/>
</mx:Sequence>
<mx:Globals/>

<mx:Common>
<ENGINETYPE>1</ENGINETYPE>
<SCRIPTENG>JScript</SCRIPTENG>
<EVLOG>0</EVLOG>
<ERRLOG>%$ddm.ddmpath%\DSE.log</ERRLOG>
<XLRESET>1</XLRESET>
</mx:Common>
<mx:Functions>
<mx:Function Enabled="TRUE" ErrorStatus="0" Script="JScript" name="sapc_logError">
<mx:Code>// Main function: sapc_logError

function sapc_logError(Par) {
    uErrMsg(2, "Missing Mandatory Parameter for Mail Notification");
    uErrMsg(1, uMGetContextVar("#MSG%"));
}</mx:Code>
</mx:Function>
</mx:Functions>
<mx:Pass name="c95bb60c-0869-4573-a3a8-82bc0b119f87">
<TYPE>To Generic</TYPE>
<DESCRIPTION>SAPC Log Error</DESCRIPTION>
<REPOSITORY>0</REPOSITORY>
<MAXDELETE>5%</MAXDELETE>
<AUDITLEVEL>0</AUDITLEVEL>
<DELTAENABLED>0</DELTAENABLED>
<SKIP>1</SKIP>
<JUSTDELTA>0</JUSTDELTA>
<MARKDEL>1</MARKDEL>
<AUTODELETE>0</AUTODELETE>
<CURRTAB>2</CURRTAB>
<READFROMPVO>0</READFROMPVO>
<USEIDSTORE>1</USEIDSTORE>
<IDSTORE>!!!!!!!!!!!!!!!!null!!!!!!!!!!!!!!!!</IDSTORE>
<SOURCEENTRYTYPE>0</SOURCEENTRYTYPE>
<SCRIPTNEXT>sapc_logError</SCRIPTNEXT>
<mx:Class>
<mx:attr name="MSKEY">
<mx:value>%MSKEY%</mx:value>
</mx:attr>
<mx:attr name="MSKEYVALUE">
<mx:value>%MSKEYVALUE%</mx:value>
</mx:attr>
</mx:Class>
</mx:Pass>
</mx:Job>
</mx:DSEJobs>
</mx:EMS>
</JOBDEFINITION>
<MAX_LOGENTRIES>100</MAX_LOGENTRIES>
<MCPUBLIC>0</MCPUBLIC>
<MCREFERENCESTATUS>-1</MCREFERENCESTATUS>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
<MCSOURCEGUID>4B6E3935-63DA-4009-9685-036E2C8AE721</MCSOURCEGUID>
<MULTIPROVISION>0</MULTIPROVISION>
<MXPROTECTED>0</MXPROTECTED>
<NAME>Log Error</NAME>
<PRIORITY_ACTUAL>20</PRIORITY_ACTUAL>
<PRIORITY_DEF>20</PRIORITY_DEF>
<PROVISION>1</PROVISION>
<REVISION_NUMBER>0</REVISION_NUMBER>
<SCHEDULE_RULE>Provision</SCHEDULE_RULE>
<STATE>1</STATE>
</JOB>
<JOB JOBGUID="706958A7-FC47-4407-8639-E9C4EB9A7F1B" MCPACKAGEID="com.sap.rds.idm.core">
<ACTIVE>1</ACTIVE>
<AUTOCREATED>0</AUTOCREATED>
<BOOTSTRAPJOB>0</BOOTSTRAPJOB>
<CHANGED_BY>MXMC_admin</CHANGED_BY>
<CHANGED_DATE>1702211575200</CHANGED_DATE>
<ENGINE_TYPE>2</ENGINE_TYPE>
<JOBDEFINITION>
<mx:EMS xmlns:mx="http://www.maxware.com/EMS">
<mx:GUID>C915E7ED-DBD0-415B-B37B-2BDB754132EA</mx:GUID>
<mx:VERSION>1.0</mx:VERSION>
<mx:DSEJobs>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="SAPC Handle System Specific Attributes"/>
</mx:Sequence>
<mx:Job name="SAPC Handle System Specific Attributes">
<mx:Description/>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="0ce6a30d-4aa6-4bc4-a932-b17174527c20"/>
</mx:Sequence>
<mx:Globals/>

<mx:Common>
<ENGINETYPE>1</ENGINETYPE>
<SCRIPTENG>null</SCRIPTENG>
<EVLOG>0</EVLOG>
<ERRLOG>%$ddm.ddmpath%\DSE.log</ERRLOG>
<XLRESET>1</XLRESET>
<PASSDOC>null</PASSDOC>
<SNMPTRAPLEVEL>0</SNMPTRAPLEVEL>
<MAXERROR>0</MAXERROR>
<LOGLIMIT>25</LOGLIMIT>
<RIGHT_TRIM>0</RIGHT_TRIM>
<MCLOGLEVEL>1</MCLOGLEVEL>
</mx:Common>
<mx:Pass name="0ce6a30d-4aa6-4bc4-a932-b17174527c20">
<TYPE>To Generic</TYPE>
<DESCRIPTION>SAPC Handle System Specific Attributes</DESCRIPTION>
<REPOSITORY>0</REPOSITORY>
<UPDATEDB>%$ddm.identitycenter%</UPDATEDB>
<MAXDELETE>5%</MAXDELETE>
<AUDITLEVEL>0</AUDITLEVEL>
<DELTAENABLED>0</DELTAENABLED>
<SKIP>1</SKIP>
<JUSTDELTA>0</JUSTDELTA>
<MARKDEL>1</MARKDEL>
<AUTODELETE>0</AUTODELETE>
<CURRTAB>2</CURRTAB>
<READFROMPVO>0</READFROMPVO>
<FILTEREDITSTATUS>0</FILTEREDITSTATUS>
<USEIDSTORE>1</USEIDSTORE>
<IDSTORE>!!!!!!!!null!!!!!!!!</IDSTORE>
<SOURCEENTRYTYPE>0</SOURCEENTRYTYPE>
<SCRIPTNEXT>sapc_handleSystemSpecificAttributes</SCRIPTNEXT>
<mx:Class>
<mx:attr name="MSKEY">
<mx:value>%MSKEY%</mx:value>
</mx:attr>
<mx:attr name="MSKEYVALUE">
<mx:value>%MSKEYVALUE%</mx:value>
</mx:attr>
<mx:attr name="DISPLAYNAME">
<mx:value>%DISPLAYNAME%</mx:value>
</mx:attr>
<mx:attr name="ENTRYTYPE">
<mx:value>%MX_ENTRYTYPE%</mx:value>
</mx:attr>
<mx:attr name="SUPPORTED_REPOSITORIES">
<mx:value>%$pck.SAPC_REPOSITORY_TYPES_SUPPORTING_SYSTEM_SPECIFIC_ATTRIBUTES%</mx:value>
</mx:attr>
<mx:attr name="#SUPPORTED_ATTRIBUTES">
<mx:value>%$pck.SAPC_SYSTEM_SPECIFIC_ATTRIBUTES%</mx:value>
</mx:attr>
</mx:Class>
</mx:Pass>



<mx:Functions>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_core_script_functions"/>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_getRepConstant"/>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_handleSystemSpecificAttributes"/>
</mx:Functions>
</mx:Job>
</mx:DSEJobs>
</mx:EMS>
</JOBDEFINITION>
<MAX_LOGENTRIES>100</MAX_LOGENTRIES>
<MCPUBLIC>0</MCPUBLIC>
<MCREFERENCESTATUS>-1</MCREFERENCESTATUS>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
<MCSOURCEGUID>706958A7-FC47-4407-8639-E9C4EB9A7F1B</MCSOURCEGUID>
<MULTIPROVISION>0</MULTIPROVISION>
<MXPROTECTED>0</MXPROTECTED>
<NAME>SAPC Handle System Specific Attributes</NAME>
<PRIORITY_ACTUAL>20</PRIORITY_ACTUAL>
<PRIORITY_DEF>20</PRIORITY_DEF>
<PROVISION>1</PROVISION>
<REVISION_NUMBER>0</REVISION_NUMBER>
<SCHEDULE_RULE>Provision</SCHEDULE_RULE>
<STATE>1</STATE>
</JOB>
<JOB JOBGUID="C28666A6-8F62-4BEE-88AF-44BAC07F09C1" MCPACKAGEID="com.sap.rds.idm.core">
<ACTIVE>1</ACTIVE>
<AUTOCREATED>0</AUTOCREATED>
<BOOTSTRAPJOB>0</BOOTSTRAPJOB>
<CHANGED_BY>MXMC_admin</CHANGED_BY>
<CHANGED_DATE>1702211575277</CHANGED_DATE>
<ENGINE_TYPE>2</ENGINE_TYPE>
<JOBDEFINITION>
<mx:EMS xmlns:mx="http://www.maxware.com/EMS">
<mx:GUID>C4347F12-D1E0-4AC4-BA5A-878868CE859C</mx:GUID>
<mx:VERSION>1.0</mx:VERSION>
<mx:DSEJobs>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="SAPC Set MX_MANAGER"/>
</mx:Sequence>
<mx:Job name="SAPC Set MX_MANAGER">
<mx:Description/>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="a473e3d3-4890-44b2-b03e-4af966bc1b4e"/>
</mx:Sequence>
<mx:Globals/>

<mx:Common>
<ENGINETYPE>1</ENGINETYPE>
<SCRIPTENG>JScript</SCRIPTENG>
<EVLOG>0</EVLOG>
<ERRLOG>%$ddm.ddmpath%\DSE.log</ERRLOG>
<XLRESET>1</XLRESET>
</mx:Common>
<mx:Pass name="a473e3d3-4890-44b2-b03e-4af966bc1b4e">
<TYPE>ToIDStore</TYPE>
<DESCRIPTION>SAPC Set MX_MANAGER</DESCRIPTION>
<REPOSITORY>0</REPOSITORY>
<MAXDELETE>5%</MAXDELETE>
<AUDITLEVEL>0</AUDITLEVEL>
<DELTAENABLED>0</DELTAENABLED>
<SKIP>0</SKIP>
<JUSTDELTA>0</JUSTDELTA>
<MARKDEL>0</MARKDEL>
<AUTODELETE>0</AUTODELETE>
<CURRTAB>2</CURRTAB>
<READFROMPVO>0</READFROMPVO>
<FILTEREDITSTATUS>0</FILTEREDITSTATUS>
<USEIDSTORE>1</USEIDSTORE>
<SOURCEENTRYTYPE>0</SOURCEENTRYTYPE>
<IDSTORE>null</IDSTORE>
<USERINFO>JobId=%$ddm.mcjob%</USERINFO>
<DELIMITER>|</DELIMITER>
<STOREID>-- Self --</STOREID>
<DATABASEURL>%$ddm.identitycenter%</DATABASEURL>
<PROBE>0</PROBE>
<SOURCEREPOSITORY>0</SOURCEREPOSITORY>
<mx:Class>
<mx:attr name="MSKEYVALUE">
<mx:value>%MSKEYVALUE%</mx:value>
</mx:attr>
<mx:attr name="MX_ENTRYTYPE">
<mx:value>MX_PERSON</mx:value>
</mx:attr>
<mx:attr name="changetype">
<mx:value>modify</mx:value>
</mx:attr>
<mx:attr name="MX_MANAGER">
<mx:value>$FUNCTION.sapc_resolveManager(%MX_FS_PERSONNEL_NUMBER_OF_MANAGER%)$$</mx:value>
</mx:attr>
</mx:Class>
</mx:Pass>
<mx:Functions>
<mx:Function Enabled="TRUE" ErrorStatus="0" Script="JScript" name="sapc_resolveManager">
<mx:Code>// 2016-03-06 SAP NN: Traing to deterimne manager MSKEY by personnel number

function sapc_resolveManager(Par) {

    // wait 5 minutes for the extract to finish
    uSleep(300000);
    uInfo("Trying to determine MSKEY for personnel number [" + Par + "].");

    var managerMSKEY = uSelect("select mskey from idmv_value_basic where attrName = 'MX_FS_PERSONNEL_NUMBER' and searchValue = '" + Par + "'");

    if (managerMSKEY != null &amp;&amp; managerMSKEY != "null" &amp;&amp; managerMSKEY != "" &amp;&amp; managerMSKEY.indexOf("!ERROR") == -1) {
        uInfo("Found MSKEY for peronnel number [" + Par + "]: " + managerMSKEY);
        return "{M}" + managerMSKEY;
    } else {
        uWarning("MSKEY for personnel number [" + Par + "] not found.");
        uSkip(1, 1);
    }
}</mx:Code>
</mx:Function>
</mx:Functions>
</mx:Job>
</mx:DSEJobs>
</mx:EMS>
</JOBDEFINITION>
<MAX_LOGENTRIES>100</MAX_LOGENTRIES>
<MCPUBLIC>0</MCPUBLIC>
<MCREFERENCESTATUS>-1</MCREFERENCESTATUS>
<MCSCRIPTSTATUS>0</MCSCRIPTSTATUS>
<MCSOURCEGUID>C28666A6-8F62-4BEE-88AF-44BAC07F09C1</MCSOURCEGUID>
<MULTIPROVISION>0</MULTIPROVISION>
<MXPROTECTED>0</MXPROTECTED>
<NAME>SAPC Set MX_MANAGER</NAME>
<PRIORITY_ACTUAL>20</PRIORITY_ACTUAL>
<PRIORITY_DEF>20</PRIORITY_DEF>
<PROVISION>1</PROVISION>
<REVISION_NUMBER>0</REVISION_NUMBER>
<SCHEDULE_RULE>Provision</SCHEDULE_RULE>
<STATE>1</STATE>
</JOB>
<JOB JOBGUID="FF2EFC48-40E1-4FCE-B23B-1B390DB91E75" MCPACKAGEID="com.sap.rds.idm.core">
<ACTIVE>1</ACTIVE>
<AUTOCREATED>0</AUTOCREATED>
<BOOTSTRAPJOB>0</BOOTSTRAPJOB>
<CHANGED_BY>MXMC_admin</CHANGED_BY>
<CHANGED_DATE>1702211575317</CHANGED_DATE>
<ENGINE_TYPE>2</ENGINE_TYPE>
<GROUP_ID>F42432A7-9264-4577-8172-697A9BCED44F</GROUP_ID>
<JOBDEFINITION>
<mx:EMS xmlns:mx="http://www.maxware.com/EMS">
<mx:GUID>C7CFE1BF-282F-4932-AC9F-0A3C459A7398</mx:GUID>
<mx:VERSION>1.0</mx:VERSION>
<mx:DSEJobs>
<mx:Sequence>
<mx:Step Enabled="TRUE" Key="New Job 403"/>
</mx:Sequence>
<mx:Job name="New Job 403">
<mx:Description/>
<mx:Sequence>
<mx:Step Enabled="FALSE" Key="0e6da0c0-b9d1-401e-a333-249e968eb602"/>
<mx:Step Enabled="TRUE" Key="657a859b-1d3a-4c68-934f-cf6ac65f938f"/>
</mx:Sequence>
<mx:Globals/>

<mx:Common>
<ENGINETYPE>1</ENGINETYPE>
<SCRIPTENG>null</SCRIPTENG>
<EVLOG>0</EVLOG>
<ERRLOG>%$ddm.ddmpath%\DSE.log</ERRLOG>
<XLRESET>1</XLRESET>
<SNMPTRAPLEVEL>0</SNMPTRAPLEVEL>
<MAXERROR>0</MAXERROR>
<LOGLIMIT>25</LOGLIMIT>
<RIGHT_TRIM>0</RIGHT_TRIM>
<MCLOGLEVEL>1</MCLOGLEVEL>
<ERRFUNCTION>sapc_jobErrorHandler</ERRFUNCTION>
</mx:Common>
<mx:Pass name="0e6da0c0-b9d1-401e-a333-249e968eb602">
<TYPE>To Generic</TYPE>
<DESCRIPTION>SAPC Simulate Error</DESCRIPTION>
<REPOSITORY>0</REPOSITORY>
<MAXDELETE>5%</MAXDELETE>
<AUDITLEVEL>0</AUDITLEVEL>
<DELTAENABLED>0</DELTAENABLED>
<SKIP>1</SKIP>
<JUSTDELTA>0</JUSTDELTA>
<MARKDEL>1</MARKDEL>
<AUTODELETE>0</AUTODELETE>
<CURRTAB>2</CURRTAB>
<FROMSQL>select mcmskey as mskey from idmv_entry_simple B with(nolock)  where MCMSKEYVALUE like 'MX_PRIV:%'</FROMSQL>
<FILTERSQL>(MSKEYVALUE=D050614)</FILTERSQL>
<FILTEREDITSTATUS>16</FILTEREDITSTATUS>
<USEIDSTORE>1</USEIDSTORE>
<IDSTORE>-- Self --</IDSTORE>
<SCRIPTNEXT>sapc_simulateError</SCRIPTNEXT>
<mx:Class>
<mx:attr name="MSKEY">
<mx:value>%MSKEY%</mx:value>
</mx:attr>
<mx:attr name="MSKEYVALUE">
<mx:value>%MSKEYVALUE%</mx:value>
</mx:attr>
</mx:Class>
<SOURCEENTRYTYPE/>
</mx:Pass>
<mx:Pass name="657a859b-1d3a-4c68-934f-cf6ac65f938f">
<TYPE>To Generic</TYPE>
<DESCRIPTION>SAPC Send Final Job Error Mail</DESCRIPTION>
<REPOSITORY>0</REPOSITORY>
<MAXDELETE>5%</MAXDELETE>
<AUDITLEVEL>0</AUDITLEVEL>
<DELTAENABLED>0</DELTAENABLED>
<SKIP>1</SKIP>
<JUSTDELTA>0</JUSTDELTA>
<MARKDEL>1</MARKDEL>
<AUTODELETE>0</AUTODELETE>
<CURRTAB>2</CURRTAB>
<FILTEREDITSTATUS>0</FILTEREDITSTATUS>
<USEIDSTORE>1</USEIDSTORE>
<SCRIPTNEXT>sapc_sendJobLog</SCRIPTNEXT>
<mx:Class>
<mx:attr name="par">
<mx:value>noPar</mx:value>
</mx:attr>
</mx:Class>
<SOURCEENTRYTYPE/>
</mx:Pass>



<mx:Functions>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_jobErrorHandler"/>
<mx:Function Enabled="TRUE" ErrorStatus="0" Script="JScript" name="sapc_simulateError">
<mx:Code>// Main function: sapc_simulateError

function sapc_simulateError(Par) {
    uErrMsg(2, Par);
    uErrMsg(1, "This should throw an error" + anObjectThatsNotDefined);
}</mx:Code>
</mx:Function>
<mx:Function Enabled="TRUE" GlobalScript="TRUE" Script="JScript" name="sapc_sendJobLog"/>
</mx:Functions>
</mx:Job>
</mx:DSEJobs>
</mx:EMS>
</JOBDEFINITION>
<MAX_LOGENTRIES>100</MAX_LOGENTRIES>
<MCPUBLIC>0</MCPUBLIC>
<MCREFERENCESTATUS>-1</MCREFERENCESTATUS>
<MCSCRIPTSTATUS>2</MCSCRIPTSTATUS>
<MCSOURCEGUID>FF2EFC48-40E1-4FCE-B23B-1B390DB91E75</MCSOURCEGUID>
<MULTIPROVISION>0</MULTIPROVISION>
<MXPROTECTED>0</MXPROTECTED>
<NAME>SAPC Send Final Job Error Mail</NAME>
<PRIORITY_ACTUAL>20</PRIORITY_ACTUAL>
<PRIORITY_DEF>20</PRIORITY_DEF>
<PROVISION>0</PROVISION>
<REVISION_NUMBER>0</REVISION_NUMBER>
<SCHEDULE_RULE>On demand</SCHEDULE_RULE>
<STATE>1</STATE>
</JOB>
</JOBS>
<TASKS>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="02E9DDDD-ECBE-48A2-A566-C196DF24651D" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>02E9DDDD-ECBE-48A2-A566-C196DF24651D</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>19</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1444282668717</TASKCHANGED>
<TASKGROUP>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</TASKGROUP>
<TASKNAME>SAPC_Handle_System_Specific_Attributes_Del</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>2</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>295,0,40,40:295,200,40,40|205,80,201,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>090303E2-76DD-4465-8418-7A9C1190A917</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>02E9DDDD-ECBE-48A2-A566-C196DF24651D</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="090303E2-76DD-4465-8418-7A9C1190A917" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>090303E2-76DD-4465-8418-7A9C1190A917</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>17</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1444282454573</TASKCHANGED>
<TASKGROUP>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</TASKGROUP>
<TASKNAME>SAPC Handle System Specific Attributes</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>2</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>300,0,40,40:300,200,40,40|205,80,211,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>5B60A812-ABF9-47FA-8E2B-0E3D4D8ED920</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>090303E2-76DD-4465-8418-7A9C1190A917</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="177719AD-2A69-4F28-9A05-6ED401E1FB33">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>0</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<JOBGUID>27FE45E5-0F4F-4827-AE16-68F343366161</JOBGUID>
<MCPRIORITY>5</MCPRIORITY>
<MCSOURCEGUID>177719AD-2A69-4F28-9A05-6ED401E1FB33</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>1</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>2</RETRIES>
<RETRYDELAY>300</RETRYDELAY>
<TASKCHANGED>1660215293530</TASKCHANGED>
<TASKNAME>SAPC - Send Notification (wait 30 seconds before)</TASKNAME>
<TASKTYPE>0</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>1</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="2CE9496C-A4DA-4E08-AE8C-982750121490" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>2CE9496C-A4DA-4E08-AE8C-982750121490</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>3</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1448353583913</TASKCHANGED>
<TASKGROUP>807E46B2-254A-444C-8650-B885546E1B41</TASKGROUP>
<TASKNAME>SAPC_VALIDATE_DEL_MEMBER_DUMMY</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>4</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="3CD4608E-D8FF-4037-9234-14F45AE78A9F" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<DESCRIPTION>Automatic created due to linked from multiple other tasks</DESCRIPTION>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>5</MCPRIORITY>
<MCSOURCEGUID>3CD4608E-D8FF-4037-9234-14F45AE78A9F</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>24</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1390796014877</TASKCHANGED>
<TASKGROUP>869232D1-98B6-4729-ABDB-0A793785D563</TASKGROUP>
<TASKNAME>SAPC_Notification</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>1</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>460,0,20,20:255,410,20,20|450,80,40,60:245,310,40,60</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>EF6479FE-6542-433A-A164-023400800630</TASKLNK>
<TASKREF>3CD4608E-D8FF-4037-9234-14F45AE78A9F</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="3EEC3352-C848-432A-99A1-0AE50A2BE8DB" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>3EEC3352-C848-432A-99A1-0AE50A2BE8DB</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>2</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1448353600767</TASKCHANGED>
<TASKGROUP>807E46B2-254A-444C-8650-B885546E1B41</TASKGROUP>
<TASKNAME>SAPC_VALIDATE_MOD_MEMBER_DUMMY</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>3</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="5B60A812-ABF9-47FA-8E2B-0E3D4D8ED920">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>0</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<JOBGUID>706958A7-FC47-4407-8639-E9C4EB9A7F1B</JOBGUID>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>5B60A812-ABF9-47FA-8E2B-0E3D4D8ED920</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>1</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1444292621443</TASKCHANGED>
<TASKNAME>SAPC Handle System Specific Attributes</TASKNAME>
<TASKTYPE>0</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>1</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="60424C7E-02C8-4320-8F7A-DFA38D898450" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<DESCRIPTION>2015-11-10 SAP NN: This task will check for constant SAPC_REQ_PRIV_NOMASTER_PROCESS on current repository and execute this task for that repository if it exists.</DESCRIPTION>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>60424C7E-02C8-4320-8F7A-DFA38D898450</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>13</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1447137218313</TASKCHANGED>
<TASKGROUP>869232D1-98B6-4729-ABDB-0A793785D563</TASKGROUP>
<TASKNAME>SAPC_NoMaster_Process</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>2</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>277,0,40,40:277,200,40,40|205,80,164,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>73F0A27C-3643-4EA6-87DF-0F3BBFD555AF</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>60424C7E-02C8-4320-8F7A-DFA38D898450</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="68CC22EB-6779-4D02-8B23-7AAAA2EFBAED" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>68CC22EB-6779-4D02-8B23-7AAAA2EFBAED</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>17</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1459927445777</TASKCHANGED>
<TASKGROUP>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</TASKGROUP>
<TASKNAME>SAPC_Handle_MX_FS_PERSONNEL_NUMBER_OF_MANAGER_Add</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>3</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>348,0,40,40:348,200,40,40|205,80,307,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>97984AC0-6E6D-41E2-B0EE-E102F30D1BDC</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>68CC22EB-6779-4D02-8B23-7AAAA2EFBAED</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="73F0A27C-3643-4EA6-87DF-0F3BBFD555AF">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>0</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<JOBGUID>0A5B0C20-556D-4869-8382-36990553543E</JOBGUID>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>73F0A27C-3643-4EA6-87DF-0F3BBFD555AF</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>1</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1605489344667</TASKCHANGED>
<TASKNAME>SAPC Assign Account Privilege</TASKNAME>
<TASKTYPE>0</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>1</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="7E8746A9-2004-4702-8109-1F1C2B24008A" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<DISPLAYNAME>N/A</DISPLAYNAME>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>7E8746A9-2004-4702-8109-1F1C2B24008A</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<OBJECTCLASS>MX_PERSON</OBJECTCLASS>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>0</RETRIES>
<RETRYDELAY>0</RETRYDELAY>
<SEMAPHORESKIPIFCLEAR>0</SEMAPHORESKIPIFCLEAR>
<TASKCHANGED>1493763363590</TASKCHANGED>
<TASKGROUP>3DF4863C-5829-4331-BF96-42A694C81B70</TASKGROUP>
<TASKNAME>SAPC Retrieve Dispatcher Information</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>1</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>2</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>0</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<ATTRIBUTES>
<ATTRIBUTE ATTR_ID="SAPC_VH_DISPATCHER_STATE" isLayoutAttr="0">
<ACCESS_CODE>0</ACCESS_CODE>
<DISPLAYLIST>0</DISPLAYLIST>
<DISPLAY_ORDER>1</DISPLAY_ORDER>
<INVISIBLE>0</INVISIBLE>
<LISTED>1</LISTED>
<REQUIRED_ATTR>0</REQUIRED_ATTR>
<SHOW_PROPERTIES>0</SHOW_PROPERTIES>
<SUMMARYATTR>0</SUMMARYATTR>
<TASKID>7E8746A9-2004-4702-8109-1F1C2B24008A</TASKID>
</ATTRIBUTE>
</ATTRIBUTES>
<ACCESS_CONTROLS>
<ACCESS_CONTROL>
<FILTEREDITSTATUS>0</FILTEREDITSTATUS>
<MEMBERTYPE>1</MEMBERTYPE>
<MSKEY>SAPC_IDM_DISPLAY_ALL</MSKEY>
<TARGETFILTEREDITSTATUS>0</TARGETFILTEREDITSTATUS>
<TARGETMEMBERTYPE>0</TARGETMEMBERTYPE>
<TARGETMSKEY>0</TARGETMSKEY>
<TASKID>7E8746A9-2004-4702-8109-1F1C2B24008A</TASKID>
</ACCESS_CONTROL>
</ACCESS_CONTROLS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="97984AC0-6E6D-41E2-B0EE-E102F30D1BDC" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>97984AC0-6E6D-41E2-B0EE-E102F30D1BDC</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1459927580780</TASKCHANGED>
<TASKGROUP>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</TASKGROUP>
<TASKNAME>SAPC Handle MX_FS_PERSONNEL_NUMBER_OF_MANAGER</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>4</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>281,0,40,40:281,200,40,40|205,80,172,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>D60164EF-4A5E-40AE-9065-590EB5CFB708</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>97984AC0-6E6D-41E2-B0EE-E102F30D1BDC</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="A4630A6E-8148-45C2-9207-CCF792447431" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>0</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>A4630A6E-8148-45C2-9207-CCF792447431</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>1</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1448353503153</TASKCHANGED>
<TASKGROUP>807E46B2-254A-444C-8650-B885546E1B41</TASKGROUP>
<TASKNAME>SAPC_VALIDATE_ADD_MEMBER_DUMMY</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>2</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="B61C40A5-868C-4311-92CE-0393FFE70448" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>B61C40A5-868C-4311-92CE-0393FFE70448</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>19</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1459927572197</TASKCHANGED>
<TASKGROUP>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</TASKGROUP>
<TASKNAME>SAPC_Handle_MX_FS_PERSONNEL_NUMBER_OF_MANAGER_Del</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>3</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>360,0,40,40:360,200,40,40|205,80,331,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>97984AC0-6E6D-41E2-B0EE-E102F30D1BDC</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>B61C40A5-868C-4311-92CE-0393FFE70448</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="B6C0F672-66BC-486A-9892-CC248C009165" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>B6C0F672-66BC-486A-9892-CC248C009165</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1447733547230</TASKCHANGED>
<TASKGROUP>869232D1-98B6-4729-ABDB-0A793785D563</TASKGROUP>
<TASKNAME>SAPC_ModifyValidity</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>4</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>258,0,40,40:258,200,40,40|205,80,126,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>DBAEBE59-E85F-4AC1-9E64-1F0EDF0DDF23</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>B6C0F672-66BC-486A-9892-CC248C009165</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="BEED1ACB-C58D-4F99-965C-2B71F44611D9" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>BEED1ACB-C58D-4F99-965C-2B71F44611D9</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>18</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1459927533050</TASKCHANGED>
<TASKGROUP>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</TASKGROUP>
<TASKNAME>SAPC_Handle_MX_FS_PERSONNEL_NUMBER_OF_MANAGER_Mod</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>3</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>355,0,40,40:355,200,40,40|205,80,320,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>97984AC0-6E6D-41E2-B0EE-E102F30D1BDC</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>BEED1ACB-C58D-4F99-965C-2B71F44611D9</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="C0E4A03B-536D-46C3-98BC-F634C89DD958" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>C0E4A03B-536D-46C3-98BC-F634C89DD958</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>17</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1444291393883</TASKCHANGED>
<TASKGROUP>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</TASKGROUP>
<TASKNAME>SAPC_Handle_System_Specific_Attributes_Add</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>2</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>311,0,40,40:311,200,40,40|205,80,233,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>090303E2-76DD-4465-8418-7A9C1190A917</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>C0E4A03B-536D-46C3-98BC-F634C89DD958</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="D60164EF-4A5E-40AE-9065-590EB5CFB708">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>0</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<JOBGUID>C28666A6-8F62-4BEE-88AF-44BAC07F09C1</JOBGUID>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>D60164EF-4A5E-40AE-9065-590EB5CFB708</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>1</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1459927737970</TASKCHANGED>
<TASKNAME>SAPC Set MX_MANAGER</TASKNAME>
<TASKTYPE>0</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>1</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="DBAEBE59-E85F-4AC1-9E64-1F0EDF0DDF23">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>0</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<JOBGUID>1CB97202-9A53-41FC-813A-3D5B3C0DD530</JOBGUID>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>DBAEBE59-E85F-4AC1-9E64-1F0EDF0DDF23</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>1</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1732719149643</TASKCHANGED>
<TASKNAME>SAPC_ModifyValidity</TASKNAME>
<TASKTYPE>0</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>1</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="EF6479FE-6542-433A-A164-023400800630">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-3</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQL IS_SELF_REFERRING="0">SELECT count (varValue) FROM mxpv_audit_variables WHERE AuditID=%AUDITID% and VarName='#MSG_TEMPLATE'</BOOLSQL>
<BOOLSQLTYPE>1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>EF6479FE-6542-433A-A164-023400800630</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>1</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1442819272250</TASKCHANGED>
<TASKNAME>Conditional Task</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>1</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<TASK_PARAMETERS>
<TASK_PARAMETER>
<MCKEY>MX_FILTER</MCKEY>
<MCTASKID>EF6479FE-6542-433A-A164-023400800630</MCTASKID>
<MCTYPE>0</MCTYPE>
</TASK_PARAMETER>
<TASK_PARAMETER>
<MCKEY>MX_FILTER_EDITSTATUS</MCKEY>
<MCTASKID>EF6479FE-6542-433A-A164-023400800630</MCTASKID>
<MCTYPE>0</MCTYPE>
<MCVALUE>16</MCVALUE>
</TASK_PARAMETER>
</TASK_PARAMETERS>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>0</CHILDGROUP>
<CHILDLAYOUT>450,80,40,60:245,310,40,60|205,180,100,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>FD102C00-6784-49BD-84EC-C2E38E1B4184</TASKLNK>
<TASKREF>EF6479FE-6542-433A-A164-023400800630</TASKREF>
</LINK>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>450,80,40,60:245,310,40,60|405,180,246,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>177719AD-2A69-4F28-9A05-6ED401E1FB33</TASKLNK>
<TASKREF>EF6479FE-6542-433A-A164-023400800630</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="F6451B6C-8D68-48F3-BD0E-5615F7EFD93D" TASKROOT="true">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>-1</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>F6451B6C-8D68-48F3-BD0E-5615F7EFD93D</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>0</PRIVATE>
<PROCESSTYPE>18</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1444282642690</TASKCHANGED>
<TASKGROUP>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</TASKGROUP>
<TASKNAME>SAPC_Handle_System_Specific_Attributes_Mod</TASKNAME>
<TASKTYPE>1</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>2</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
<LINKS>
<LINK>
<CHILDDELAY>0</CHILDDELAY>
<CHILDGROUP>1</CHILDGROUP>
<CHILDLAYOUT>301,0,40,40:301,200,40,40|205,80,212,60:</CHILDLAYOUT>
<CHILDORDER>1</CHILDORDER>
<TASKLNK>090303E2-76DD-4465-8418-7A9C1190A917</TASKLNK>
<TASKQUALIFIEDNAME>0</TASKQUALIFIEDNAME>
<TASKREF>F6451B6C-8D68-48F3-BD0E-5615F7EFD93D</TASKREF>
</LINK>
</LINKS>
</TASK>
<TASK MCPACKAGEID="com.sap.rds.idm.core" TASKGUID="FD102C00-6784-49BD-84EC-C2E38E1B4184">
<ACTIONSQL>MXPROV_ENTRIES</ACTIONSQL>
<ACTIONTYPE>0</ACTIONTYPE>
<ALLOWMULTIEVENTS>0</ALLOWMULTIEVENTS>
<BOOLSQLTYPE>-1</BOOLSQLTYPE>
<ENABLED>1</ENABLED>
<HARDPROVISION>0</HARDPROVISION>
<INCLUDEDISABLEDENTRIES>0</INCLUDEDISABLEDENTRIES>
<JOBGUID>4B6E3935-63DA-4009-9685-036E2C8AE721</JOBGUID>
<MCPRIORITY>50</MCPRIORITY>
<MCSOURCEGUID>FD102C00-6784-49BD-84EC-C2E38E1B4184</MCSOURCEGUID>
<MCWFUSERPRIORITY>0</MCWFUSERPRIORITY>
<MXPROTECTED>0</MXPROTECTED>
<ONFLAGS>0</ONFLAGS>
<PRIVATE>1</PRIVATE>
<PROCESSTYPE>0</PROCESSTYPE>
<QOSTIME>30</QOSTIME>
<REPORTTASK>0</REPORTTASK>
<RETRIES>1</RETRIES>
<RETRYDELAY>30</RETRYDELAY>
<TASKCHANGED>1442818969587</TASKCHANGED>
<TASKNAME>Log Error</TASKNAME>
<TASKTYPE>0</TASKTYPE>
<TASK_FLAGS>0</TASK_FLAGS>
<UITASKTYPE>0</UITASKTYPE>
<USECONTEXTVARS>0</USECONTEXTVARS>
<WAITAFTER>0</WAITAFTER>
<WAITBEFORE>0</WAITBEFORE>
<WAITDELAY>30</WAITDELAY>
<WAITRETRY>0</WAITRETRY>
<WFDISPLAYORDER>1</WFDISPLAYORDER>
<WFFLAGS>0</WFFLAGS>
<WFINWELCOME>0</WFINWELCOME>
<WFNODENYBUTTON>0</WFNODENYBUTTON>
<WFSAVEOPTION>2</WFSAVEOPTION>
<WFUSEADVANCEDSEARCH>0</WFUSEADVANCEDSEARCH>
</TASK>
</TASKS>
<FOLDERS>
<FOLDER GROUPGUID="3DF4863C-5829-4331-BF96-42A694C81B70">
<ACTIVATEDATE>1430793188490</ACTIVATEDATE>
<GROUP_NAME>Forms</GROUP_NAME>
<GROUP_STATUS>1</GROUP_STATUS>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCSOURCEGUID>3DF4863C-5829-4331-BF96-42A694C81B70</MCSOURCEGUID>
<PROVISION_GROUP>5</PROVISION_GROUP>
<WFAUTOEXPAND>0</WFAUTOEXPAND>
<WFDISPLAYORDER>50</WFDISPLAYORDER>
<WFSHOWGROUP>1</WFSHOWGROUP>
</FOLDER>
<FOLDER GROUPGUID="807E46B2-254A-444C-8650-B885546E1B41">
<ACTIVATEDATE>1448353083727</ACTIVATEDATE>
<GROUP_NAME>Approval Dummy Processes</GROUP_NAME>
<GROUP_STATUS>1</GROUP_STATUS>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCSOURCEGUID>807E46B2-254A-444C-8650-B885546E1B41</MCSOURCEGUID>
<PARENT_GROUP>869232D1-98B6-4729-ABDB-0A793785D563</PARENT_GROUP>
<PROVISION_GROUP>1</PROVISION_GROUP>
<WFAUTOEXPAND>0</WFAUTOEXPAND>
<WFDISPLAYORDER>50</WFDISPLAYORDER>
<WFSHOWGROUP>0</WFSHOWGROUP>
</FOLDER>
<FOLDER GROUPGUID="869232D1-98B6-4729-ABDB-0A793785D563">
<ACTIVATEDATE>1430793188490</ACTIVATEDATE>
<GROUP_NAME>Processes</GROUP_NAME>
<GROUP_STATUS>1</GROUP_STATUS>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCSOURCEGUID>869232D1-98B6-4729-ABDB-0A793785D563</MCSOURCEGUID>
<PROVISION_GROUP>1</PROVISION_GROUP>
<WFAUTOEXPAND>0</WFAUTOEXPAND>
<WFDISPLAYORDER>50</WFDISPLAYORDER>
<WFSHOWGROUP>0</WFSHOWGROUP>
</FOLDER>
<FOLDER GROUPGUID="C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E">
<ACTIVATEDATE>1444282479283</ACTIVATEDATE>
<GROUP_NAME>Attribute Modification Handler</GROUP_NAME>
<GROUP_STATUS>1</GROUP_STATUS>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCSOURCEGUID>C02C1E20-DDA0-4288-B6A7-C6EF1BC6098E</MCSOURCEGUID>
<PARENT_GROUP>869232D1-98B6-4729-ABDB-0A793785D563</PARENT_GROUP>
<PROVISION_GROUP>1</PROVISION_GROUP>
<WFAUTOEXPAND>0</WFAUTOEXPAND>
<WFDISPLAYORDER>50</WFDISPLAYORDER>
<WFSHOWGROUP>0</WFSHOWGROUP>
</FOLDER>
<FOLDER GROUPGUID="F42432A7-9264-4577-8172-697A9BCED44F">
<ACTIVATEDATE>1430793188490</ACTIVATEDATE>
<GROUP_NAME>Jobs</GROUP_NAME>
<GROUP_STATUS>1</GROUP_STATUS>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
<MCSOURCEGUID>F42432A7-9264-4577-8172-697A9BCED44F</MCSOURCEGUID>
<PROVISION_GROUP>0</PROVISION_GROUP>
<WFAUTOEXPAND>0</WFAUTOEXPAND>
<WFDISPLAYORDER>50</WFDISPLAYORDER>
<WFSHOWGROUP>0</WFSHOWGROUP>
</FOLDER>
</FOLDERS>
<TEMPLATE_CLASSES>
<TEMPLATE_CLASS MCATTRIBUTES="APPROVED|DECLINED|TIMEOUT" MCCLASS="SAPC_PF" MCDESCRIPTION="RDS Message Templates" MCPACKAGEID="com.sap.rds.idm.core" MCPARAMETERS="PAR_REPOSITORIES|PAR_PASSWORD|PAR_PASSWORD_GENERATED|PAR_REPOSITORIES_FAILED">
<MESSAGE_TEMPLATE MCID="SAPC Changed password notification" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>DE</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Kennwort-Änderung Initiiert</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC Changed password notification" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>EN</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Password Reset Initiated</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC Report Result" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>DE</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Report Result</MCSUBJECT>
<MCTEMPLATE>{HEX}3C21444F43545950452068746D6C205055424C494320222D2F2F5733432F2F4454442048544D4C20342E3031205472616E736974696F6E616C2F2F454E222022687474703A2F2F7777772E77332E6F72672F54522F68746D6C342F6C6F6F73652E647464223E0D0A3C68746D6C3E0D0A3C686561643E0D0A3C6D65746120687474702D65717569763D22436F6E74656E742D547970652220636F6E74656E743D22746578742F68746D6C3B20636861727365743D5554462D3822202F3E0D0A3C7469746C653E48544D4C3C2F7469746C653E3C7374796C653E702E6865616465720A7B0A666F6E742D73697A653A31332E3570743B666F6E742D66616D696C793A22417269616C222C2273616E732D7365726966223B0A70616464696E673A332E3735707420372E35707420332E3735707420372E35703B0A636F6C6F723A77686974653B746578742D6465636F726174696F6E3A6E6F6E653B0A6261636B67726F756E643A233434363937423B0A626F726465722D6C6566743A233434363937423B0A626F726465722D72696768743A233434363937423B0A626F726465722D7374796C653A736F6C69643B0A626F726465722D746F703A736F6C696420234343434343433B0A626F726465722D626F74746F6D3A736F6C696420234630414230303B0A626F726465722D77696474683A3370783B0A7D0A702E696E666F0A7B0A666F6E742D73697A653A313070743B666F6E742D66616D696C793A22417269616C222C2273616E732D7365726966223B0A70616464696E673A352E3735707420372E35707420332E3735707420372E35703B0A7D0A0A0A23696E666F2D7461626C652D620A7B0A09746578742D616C69676E3A206C6566743B0A09626F726465722D636F6C6C617073653A20636F6C6C617073653B0A09626F726465722D746F703A2032707820736F6C696420234343434343433B0A09626F726465722D626F74746F6D3A2032707820736F6C696420234630414230303B0A0A7D0A23696E666F2D7461626C652D622074640A7B0A09666F6E742D73697A653A313070743B666F6E742D66616D696C793A22417269616C222C2273616E732D7365726966223B0A0970616464696E673A352E3735707420372E35707420332E3735707420372E35703B0A096261636B67726F756E643A20234646464646463B0A7D3C2F7374796C653E3C2F686561643E0D0A3C626F64793E3C7020636C6173733D22686561646572223E41757377657274756E67732D45726765626E6973202D205041525F5245504F52544E414D453C2F703E0A3C7020636C6173733D22696E666F223E53656872206765656872746528722920467261752F48657272205041525F524543495049454E5453444953504C41594E414D452C3C2F703E0A3C7020636C6173733D22696E666F223E496D20416E68616E672066696E64656E20536965206461732045726765626E6973206465722041757377657274756E67205041525F5245504F52544E414D452066C3BC72205041525F4F424A4543544D534B455956414C55452E3C2F703E0A3C62723E0A3C703E534150204964656E74697479204D616E6167656D656E743C2F703E3C2F626F64793E3C2F68746D6C3E0D0A</MCTEMPLATE>
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC Report Result" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>EN</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Report Result</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC_MASS_JOB_ERROR" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>DE</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Massenänderungs-Job fehlgeschlagen</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC_MASS_JOB_ERROR" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>EN</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Mass Administration Job Failed</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC Changed password notification" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>DE</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Kennwort-Änderung Initiiert</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC Changed password notification" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>EN</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Password Reset Initiated</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC Report Result" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>DE</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Report Result</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC Report Result" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>EN</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Report Result</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC_MASS_JOB_ERROR" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>DE</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Massenänderungs-Job fehlgeschlagen</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
<MESSAGE_TEMPLATE MCID="SAPC_MASS_JOB_ERROR" MCPACKAGEID="com.sap.rds.idm.core">
<MCCLASS>SAPC_PF</MCCLASS>
<MCLANGUAGE>EN</MCLANGUAGE>
<MCLOCALCHANGE>1</MCLOCALCHANGE>
<MCSUBJECT>SAP Identity Management - Mass Administration Job Failed</MCSUBJECT>
<MCTEMPLATE>{HEX}
<MCTYPE>2</MCTYPE>
</MESSAGE_TEMPLATE>
</TEMPLATE_CLASS>
</TEMPLATE_CLASSES>
</PACKAGE>
</PACKAGES>
<ENTRIES>
<ENTRY>
<MCDISPLAYNAME>SAPC_IDM_DISPLAY_ALL</MCDISPLAYNAME>
<MCENTRYTYPE>MX_ROLE</MCENTRYTYPE>
<MCMSKEYVALUE>SAPC_IDM_DISPLAY_ALL</MCMSKEYVALUE>
</ENTRY>
</ENTRIES>
<DISPATCHERS>
<DISPATCHER MACHINE="aseDispatcher">
<JOBID>706958A7-FC47-4407-8639-E9C4EB9A7F1B</JOBID>
<JOBID>4B6E3935-63DA-4009-9685-036E2C8AE721</JOBID>
<JOBID>27FE45E5-0F4F-4827-AE16-68F343366161</JOBID>
<JOBID>C28666A6-8F62-4BEE-88AF-44BAC07F09C1</JOBID>
<JOBID>FF2EFC48-40E1-4FCE-B23B-1B390DB91E75</JOBID>
<JOBID>0A5B0C20-556D-4869-8382-36990553543E</JOBID>
</DISPATCHER>
<DISPATCHER MACHINE="sqlDispatcher">
<JOBID>1CB97202-9A53-41FC-813A-3D5B3C0DD530</JOBID>
</DISPATCHER>
</DISPATCHERS>
<PACKAGE_HISTORY>
<MCDESCRIPTION>Modification to sapc_getNameOfAssignedPendingPrivileges to provision delta validity modifications (get old validity dates from link audit)</MCDESCRIPTION>
<MCMODIFIEDBYUSERNAME>D050614</MCMODIFIEDBYUSERNAME>
<MCMODIFIEDDATE>1732721730000</MCMODIFIEDDATE>
<MCPACKAGEID>com.sap.rds.idm.core</MCPACKAGEID>
</PACKAGE_HISTORY>
</IDM>
